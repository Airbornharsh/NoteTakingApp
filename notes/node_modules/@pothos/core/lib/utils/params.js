"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        get: all[name],
        enumerable: true
    });
}
_export(exports, {
    inputTypeFromNonListParam: ()=>inputTypeFromNonListParam,
    inputTypeFromParam: ()=>inputTypeFromParam,
    typeFromNonListParam: ()=>typeFromNonListParam,
    typeFromParam: ()=>typeFromParam
});
const _base = _interopRequireDefault(require("../refs/base"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function typeFromNonListParam(type, configStore, nullable) {
    const ref = configStore.getOutputTypeRef(type);
    const kind = ref instanceof _base.default ? ref.kind : configStore.getTypeConfig(ref).graphqlKind;
    const name = ref instanceof _base.default ? ref.name : configStore.getTypeConfig(ref).name;
    if (kind !== 'InputObject') {
        return {
            kind,
            ref,
            nullable
        };
    }
    throw new Error(`Expected input param ${name} to be an InputObject, Enum, or Scalar but got ${kind}`);
}
function typeFromParam(param, configStore, nullable) {
    const itemNullable = typeof nullable === 'object' ? nullable.items : false;
    const listNullable = typeof nullable === 'object' ? nullable.list : !!nullable;
    if (Array.isArray(param)) {
        return {
            kind: 'List',
            type: typeFromNonListParam(param[0], configStore, itemNullable),
            nullable: listNullable
        };
    }
    return typeFromNonListParam(param, configStore, listNullable);
}
function inputTypeFromNonListParam(type, configStore, required) {
    const ref = configStore.getInputTypeRef(type);
    const kind = ref instanceof _base.default ? ref.kind : configStore.getTypeConfig(ref).graphqlKind;
    const name = ref instanceof _base.default ? ref.name : configStore.getTypeConfig(ref).name;
    if (kind === 'InputObject' || kind === 'Enum' || kind === 'Scalar') {
        return {
            kind,
            ref,
            required
        };
    }
    throw new Error(`Expected input param ${name} to be an InputObject, Enum, or Scalar but got ${kind}`);
}
function inputTypeFromParam(param, configStore, required) {
    const itemRequired = typeof required === 'object' ? required.items : true;
    const listRequired = typeof required === 'object' ? required.list : !!required;
    if (Array.isArray(param)) {
        return {
            kind: 'List',
            type: inputTypeFromNonListParam(param[0], configStore, itemRequired),
            required: listRequired
        };
    }
    return inputTypeFromNonListParam(param, configStore, listRequired);
}

//# sourceMappingURL=params.js.map