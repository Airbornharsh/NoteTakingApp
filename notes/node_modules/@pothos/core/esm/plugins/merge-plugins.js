import { BasePlugin } from './plugin.js';
export class MergedPlugins extends BasePlugin {
    onTypeConfig(typeConfig) {
        return this.plugins.reduceRight((config, plugin) => config === null ? config : plugin.onTypeConfig(config), typeConfig);
    }
    onInputFieldConfig(fieldConfig) {
        return this.plugins.reduceRight((config, plugin) => config === null ? config : plugin.onInputFieldConfig(config), fieldConfig);
    }
    onOutputFieldConfig(fieldConfig) {
        return this.plugins.reduceRight((config, plugin) => config === null ? config : plugin.onOutputFieldConfig(config), fieldConfig);
    }
    onEnumValueConfig(valueConfig) {
        return this.plugins.reduceRight((config, plugin) => config === null ? config : plugin.onEnumValueConfig(config), valueConfig);
    }
    beforeBuild() {
        for (const plugin of this.plugins) {
            plugin.beforeBuild();
        }
    }
    afterBuild(schema) {
        return this.plugins.reduceRight((nextSchema, plugin) => plugin.afterBuild(nextSchema), schema);
    }
    wrapResolve(resolve, fieldConfig) {
        return this.plugins.reduceRight((nextResolve, plugin) => plugin.wrapResolve(nextResolve, fieldConfig), resolve);
    }
    wrapSubscribe(subscribe, fieldConfig) {
        return this.plugins.reduceRight((nextSubscribe, plugin) => plugin.wrapSubscribe(nextSubscribe, fieldConfig), subscribe);
    }
    wrapResolveType(resolveType, typeConfig) {
        return this.plugins.reduceRight((nextResolveType, plugin) => plugin.wrapResolveType(nextResolveType, typeConfig), resolveType);
    }
    wrapIsTypeOf(isTypeOf, typeConfig) {
        return this.plugins.reduceRight((nextResolveType, plugin) => plugin.wrapIsTypeOf(nextResolveType, typeConfig), isTypeOf);
    }
    constructor(buildCache, plugins) {
        super(buildCache, "PothosMergedPlugin");
        this.plugins = plugins;
    }
}
//# sourceMappingURL=merge-plugins.js.map
