import RootFieldBuilder from './root.js';
class FieldBuilder extends RootFieldBuilder {
    /**
   * Create a Boolean field from a boolean property on the parent object
   * @param {string} name - the name of the property on the source object (does not need to match the field name).
   * @param {object} [options={}] - Options for this field
   */ exposeBoolean(...args) {
        const [name, options = {}] = args;
        return this.exposeField(name, {
            ...options,
            type: "Boolean"
        });
    }
    /**
   * Create a Float field from a numeric property on the parent object
   * @param {string} name - the name of the property on the source object (does not need to match the field name).
   * @param {object} [options={}] - Options for this field
   */ exposeFloat(...args) {
        const [name, options = {}] = args;
        return this.exposeField(name, {
            ...options,
            type: "Float"
        });
    }
    /**
   * Create an ID field from a property on the parent object
   * @param {string} name - the name of the property on the source object (does not need to match the field name).
   * @param {object} [options={}] - Options for this field
   */ exposeID(...args) {
        const [name, options = {}] = args;
        return this.exposeField(name, {
            ...options,
            type: "ID"
        });
    }
    /**
   * Create an Int field from a numeric property on the parent object
   * @param {string} name - the name of the property on the source object (does not need to match the field name).
   * @param {object} [options={}] - Options for this field
   */ exposeInt(...args) {
        const [name, options = {}] = args;
        return this.exposeField(name, {
            ...options,
            type: "Int"
        });
    }
    /**
   * Create a String field from a string property on the parent object
   * @param {string} name - the name of the property on the source object (does not need to match the field name).
   * @param {object} [options={}] - Options for this field
   */ exposeString(...args) {
        const [name, options = {}] = args;
        return this.exposeField(name, {
            ...options,
            type: "String"
        });
    }
    /**
   * Create a Boolean list field from a boolean[] property on the parent object
   * @param {string} name - the name of the property on the source object (does not need to match the field name).
   * @param {object} [options={}] - Options for this field
   */ exposeBooleanList(...args) {
        const [name, options = {}] = args;
        return this.exposeField(name, {
            ...options,
            type: [
                "Boolean"
            ]
        });
    }
    /**
   * Create a Float list field from a number[] property on the parent object
   * @param {string} name - the name of the property on the source object (does not need to match the field name).
   * @param {object} [options={}] - Options for this field
   */ exposeFloatList(...args) {
        const [name, options = {}] = args;
        return this.exposeField(name, {
            ...options,
            type: [
                "Float"
            ]
        });
    }
    /**
   * Create an ID list field from an id[] property on the parent object
   * @param {string} name - the name of the property on the source object (does not need to match the field name).
   * @param {object} [options={}] - Options for this field
   */ exposeIDList(...args) {
        const [name, options = {}] = args;
        return this.exposeField(name, {
            ...options,
            type: [
                "ID"
            ]
        });
    }
    /**
   * Create a Int list field from a number[] property on the parent object
   * @param {string} name - the name of the property on the source object (does not need to match the field name).
   * @param {object} [options={}] - Options for this field
   */ exposeIntList(...args) {
        const [name, options = {}] = args;
        return this.exposeField(name, {
            ...options,
            type: [
                "Int"
            ]
        });
    }
    /**
   * Create a String list field from a string[] property on the parent object
   * @param {string} name - the name of the property on the source object (does not need to match the field name).
   * @param {object} [options={}] - Options for this field
   */ exposeStringList(...args) {
        const [name, options = {}] = args;
        return this.exposeField(name, {
            ...options,
            type: [
                "String"
            ]
        });
    }
    /**
   * Create a field that resolves to a property of the corresponding type on the parent object
   * @param {string} name - the name of the property on the source object (does not need to match the field name).
   * @param {object} [options={}] - Options for this field
   */ expose(...args) {
        const [name, options = {}] = args;
        return this.exposeField(name, options);
    }
}
export { FieldBuilder as default };
//# sourceMappingURL=builder.js.map
