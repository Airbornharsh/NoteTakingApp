import InputFieldRef from '../refs/input-field.js';
import { inputTypeFromParam } from '../utils/index.js';
class InputFieldBuilder {
    argBuilder() {
        const builder = this.field.bind(this);
        const protoKeys = Object.keys(Object.getPrototypeOf(this)).filter((key) => typeof this[key] === "function" && Function.prototype[key] === undefined);
        [
            ...Object.keys(this),
            ...protoKeys
        ].forEach((key) => {
            builder[key] = typeof this[key] === "function" ? this[key].bind(this) : this[key];
        });
        return builder;
    }
    /**
   * Create in input field or argument for the current type
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ field(options) {
        const ref = new InputFieldRef(this.kind, this.typename);
        var _required;
        this.builder.configStore.addFieldRef(ref, options.type, {}, (name, parentField, typeConfig) => ({
            name,
            parentField,
            kind: this.kind,
            graphqlKind: this.kind,
            parentType: typeConfig.name,
            type: inputTypeFromParam(options.type, this.builder.configStore, (_required = options.required) !== null && _required !== void 0 ? _required : this.builder.defaultInputFieldRequiredness),
            pothosOptions: options,
            description: options.description,
            deprecationReason: options.deprecationReason,
            defaultValue: options.defaultValue,
            extensions: options.extensions
        }));
        return ref;
    }
    helper(type) {
        return (...args) => {
            const [options = {}] = args;
            return this.field({
                ...options,
                type
            });
        };
    }
    constructor(builder, kind, typename) {
        /**
   * Create a Boolean input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ this.boolean = this.helper("Boolean");
        /**
   * Create a Float input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ this.float = this.helper("Float");
        /**
   * Create a ID input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ this.id = this.helper("ID");
        /**
   * Create a Int input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ this.int = this.helper("Int");
        /**
   * Create a String input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ this.string = this.helper("String");
        /**
   * Create a Boolean list input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ this.booleanList = this.helper([
            "Boolean"
        ]);
        /**
   * Create a Float list input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ this.floatList = this.helper([
            "Float"
        ]);
        /**
   * Create a ID list input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ this.idList = this.helper([
            "ID"
        ]);
        /**
   * Create a Int list input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ this.intList = this.helper([
            "Int"
        ]);
        /**
   * Create a String list input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ this.stringList = this.helper([
            "String"
        ]);
        this.builder = builder;
        this.kind = kind;
        this.typename = typename;
    }
}
export { InputFieldBuilder as default };
//# sourceMappingURL=input.js.map
