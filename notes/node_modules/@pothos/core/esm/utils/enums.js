export function normalizeEnumValues(values) {
    const result = {};
    if (Array.isArray(values)) {
        values.forEach((key) => {
            result[String(key)] = {
                pothosOptions: {}
            };
        });
    }
    else {
        Object.entries(values).forEach(([key, value]) => {
            if (value && typeof value === "object") {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                result[key] = {
                    ...value,
                    pothosOptions: value
                };
            }
            else if (typeof value === "string") {
                result[value] = {
                    pothosOptions: {}
                };
            }
        });
    }
    return result;
}
export function valuesFromEnum(Enum) {
    const result = {};
    Object.keys(Enum).filter((key) => typeof Enum[Enum[key]] !== "number").forEach((key) => {
        result[key] = {
            value: Enum[key],
            pothosOptions: {}
        };
    });
    return result;
}
//# sourceMappingURL=enums.js.map
