import FieldRef from '../refs/field';
import type { FieldKind, InputFieldMap, ShapeFromTypeParam } from '../types';
import { CompatibleTypes, FieldNullability, SchemaTypes, TypeParam } from '../types';
export default class BaseFieldUtil<Types extends SchemaTypes, ParentShape, Kind extends FieldKind> {
    typename: string;
    builder: PothosSchemaTypes.SchemaBuilder<Types>;
    kind: Kind;
    graphqlKind: PothosSchemaTypes.PothosKindToGraphQLType[Kind];
    constructor(name: string, builder: PothosSchemaTypes.SchemaBuilder<Types>, kind: Kind, graphqlKind: PothosSchemaTypes.PothosKindToGraphQLType[Kind]);
    protected createField<Args extends InputFieldMap, Type extends TypeParam<Types>, Nullable extends FieldNullability<Type>>(options: PothosSchemaTypes.FieldOptions<Types, ParentShape, Type, Nullable, Args, any, {}>): FieldRef<ShapeFromTypeParam<Types, Type, Nullable>, Kind>;
    protected exposeField<Type extends TypeParam<Types>, Nullable extends FieldNullability<Type>, Name extends CompatibleTypes<Types, ParentShape, Type, Nullable>>(name: Name, { extensions, ...options }: Omit<PothosSchemaTypes.ObjectFieldOptions<Types, ParentShape, Type, Nullable, {}, {}>, 'resolve'>): FieldRef<ShapeFromTypeParam<Types, Type, Nullable>, Kind>;
}
//# sourceMappingURL=base.d.ts.map