import type { ArgBuilder, InputFieldMap, NormalizeArgs } from '../types';
import { FieldKind, FieldNullability, FieldOptionsFromKind, SchemaTypes, TypeParam } from '../types';
import BaseFieldUtil from './base';
export default class RootFieldBuilder<Types extends SchemaTypes, ParentShape, Kind extends FieldKind = FieldKind> extends BaseFieldUtil<Types, ParentShape, Kind> {
    arg: ArgBuilder<Types>;
    /**
     * Create a Boolean field
     * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
     */
    boolean<Args extends InputFieldMap, ResolveShape, ResolveReturnShape, Nullable extends FieldNullability<'Boolean'> = Types['DefaultFieldNullability']>(...args: NormalizeArgs<[
        options?: Omit<FieldOptionsFromKind<Types, ParentShape, 'Boolean', Nullable, Args, Kind, ResolveShape, ResolveReturnShape>, 'type'>
    ]>): import("..").FieldRef<FieldNullability<"Boolean"> extends Nullable ? Types["DefaultFieldNullability"] extends true ? ("Boolean" extends infer T ? T extends "Boolean" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never) | null | undefined : "Boolean" extends infer T ? T extends "Boolean" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never : Nullable extends true ? ("Boolean" extends infer T ? T extends "Boolean" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never) | null | undefined : "Boolean" extends infer T ? T extends "Boolean" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never, Kind>;
    /**
     * Create a Float field
     * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
     */
    float<Args extends InputFieldMap, Nullable extends FieldNullability<'Float'>, ResolveShape, ResolveReturnShape>(...args: NormalizeArgs<[
        options?: Omit<FieldOptionsFromKind<Types, ParentShape, 'Float', Nullable, Args, Kind, ResolveShape, ResolveReturnShape>, 'type'>
    ]>): import("..").FieldRef<FieldNullability<"Float"> extends Nullable ? Types["DefaultFieldNullability"] extends true ? ("Float" extends infer T ? T extends "Float" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never) | null | undefined : "Float" extends infer T ? T extends "Float" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never : Nullable extends true ? ("Float" extends infer T ? T extends "Float" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never) | null | undefined : "Float" extends infer T ? T extends "Float" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never, Kind>;
    /**
     * Create a ID field
     * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
     */
    id<Args extends InputFieldMap, Nullable extends FieldNullability<'ID'>, ResolveShape, ResolveReturnShape>(...args: NormalizeArgs<[
        options?: Omit<FieldOptionsFromKind<Types, ParentShape, 'ID', Nullable, Args, Kind, ResolveShape, ResolveReturnShape>, 'type'>
    ]>): import("..").FieldRef<FieldNullability<"ID"> extends Nullable ? Types["DefaultFieldNullability"] extends true ? ("ID" extends infer T ? T extends "ID" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never) | null | undefined : "ID" extends infer T ? T extends "ID" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never : Nullable extends true ? ("ID" extends infer T ? T extends "ID" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never) | null | undefined : "ID" extends infer T ? T extends "ID" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never, Kind>;
    /**
     * Create a Int field
     * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
     */
    int<Args extends InputFieldMap, Nullable extends FieldNullability<'Int'>, ResolveShape, ResolveReturnShape>(...args: NormalizeArgs<[
        options?: Omit<FieldOptionsFromKind<Types, ParentShape, 'Int', Nullable, Args, Kind, ResolveShape, ResolveReturnShape>, 'type'>
    ]>): import("..").FieldRef<FieldNullability<"Int"> extends Nullable ? Types["DefaultFieldNullability"] extends true ? ("Int" extends infer T ? T extends "Int" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never) | null | undefined : "Int" extends infer T ? T extends "Int" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never : Nullable extends true ? ("Int" extends infer T ? T extends "Int" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never) | null | undefined : "Int" extends infer T ? T extends "Int" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never, Kind>;
    /**
     * Create a String field
     * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
     */
    string<Args extends InputFieldMap, ResolveShape, ResolveReturnShape, Nullable extends FieldNullability<'String'> = Types['DefaultFieldNullability']>(...args: NormalizeArgs<[
        options?: Omit<FieldOptionsFromKind<Types, ParentShape, 'String', Nullable, Args, Kind, ResolveShape, ResolveReturnShape>, 'type'>
    ]>): import("..").FieldRef<FieldNullability<"String"> extends Nullable ? Types["DefaultFieldNullability"] extends true ? ("String" extends infer T ? T extends "String" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never) | null | undefined : "String" extends infer T ? T extends "String" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never : Nullable extends true ? ("String" extends infer T ? T extends "String" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never) | null | undefined : "String" extends infer T ? T extends "String" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends import("../types").BaseEnum ? import("../types").ValuesFromEnum<T> : never : never : never, Kind>;
    /**
     * Create a Boolean list field
     * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
     */
    booleanList<Args extends InputFieldMap, ResolveShape, ResolveReturnShape, Nullable extends FieldNullability<['Boolean']> = Types['DefaultFieldNullability']>(...args: NormalizeArgs<[
        options?: Omit<FieldOptionsFromKind<Types, ParentShape, [
            'Boolean'
        ], Nullable, Args, Kind, ResolveShape, ResolveReturnShape>, 'type'>
    ]>): import("..").FieldRef<import("../types").ShapeFromTypeParam<Types, ["Boolean"], Nullable>, Kind>;
    /**
     * Create a Float list field
     * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
     */
    floatList<Args extends InputFieldMap, ResolveShape, ResolveReturnShape, Nullable extends FieldNullability<['Float']> = Types['DefaultFieldNullability']>(...args: NormalizeArgs<[
        options?: Omit<FieldOptionsFromKind<Types, ParentShape, [
            'Float'
        ], Nullable, Args, Kind, ResolveShape, ResolveReturnShape>, 'type'>
    ]>): import("..").FieldRef<import("../types").ShapeFromTypeParam<Types, ["Float"], Nullable>, Kind>;
    /**
     * Create a ID list field
     * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
     */
    idList<Args extends InputFieldMap, Nullable extends FieldNullability<['ID']>, ResolveShape, ResolveReturnShape>(...args: NormalizeArgs<[
        options?: Omit<FieldOptionsFromKind<Types, ParentShape, [
            'ID'
        ], Nullable, Args, Kind, ResolveShape, ResolveReturnShape>, 'type'>
    ]>): import("..").FieldRef<import("../types").ShapeFromTypeParam<Types, ["ID"], Nullable>, Kind>;
    /**
     * Create a Int list field
     * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
     */
    intList<Args extends InputFieldMap, ResolveShape, ResolveReturnShape, Nullable extends FieldNullability<['Int']> = Types['DefaultFieldNullability']>(...args: NormalizeArgs<[
        options?: Omit<FieldOptionsFromKind<Types, ParentShape, [
            'Int'
        ], Nullable, Args, Kind, ResolveShape, ResolveReturnShape>, 'type'>
    ]>): import("..").FieldRef<import("../types").ShapeFromTypeParam<Types, ["Int"], Nullable>, Kind>;
    /**
     * Create a String list field
     * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
     */
    stringList<Args extends InputFieldMap, ResolveShape, ResolveReturnShape, Nullable extends FieldNullability<['String']> = Types['DefaultFieldNullability']>(...args: NormalizeArgs<[
        options?: Omit<FieldOptionsFromKind<Types, ParentShape, [
            'String'
        ], Nullable, Args, Kind, ResolveShape, ResolveReturnShape>, 'type'>
    ]>): import("..").FieldRef<import("../types").ShapeFromTypeParam<Types, ["String"], Nullable>, Kind>;
    /**
     * create a new field for the current type
     * @param {PothosSchemaTypes.FieldOptions} options - options for this field
     */
    field<Args extends InputFieldMap, Type extends TypeParam<Types>, ResolveShape, ResolveReturnShape, Nullable extends FieldNullability<Type> = Types['DefaultFieldNullability']>(options: FieldOptionsFromKind<Types, ParentShape, Type, Nullable, Args, Kind, ResolveShape, ResolveReturnShape>): import("..").FieldRef<import("../types").ShapeFromTypeParam<Types, Type, Nullable>, Kind>;
}
//# sourceMappingURL=root.d.ts.map