import './types/global';
import SchemaBuilderClass from './builder';
import { FieldKind, NormalizeSchemeBuilderOptions, SchemaTypes } from './types';
export * from './plugins';
export * from './types';
export * from './utils';
declare const SchemaBuilder: {
    new <Types extends Partial<PothosSchemaTypes.UserSchemaTypes> = {}>(options: import("./types").RemoveNeverKeys<PothosSchemaTypes.SchemaBuilderOptions<PothosSchemaTypes.ExtendDefaultTypes<Types>>>): PothosSchemaTypes.SchemaBuilder<PothosSchemaTypes.ExtendDefaultTypes<Types>>;
    registerPlugin: typeof SchemaBuilderClass.registerPlugin;
    allowPluginReRegistration: boolean;
};
export default SchemaBuilder;
export declare const FieldBuilder: new <Types extends SchemaTypes, ParentShape, Kind extends "Object" | "Interface" = "Object" | "Interface">(name: string, builder: SchemaBuilderClass<Types>, kind: FieldKind, graphqlKind: PothosSchemaTypes.PothosKindToGraphQLType[FieldKind]) => PothosSchemaTypes.FieldBuilder<Types, ParentShape, Kind>;
export declare type RootFieldBuilder<Types extends SchemaTypes, ParentShape, Kind extends FieldKind = FieldKind> = PothosSchemaTypes.RootFieldBuilder<Types, ParentShape, Kind>;
export declare const RootFieldBuilder: new <Types extends SchemaTypes, ParentShape, Kind extends "Query" | "Mutation" | "Subscription" | "Object" | "Interface" = "Query" | "Mutation" | "Subscription" | "Object" | "Interface">(name: string, builder: SchemaBuilderClass<Types>, kind: FieldKind, graphqlKind: PothosSchemaTypes.PothosKindToGraphQLType[FieldKind]) => PothosSchemaTypes.RootFieldBuilder<Types, ParentShape, Kind>;
export declare type QueryFieldBuilder<Types extends SchemaTypes, ParentShape> = PothosSchemaTypes.QueryFieldBuilder<Types, ParentShape>;
export declare const QueryFieldBuilder: new <Types extends SchemaTypes, ParentShape>(builder: SchemaBuilderClass<Types>) => PothosSchemaTypes.QueryFieldBuilder<Types, ParentShape>;
export declare type MutationFieldBuilder<Types extends SchemaTypes, ParentShape> = PothosSchemaTypes.MutationFieldBuilder<Types, ParentShape>;
export declare const MutationFieldBuilder: new <Types extends SchemaTypes, ParentShape>(builder: SchemaBuilderClass<Types>) => PothosSchemaTypes.MutationFieldBuilder<Types, ParentShape>;
export declare type SubscriptionFieldBuilder<Types extends SchemaTypes, ParentShape> = PothosSchemaTypes.SubscriptionFieldBuilder<Types, ParentShape>;
export declare const SubscriptionFieldBuilder: new <Types extends SchemaTypes, ParentShape>(builder: SchemaBuilderClass<Types>) => PothosSchemaTypes.SubscriptionFieldBuilder<Types, ParentShape>;
export declare type ObjectFieldBuilder<Types extends SchemaTypes, ParentShape> = PothosSchemaTypes.ObjectFieldBuilder<Types, ParentShape>;
export declare const ObjectFieldBuilder: new <Types extends SchemaTypes, ParentShape>(name: string, builder: SchemaBuilderClass<Types>) => PothosSchemaTypes.ObjectFieldBuilder<Types, ParentShape>;
export declare type InterfaceFieldBuilder<Types extends SchemaTypes, ParentShape> = PothosSchemaTypes.InterfaceFieldBuilder<Types, ParentShape>;
export declare const InterfaceFieldBuilder: new <Types extends SchemaTypes, ParentShape>(name: string, builder: SchemaBuilderClass<Types>) => PothosSchemaTypes.InterfaceFieldBuilder<Types, ParentShape>;
export declare type InputFieldBuilder<Types extends SchemaTypes, Kind extends 'Arg' | 'InputObject' = 'Arg' | 'InputObject'> = PothosSchemaTypes.InputFieldBuilder<Types, Kind>;
export declare const InputFieldBuilder: new <Types extends SchemaTypes, Kind extends "InputObject" | "Arg" = "InputObject" | "Arg">(builder: SchemaBuilderClass<Types>, kind: Kind, typename: string) => PothosSchemaTypes.InputFieldBuilder<Types, Kind>;
export declare type BaseTypeRef = PothosSchemaTypes.BaseTypeRef;
export declare const BaseTypeRef: new (kind: 'Enum' | 'InputObject' | 'Interface' | 'Object' | 'Scalar' | 'Union', name: string) => PothosSchemaTypes.BaseTypeRef;
export declare type EnumRef<T, P = T> = PothosSchemaTypes.EnumRef<T, P>;
export declare const EnumRef: new <T, P = T>(name: string) => PothosSchemaTypes.EnumRef<T, P>;
export declare type InputObjectRef<T> = PothosSchemaTypes.InputObjectRef<T>;
export declare const InputObjectRef: new <T>(name: string) => PothosSchemaTypes.InputObjectRef<T>;
export declare type InterfaceRef<T, P = T> = PothosSchemaTypes.InterfaceRef<T, P>;
export declare const InterfaceRef: new <T, P = T>(name: string) => PothosSchemaTypes.InterfaceRef<T, P>;
export declare type ObjectRef<T, P = T> = PothosSchemaTypes.ObjectRef<T, P>;
export declare const ObjectRef: new <T, P = T>(name: string) => PothosSchemaTypes.ObjectRef<T, P>;
export declare type ScalarRef<T, U, P = T> = PothosSchemaTypes.ScalarRef<T, U, P>;
export declare const ScalarRef: new <T, U, P = T>(name: string) => PothosSchemaTypes.ScalarRef<T, U, P>;
export declare type UnionRef<T, P = T> = PothosSchemaTypes.UnionRef<T, P>;
export declare const UnionRef: new <T, P = T>(name: string) => PothosSchemaTypes.UnionRef<T, P>;
export { default as BuildCache } from './build-cache';
export { default as BuiltinScalarRef } from './refs/builtin-scalar';
export { default as FieldRef } from './refs/field';
export { default as InputTypeRef } from './refs/input';
export { default as InputFieldRef } from './refs/input-field';
export { ImplementableInputObjectRef } from './refs/input-object';
export { ImplementableInterfaceRef } from './refs/interface';
export { ImplementableObjectRef } from './refs/object';
export { default as OutputTypeRef } from './refs/output';
//# sourceMappingURL=index.d.ts.map