import { InterfaceParam, InterfaceTypeOptions, OutputRef, outputShapeKey, parentShapeKey, SchemaTypes } from '../types';
import BaseTypeRef from './base';
export default class InterfaceRef<T, P = T> extends BaseTypeRef implements OutputRef, PothosSchemaTypes.InterfaceRef<T, P> {
    kind: "Interface";
    [outputShapeKey]: T;
    [parentShapeKey]: P;
    constructor(name: string);
}
export declare class ImplementableInterfaceRef<Types extends SchemaTypes, Shape, Parent = Shape> extends InterfaceRef<Shape, Parent> {
    protected builder: PothosSchemaTypes.SchemaBuilder<Types>;
    constructor(builder: PothosSchemaTypes.SchemaBuilder<Types>, name: string);
    implement<Interfaces extends InterfaceParam<Types>[]>(options: InterfaceTypeOptions<Types, ImplementableInterfaceRef<Types, Shape, Parent>, Parent, Interfaces>): import("..").InterfaceRef<Shape, Parent>;
}
//# sourceMappingURL=interface.d.ts.map