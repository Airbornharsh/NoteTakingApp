import { InterfaceParam, ObjectTypeOptions, OutputRef, outputShapeKey, parentShapeKey, SchemaTypes } from '../types';
import BaseTypeRef from './base';
export default class ObjectRef<T, P = T> extends BaseTypeRef implements OutputRef, PothosSchemaTypes.ObjectRef<T, P> {
    kind: "Object";
    [outputShapeKey]: T;
    [parentShapeKey]: P;
    constructor(name: string);
}
export declare class ImplementableObjectRef<Types extends SchemaTypes, Shape, Parent = Shape> extends ObjectRef<Shape, Parent> {
    protected builder: PothosSchemaTypes.SchemaBuilder<Types>;
    constructor(builder: PothosSchemaTypes.SchemaBuilder<Types>, name: string);
    implement<Interfaces extends InterfaceParam<Types>[]>(options: Omit<ObjectTypeOptions<Types, ImplementableObjectRef<Types, Shape, Parent>, Parent, Interfaces>, 'name'>): PothosSchemaTypes.ObjectRef<Shape, Parent>;
}
//# sourceMappingURL=object.d.ts.map