import { GraphQLIsTypeOfFn, GraphQLResolveInfo, GraphQLScalarLiteralParser, GraphQLScalarValueParser, GraphQLUnionType } from 'graphql';
import { EnumValues, InputFieldMap, InterfaceFieldsShape, MutationFieldsShape, ObjectFieldsShape, QueryFieldsShape, SubscriptionFieldsShape, ValidateInterfaces } from '../builder-options';
import { RootName, SchemaTypes } from '../schema-types';
import type { InterfaceParam, ObjectParam, ParentShape } from '../type-params';
import { MaybePromise } from '../utils';
declare global {
    export namespace PothosSchemaTypes {
        interface BaseTypeOptions<Types extends SchemaTypes = SchemaTypes> {
            description?: string;
            extensions?: Readonly<Record<string, unknown>>;
        }
        interface EnumTypeOptions<Types extends SchemaTypes = SchemaTypes, Values extends EnumValues<Types> = EnumValues<Types>> extends BaseTypeOptions<Types> {
            values: Values;
        }
        interface ObjectTypeOptions<Types extends SchemaTypes = SchemaTypes, Shape = unknown> extends BaseTypeOptions<Types> {
            fields?: ObjectFieldsShape<Types, Shape>;
            interfaces?: undefined;
            isTypeOf?: GraphQLIsTypeOfFn<unknown, Types['Context']>;
        }
        interface ObjectTypeWithInterfaceOptions<Types extends SchemaTypes = SchemaTypes, Shape = unknown, Interfaces extends InterfaceParam<Types>[] = InterfaceParam<Types>[]> extends Omit<ObjectTypeOptions<Types, Shape>, 'interfaces'> {
            interfaces: (() => Interfaces & ValidateInterfaces<Shape, Types, Interfaces[number]>[]) | (Interfaces & ValidateInterfaces<Shape, Types, Interfaces[number]>[]);
        }
        interface RootTypeOptions<Types extends SchemaTypes, Type extends RootName> extends BaseTypeOptions<Types> {
        }
        interface QueryTypeOptions<Types extends SchemaTypes = SchemaTypes> extends RootTypeOptions<Types, 'Query'> {
            fields?: QueryFieldsShape<Types>;
        }
        interface MutationTypeOptions<Types extends SchemaTypes = SchemaTypes> extends RootTypeOptions<Types, 'Mutation'> {
            fields?: MutationFieldsShape<Types>;
        }
        interface SubscriptionTypeOptions<Types extends SchemaTypes = SchemaTypes> extends RootTypeOptions<Types, 'Subscription'> {
            fields?: SubscriptionFieldsShape<Types>;
        }
        interface InputObjectTypeOptions<Types extends SchemaTypes = SchemaTypes, Fields extends InputFieldMap = InputFieldMap> extends BaseTypeOptions<Types> {
            fields: (t: InputFieldBuilder<Types, 'InputObject'>) => Fields;
        }
        interface InterfaceTypeOptions<Types extends SchemaTypes = SchemaTypes, Shape = unknown, Interfaces extends InterfaceParam<Types>[] = InterfaceParam<Types>[]> extends BaseTypeOptions<Types> {
            fields?: InterfaceFieldsShape<Types, Shape>;
            interfaces?: (Interfaces & ValidateInterfaces<Shape, Types, Interfaces[number]>[]) | (() => Interfaces & ValidateInterfaces<Shape, Types, Interfaces[number]>[]);
            resolveType?: (parent: Shape, context: Types['Context'], info: GraphQLResolveInfo, type: GraphQLUnionType) => MaybePromise<ObjectParam<Types> | string | null | undefined>;
        }
        interface UnionTypeOptions<Types extends SchemaTypes = SchemaTypes, Member extends ObjectParam<Types> = ObjectParam<Types>> extends BaseTypeOptions<Types> {
            types: Member[];
            resolveType?: (parent: ParentShape<Types, Member>, context: Types['Context'], info: GraphQLResolveInfo, type: GraphQLUnionType) => MaybePromise<Member | string | null | undefined>;
        }
        interface ScalarTypeOptions<Types extends SchemaTypes = SchemaTypes, ScalarInputShape = unknown, ScalarOutputShape = unknown> extends BaseTypeOptions<Types> {
            serialize: (outputValue: ScalarOutputShape) => unknown;
            parseValue?: GraphQLScalarValueParser<ScalarInputShape>;
            parseLiteral?: GraphQLScalarLiteralParser<ScalarInputShape>;
        }
        interface EnumValueConfig<Types extends SchemaTypes> {
            description?: string;
            value?: number | string;
            deprecationReason?: string;
            extensions?: Readonly<Record<string, unknown>>;
        }
    }
}
//# sourceMappingURL=type-options.d.ts.map