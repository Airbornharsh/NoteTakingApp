import Builder from '../../builder';
import InternalFieldBuilder from '../../fieldUtils/builder';
import InternalInputFieldBuilder from '../../fieldUtils/input';
import InternalRootFieldBuilder from '../../fieldUtils/root';
import InternalBaseRef from '../../refs/base';
import InternalEnumRef from '../../refs/enum';
import InternalInputObjectRef from '../../refs/input-object';
import InternalInterfaceRef from '../../refs/interface';
import InternalObjectRef from '../../refs/object';
import InternalScalarRef from '../../refs/scalar';
import InternalUnionRef from '../../refs/union';
import type { FieldKind } from '../builder-options';
import type { SchemaTypes } from '../schema-types';
declare global {
    export namespace PothosSchemaTypes {
        interface SchemaBuilder<Types extends SchemaTypes> extends Builder<Types> {
        }
        interface RootFieldBuilder<Types extends SchemaTypes, ParentShape, Kind extends FieldKind = FieldKind> extends InternalRootFieldBuilder<Types, ParentShape, Kind> {
        }
        interface FieldBuilder<Types extends SchemaTypes, ParentShape, Kind extends FieldKind = FieldKind> extends InternalFieldBuilder<Types, ParentShape, Kind>, RootFieldBuilder<Types, ParentShape, Kind> {
        }
        interface QueryFieldBuilder<Types extends SchemaTypes, ParentShape> extends RootFieldBuilder<Types, ParentShape, 'Query'> {
        }
        interface MutationFieldBuilder<Types extends SchemaTypes, ParentShape> extends RootFieldBuilder<Types, ParentShape, 'Mutation'> {
        }
        interface SubscriptionFieldBuilder<Types extends SchemaTypes, ParentShape> extends RootFieldBuilder<Types, ParentShape, 'Subscription'> {
        }
        interface ObjectFieldBuilder<Types extends SchemaTypes, ParentShape> extends FieldBuilder<Types, ParentShape, 'Object'> {
        }
        interface InterfaceFieldBuilder<Types extends SchemaTypes, ParentShape> extends FieldBuilder<Types, ParentShape, 'Interface'> {
        }
        interface InputFieldBuilder<Types extends SchemaTypes, Kind extends 'Arg' | 'InputObject'> extends InternalInputFieldBuilder<Types, Kind> {
        }
        interface BaseTypeRef extends InternalBaseRef {
        }
        interface EnumRef<T, U = T> extends InternalEnumRef<T, U> {
        }
        interface InputObjectRef<T> extends InternalInputObjectRef<T> {
        }
        interface InterfaceRef<T, P = T> extends InternalInterfaceRef<T, P> {
        }
        interface ObjectRef<T, P = T> extends InternalObjectRef<T, P> {
        }
        interface ScalarRef<T, U, P = T> extends InternalScalarRef<T, U, P> {
        }
        interface UnionRef<T, P = T> extends InternalUnionRef<T, P> {
        }
    }
}
//# sourceMappingURL=classes.d.ts.map