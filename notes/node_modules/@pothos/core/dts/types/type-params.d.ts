import InterfaceRef from '../refs/interface';
import ObjectRef from '../refs/object';
import { RootName, SchemaTypes } from './schema-types';
export declare const outputShapeKey: unique symbol;
export declare const parentShapeKey: unique symbol;
export declare const abstractReturnShapeKey: unique symbol;
export declare const inputShapeKey: unique symbol;
export declare const inputFieldShapeKey: unique symbol;
export declare const outputFieldShapeKey: unique symbol;
export declare const typeBrandKey: unique symbol;
export declare type OutputShape<Types extends SchemaTypes, T> = T extends {
    [outputShapeKey]: infer U;
} ? U : T extends new (...args: any[]) => infer U ? U extends {
    [outputShapeKey]: infer V;
} ? V : U : T extends keyof Types['outputShapes'] ? Types['outputShapes'][T] : T extends BaseEnum ? ValuesFromEnum<T> : never;
export declare type ParentShape<Types extends SchemaTypes, T> = T extends {
    [parentShapeKey]: infer U;
} ? U : OutputShape<Types, T>;
export declare type AbstractReturnShape<Types extends SchemaTypes, T> = T extends {
    [abstractReturnShapeKey]: infer U;
} ? U : OutputShape<Types, T>;
export declare type InputShape<Types extends SchemaTypes, T> = T extends {
    [inputShapeKey]: infer U;
} ? U : T extends new (...args: any[]) => infer U ? U extends {
    [inputShapeKey]: infer V;
} ? V : U : T extends keyof Types['inputShapes'] ? Types['inputShapes'][T] : T extends BaseEnum ? ValuesFromEnum<T> : never;
export interface OutputRefShape<T> {
    [outputShapeKey]: T;
}
export interface InputRefShape<T> {
    [inputShapeKey]: T;
}
export interface OutputRef<T = unknown> {
    [outputShapeKey]: T;
    name: string;
    kind: 'Enum' | 'Interface' | 'Object' | 'Scalar' | 'Union';
}
export interface InputRef<T = unknown> {
    [inputShapeKey]: T;
    name: string;
    kind: 'Enum' | 'InputObject' | 'Scalar';
}
export declare type OutputType<Types extends SchemaTypes> = BaseEnum | keyof Types['outputShapes'] | (new (...args: any[]) => any) | {
    [outputShapeKey]: unknown;
};
export declare type InputType<Types extends SchemaTypes> = BaseEnum | keyof Types['inputShapes'] | {
    [inputShapeKey]: unknown;
};
export declare type ConfigurableRef<Types extends SchemaTypes> = InputType<Types> | OutputType<Types> | RootName;
export declare type TypeParam<Types extends SchemaTypes> = OutputType<Types> | [OutputType<Types>];
export declare type InputTypeParam<Types extends SchemaTypes> = InputType<Types> | [InputType<Types>];
export declare type ObjectParam<Types extends SchemaTypes> = Extract<OutputType<Types>, keyof Types['Objects']> | ObjectRef<unknown> | (new (...args: any[]) => any);
export declare type InterfaceParam<Types extends SchemaTypes> = Extract<OutputType<Types>, keyof Types['Interfaces']> | InterfaceRef<unknown> | (new (...args: any[]) => unknown);
export interface BaseEnum {
    [s: string]: number | string;
    [s: number]: string;
}
export declare type ValuesFromEnum<T extends BaseEnum> = T[keyof T];
export declare type EnumParam = BaseEnum | string;
export declare type ShapeWithNullability<Types extends SchemaTypes, Shape, Nullable extends boolean> = boolean extends Nullable ? Types['DefaultFieldNullability'] extends true ? Shape | null | undefined : Shape : Nullable extends true ? Shape | null | undefined : Shape;
export declare type ShapeFromTypeParam<Types extends SchemaTypes, Param extends TypeParam<Types>, Nullable extends FieldNullability<Param>> = Param extends [OutputType<Types>] ? ShapeFromListTypeParam<Types, Param, Nullable> : FieldNullability<Param> extends Nullable ? Types['DefaultFieldNullability'] extends true ? OutputShape<Types, Param> | null | undefined : OutputShape<Types, Param> : Nullable extends true ? OutputShape<Types, Param> | null | undefined : OutputShape<Types, Param>;
export declare type ShapeFromListTypeParam<Types extends SchemaTypes, Param extends [OutputType<Types>], Nullable extends FieldNullability<Param>> = FieldNullability<Param> extends Nullable ? Types['DefaultFieldNullability'] extends true ? OutputShape<Types, Param[0]>[] | null | undefined : OutputShape<Types, Param[0]>[] : Nullable extends true ? OutputShape<Types, Param[0]>[] | null | undefined : Nullable extends false ? OutputShape<Types, Param[0]>[] : Nullable extends {
    list: infer List;
    items: infer Items;
} ? Items extends boolean ? List extends true ? ShapeFromTypeParam<Types, Param[0], Items extends false ? false : true>[] | null | undefined : ShapeFromTypeParam<Types, Param[0], Items extends false ? false : true>[] : never : never;
export declare type FieldNullability<Param> = boolean | (Param extends [unknown] ? boolean | {
    items: boolean;
    list: boolean;
} : boolean);
export declare type InputShapeFromTypeParam<Types extends SchemaTypes, Param extends InputTypeParam<Types>, Required extends FieldRequiredness<Param>> = Param extends [InputType<Types>] ? InputShapeFromListTypeParam<Types, Param, Required> : FieldRequiredness<Param> extends Required ? Types['DefaultInputFieldRequiredness'] extends false ? InputShape<Types, Param> | null | undefined : InputShape<Types, Param> : Required extends true ? InputShape<Types, Param> : InputShape<Types, Param> | null | undefined;
export declare type InputShapeFromListTypeParam<Types extends SchemaTypes, Param extends [InputType<Types>], Required extends FieldRequiredness<Param>> = FieldRequiredness<Param> extends Required ? Types['DefaultInputFieldRequiredness'] extends false ? InputShape<Types, Param[0]>[] | null | undefined : InputShape<Types, Param[0]>[] : Required extends true ? InputShape<Types, Param[0]>[] : Required extends false ? InputShape<Types, Param[0]>[] | null | undefined : FieldRequiredness<Param> extends Required ? InputShape<Types, Param[0]>[] | null | undefined : Required extends boolean | {
    list: infer List;
    items: infer Items;
} ? Items extends boolean ? List extends true ? InputShapeFromTypeParam<Types, Param[0], Items extends false ? false : true>[] : InputShapeFromTypeParam<Types, Param[0], Items extends false ? false : true>[] | null | undefined : never : never;
export declare type FieldRequiredness<Param> = boolean | (Param extends [unknown] ? boolean | {
    items: boolean;
    list: boolean;
} : boolean);
//# sourceMappingURL=type-params.d.ts.map