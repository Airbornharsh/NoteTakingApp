{
  "version": "2",
  "toolVersion": "1.58.0",
  "snippets": {
    "fb3b10599762d195c8992b17e6420532e5fb6d1c0bc34ff552c5eb7d2eaf8d3e": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_appsync_alpha as appsync",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AppSync.Alpha;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.appsync.alpha.*;",
          "version": "1"
        },
        "go": {
          "source": "import appsync \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"",
          "version": "1"
        },
        "$": {
          "source": "import * as appsync from '@aws-cdk/aws-appsync-alpha';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 21
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as appsync from '@aws-cdk/aws-appsync-alpha';",
      "syntaxKindCounter": {
        "10": 1,
        "75": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "2c77c0a4a0f838ef4767a2c6ab5acc12723754f14ab1b029b83b98d47765b211": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.IAM\n        )\n    ),\n    xray_enabled=True\n)\n\ndemo_table = dynamodb.Table(self, \"DemoTable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\ndemo_dS = api.add_dynamo_db_data_source(\"demoDataSource\", demo_table)\n\n# Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemo_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemos\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_list()\n)\n\n# Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemo_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemo\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_put_item(\n        appsync.PrimaryKey.partition(\"id\").auto(),\n        appsync.Values.projecting(\"input\")),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_item()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.IAM\n        }\n    },\n    XrayEnabled = true\n});\n\nTable demoTable = new Table(this, \"DemoTable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nDynamoDbDataSource demoDS = api.AddDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemos\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbScanTable(),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultList()\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemo\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbPutItem(PrimaryKey.Partition(\"id\").Auto(), Values.Projecting(\"input\")),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultItem()\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.IAM)\n                        .build())\n                .build())\n        .xrayEnabled(true)\n        .build();\n\nTable demoTable = Table.Builder.create(this, \"DemoTable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nDynamoDbDataSource demoDS = api.addDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemos\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbScanTable())\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultList())\n        .build());\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemo\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbPutItem(PrimaryKey.partition(\"id\").auto(), Values.projecting(\"input\")))\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultItem())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_IAM,\n\t\t},\n\t},\n\txrayEnabled: jsii.Boolean(true),\n})\n\ndemoTable := dynamodb.NewTable(this, jsii.String(\"DemoTable\"), &tableProps{\n\tpartitionKey: &attribute{\n\t\tname: jsii.String(\"id\"),\n\t\ttype: dynamodb.attributeType_STRING,\n\t},\n})\n\ndemoDS := api.addDynamoDbDataSource(jsii.String(\"demoDataSource\"), demoTable)\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemos\"),\n\trequestMappingTemplate: appsync.mappingTemplate.dynamoDbScanTable(),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultList(),\n})\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemo\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.dynamoDbPutItem(appsync.primaryKey.partition(jsii.String(\"id\")).auto(), appsync.values.projecting(jsii.String(\"input\"))),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultItem(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 52
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AttributeValues",
        "@aws-cdk/aws-appsync-alpha.AuthorizationConfig",
        "@aws-cdk/aws-appsync-alpha.AuthorizationMode",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType#IAM",
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.DynamoDbDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addDynamoDbDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbPutItem",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbResultItem",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbResultList",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbScanTable",
        "@aws-cdk/aws-appsync-alpha.PartitionKeyStep#auto",
        "@aws-cdk/aws-appsync-alpha.PrimaryKey",
        "@aws-cdk/aws-appsync-alpha.PrimaryKey#partition",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#fromAsset",
        "@aws-cdk/aws-appsync-alpha.Values",
        "@aws-cdk/aws-appsync-alpha.Values#projecting",
        "aws-cdk-lib.aws_dynamodb.Attribute",
        "aws-cdk-lib.aws_dynamodb.AttributeType",
        "aws-cdk-lib.aws_dynamodb.AttributeType#STRING",
        "aws-cdk-lib.aws_dynamodb.ITable",
        "aws-cdk-lib.aws_dynamodb.Table",
        "aws-cdk-lib.aws_dynamodb.TableProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 62,
        "104": 2,
        "106": 1,
        "193": 7,
        "194": 25,
        "196": 12,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 17
      },
      "fqnsFingerprint": "563eecc13c99aa91a45a545fe26df40840ff9624e4522ff810b536395a46c4fb"
    },
    "e60d8b2f8c61c26849d8bdb47478374bd8e2b4e50c45665a0416e8b56f7241d2": {
      "translations": {
        "python": {
          "source": "# Build a data source for AppSync to access the database.\n# api: appsync.GraphqlApi\n# Create username and password secret for DB Cluster\nsecret = rds.DatabaseSecret(self, \"AuroraSecret\",\n    username=\"clusteradmin\"\n)\n\n# The VPC to place the cluster in\nvpc = ec2.Vpc(self, \"AuroraVpc\")\n\n# Create the serverless cluster, provide all values needed to customise the database.\ncluster = rds.ServerlessCluster(self, \"AuroraCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,\n    credentials={\"username\": \"clusteradmin\"},\n    cluster_identifier=\"db-endpoint-test\",\n    default_database_name=\"demos\"\n)\nrds_dS = api.add_rds_data_source(\"rds\", cluster, secret, \"demos\")\n\n# Set up a resolver for an RDS query.\nrds_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemosRds\",\n    request_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"SELECT * FROM demos\"\n            ]\n          }\n          \"\"\"),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n            $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n          \"\"\")\n)\n\n# Set up a resolver for an RDS mutation.\nrds_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemoRds\",\n    request_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"INSERT INTO demos VALUES (:id, :version)\",\n              \"SELECT * WHERE id = :id\"\n            ],\n            \"variableMap\": {\n              \":id\": $util.toJson($util.autoId()),\n              \":version\": $util.toJson($ctx.args.version)\n            }\n          }\n          \"\"\"),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n            $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n          \"\"\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Build a data source for AppSync to access the database.\nGraphqlApi api;\n// Create username and password secret for DB Cluster\nDatabaseSecret secret = new DatabaseSecret(this, \"AuroraSecret\", new DatabaseSecretProps {\n    Username = \"clusteradmin\"\n});\n\n// The VPC to place the cluster in\nVpc vpc = new Vpc(this, \"AuroraVpc\");\n\n// Create the serverless cluster, provide all values needed to customise the database.\nServerlessCluster cluster = new ServerlessCluster(this, \"AuroraCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,\n    Credentials = new Dictionary<string, string> { { \"username\", \"clusteradmin\" } },\n    ClusterIdentifier = \"db-endpoint-test\",\n    DefaultDatabaseName = \"demos\"\n});\nRdsDataSource rdsDS = api.AddRdsDataSource(\"rds\", cluster, secret, \"demos\");\n\n// Set up a resolver for an RDS query.\nrdsDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemosRds\",\n    RequestMappingTemplate = MappingTemplate.FromString(@\"\n      {\n        \"\"version\"\": \"\"2018-05-29\"\",\n        \"\"statements\"\": [\n          \"\"SELECT * FROM demos\"\"\n        ]\n      }\n      \"),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"\n        $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n      \")\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemoRds\",\n    RequestMappingTemplate = MappingTemplate.FromString(@\"\n      {\n        \"\"version\"\": \"\"2018-05-29\"\",\n        \"\"statements\"\": [\n          \"\"INSERT INTO demos VALUES (:id, :version)\"\",\n          \"\"SELECT * WHERE id = :id\"\"\n        ],\n        \"\"variableMap\"\": {\n          \"\":id\"\": $util.toJson($util.autoId()),\n          \"\":version\"\": $util.toJson($ctx.args.version)\n        }\n      }\n      \"),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"\n        $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n      \")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Build a data source for AppSync to access the database.\nGraphqlApi api;\n// Create username and password secret for DB Cluster\nDatabaseSecret secret = DatabaseSecret.Builder.create(this, \"AuroraSecret\")\n        .username(\"clusteradmin\")\n        .build();\n\n// The VPC to place the cluster in\nVpc vpc = new Vpc(this, \"AuroraVpc\");\n\n// Create the serverless cluster, provide all values needed to customise the database.\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AuroraCluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc)\n        .credentials(Map.of(\"username\", \"clusteradmin\"))\n        .clusterIdentifier(\"db-endpoint-test\")\n        .defaultDatabaseName(\"demos\")\n        .build();\nRdsDataSource rdsDS = api.addRdsDataSource(\"rds\", cluster, secret, \"demos\");\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemosRds\")\n        .requestMappingTemplate(MappingTemplate.fromString(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"SELECT * FROM demos\\\"\\n    ]\\n  }\\n  \"))\n        .responseMappingTemplate(MappingTemplate.fromString(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\\n  \"))\n        .build());\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemoRds\")\n        .requestMappingTemplate(MappingTemplate.fromString(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"INSERT INTO demos VALUES (:id, :version)\\\",\\n      \\\"SELECT * WHERE id = :id\\\"\\n    ],\\n    \\\"variableMap\\\": {\\n      \\\":id\\\": $util.toJson($util.autoId()),\\n      \\\":version\\\": $util.toJson($ctx.args.version)\\n    }\\n  }\\n  \"))\n        .responseMappingTemplate(MappingTemplate.fromString(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\\n  \"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Build a data source for AppSync to access the database.\nvar api graphqlApi\n// Create username and password secret for DB Cluster\nsecret := rds.NewDatabaseSecret(this, jsii.String(\"AuroraSecret\"), &databaseSecretProps{\n\tusername: jsii.String(\"clusteradmin\"),\n})\n\n// The VPC to place the cluster in\nvpc := ec2.NewVpc(this, jsii.String(\"AuroraVpc\"))\n\n// Create the serverless cluster, provide all values needed to customise the database.\ncluster := rds.NewServerlessCluster(this, jsii.String(\"AuroraCluster\"), &serverlessClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA_MYSQL(),\n\tvpc: vpc,\n\tcredentials: map[string]*string{\n\t\t\"username\": jsii.String(\"clusteradmin\"),\n\t},\n\tclusterIdentifier: jsii.String(\"db-endpoint-test\"),\n\tdefaultDatabaseName: jsii.String(\"demos\"),\n})\nrdsDS := api.addRdsDataSource(jsii.String(\"rds\"), cluster, secret, jsii.String(\"demos\"))\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemosRds\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromString(jsii.String(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"SELECT * FROM demos\\\"\\n    ]\\n  }\\n  \")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\\n  \")),\n})\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemoRds\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"INSERT INTO demos VALUES (:id, :version)\\\",\\n      \\\"SELECT * WHERE id = :id\\\"\\n    ],\\n    \\\"variableMap\\\": {\\n      \\\":id\\\": $util.toJson($util.autoId()),\\n      \\\":version\\\": $util.toJson($ctx.args.version)\\n    }\\n  }\\n  \")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\\n  \")),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 99
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addRdsDataSource",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#fromString",
        "@aws-cdk/aws-appsync-alpha.RdsDataSource",
        "aws-cdk-lib.aws_ec2.IVpc",
        "aws-cdk-lib.aws_ec2.Vpc",
        "aws-cdk-lib.aws_rds.Credentials",
        "aws-cdk-lib.aws_rds.DatabaseClusterEngine",
        "aws-cdk-lib.aws_rds.DatabaseClusterEngine#AURORA_MYSQL",
        "aws-cdk-lib.aws_rds.DatabaseSecret",
        "aws-cdk-lib.aws_rds.DatabaseSecretProps",
        "aws-cdk-lib.aws_rds.IClusterEngine",
        "aws-cdk-lib.aws_rds.IServerlessCluster",
        "aws-cdk-lib.aws_rds.ServerlessCluster",
        "aws-cdk-lib.aws_rds.ServerlessClusterProps",
        "aws-cdk-lib.aws_secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "14": 4,
        "75": 51,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 16,
        "196": 7,
        "197": 3,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 14,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "89466e1bb62772a15b619a7e5a81b4ec9020998d9f2875f824877b836b2bb906"
    },
    "881e8c64b9695387087a0f2704007fbdfc0feca604c493087962d31fdd1de152": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"api\",\n    name=\"api\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\"))\n)\n\nhttp_ds = api.add_http_data_source(\"ds\", \"https://states.amazonaws.com\",\n    name=\"httpDsWithStepF\",\n    description=\"from appsync to StepFunctions Workflow\",\n    authorization_config=appsync.AwsIamConfig(\n        signing_region=\"us-east-1\",\n        signing_service_name=\"states\"\n    )\n)\n\nhttp_ds.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"callStepFunction\",\n    request_mapping_template=appsync.MappingTemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.MappingTemplate.from_file(\"response.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"api\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\"))\n});\n\nHttpDataSource httpDs = api.AddHttpDataSource(\"ds\", \"https://states.amazonaws.com\", new HttpDataSourceOptions {\n    Name = \"httpDsWithStepF\",\n    Description = \"from appsync to StepFunctions Workflow\",\n    AuthorizationConfig = new AwsIamConfig {\n        SigningRegion = \"us-east-1\",\n        SigningServiceName = \"states\"\n    }\n});\n\nhttpDs.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"callStepFunction\",\n    RequestMappingTemplate = MappingTemplate.FromFile(\"request.vtl\"),\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"response.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"api\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .build();\n\nHttpDataSource httpDs = api.addHttpDataSource(\"ds\", \"https://states.amazonaws.com\", HttpDataSourceOptions.builder()\n        .name(\"httpDsWithStepF\")\n        .description(\"from appsync to StepFunctions Workflow\")\n        .authorizationConfig(AwsIamConfig.builder()\n                .signingRegion(\"us-east-1\")\n                .signingServiceName(\"states\")\n                .build())\n        .build());\n\nhttpDs.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"callStepFunction\")\n        .requestMappingTemplate(MappingTemplate.fromFile(\"request.vtl\"))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"response.vtl\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"api\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n})\n\nhttpDs := api.addHttpDataSource(jsii.String(\"ds\"), jsii.String(\"https://states.amazonaws.com\"), &httpDataSourceOptions{\n\tname: jsii.String(\"httpDsWithStepF\"),\n\tdescription: jsii.String(\"from appsync to StepFunctions Workflow\"),\n\tauthorizationConfig: &awsIamConfig{\n\t\tsigningRegion: jsii.String(\"us-east-1\"),\n\t\tsigningServiceName: jsii.String(\"states\"),\n\t},\n})\n\nhttpDs.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"callStepFunction\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"request.vtl\")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"response.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 210
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AwsIamConfig",
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addHttpDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.HttpDataSource",
        "@aws-cdk/aws-appsync-alpha.HttpDataSourceOptions",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#fromFile",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#fromAsset"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 31,
        "104": 1,
        "193": 4,
        "194": 10,
        "196": 6,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 11
      },
      "fqnsFingerprint": "20efa7a761ac702721b484a19d8244c2182fde058d288c16f10874d98f13a154"
    },
    "2583e0d7555449d695d15377575d984cae1611b461704ec06b752f5eb647dac9": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_opensearchservice as opensearch\n\n# api: appsync.GraphqlApi\n\n\nuser = iam.User(self, \"User\")\ndomain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_2,\n    removal_policy=RemovalPolicy.DESTROY,\n    fine_grained_access_control=opensearch.AdvancedSecurityOptions(master_user_arn=user.user_arn),\n    encryption_at_rest=opensearch.EncryptionAtRestOptions(enabled=True),\n    node_to_node_encryption=True,\n    enforce_https=True\n)\nds = api.add_open_search_data_source(\"ds\", domain)\n\nds.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getTests\",\n    request_mapping_template=appsync.MappingTemplate.from_string(JSON.stringify({\n        \"version\": \"2017-02-28\",\n        \"operation\": \"GET\",\n        \"path\": \"/id/post/_search\",\n        \"params\": {\n            \"headers\": {},\n            \"query_string\": {},\n            \"body\": {\"from\": 0, \"size\": 50}\n        }\n    })),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"[\n            #foreach($entry in $context.result.hits.hits)\n            #if( $velocityCount > 1 ) , #end\n            $utils.toJson($entry.get(\"_source\"))\n            #end\n          ]\"\"\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.OpenSearchService;\n\nGraphqlApi api;\n\n\nUser user = new User(this, \"User\");\nDomain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_2,\n    RemovalPolicy = RemovalPolicy.DESTROY,\n    FineGrainedAccessControl = new AdvancedSecurityOptions { MasterUserArn = user.UserArn },\n    EncryptionAtRest = new EncryptionAtRestOptions { Enabled = true },\n    NodeToNodeEncryption = true,\n    EnforceHttps = true\n});\nOpenSearchDataSource ds = api.AddOpenSearchDataSource(\"ds\", domain);\n\nds.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getTests\",\n    RequestMappingTemplate = MappingTemplate.FromString(JSON.Stringify(new Dictionary<string, object> {\n        { \"version\", \"2017-02-28\" },\n        { \"operation\", \"GET\" },\n        { \"path\", \"/id/post/_search\" },\n        { \"params\", new Struct {\n            Headers = new Struct { },\n            QueryString = new Struct { },\n            Body = new Struct { From = 0, Size = 50 }\n        } }\n    })),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"[\n        #foreach($entry in $context.result.hits.hits)\n        #if( $velocityCount > 1 ) , #end\n        $utils.toJson($entry.get(\"\"_source\"\"))\n        #end\n      ]\")\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.opensearchservice.*;\n\nGraphqlApi api;\n\n\nUser user = new User(this, \"User\");\nDomain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_2)\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .fineGrainedAccessControl(AdvancedSecurityOptions.builder().masterUserArn(user.getUserArn()).build())\n        .encryptionAtRest(EncryptionAtRestOptions.builder().enabled(true).build())\n        .nodeToNodeEncryption(true)\n        .enforceHttps(true)\n        .build();\nOpenSearchDataSource ds = api.addOpenSearchDataSource(\"ds\", domain);\n\nds.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getTests\")\n        .requestMappingTemplate(MappingTemplate.fromString(JSON.stringify(Map.of(\n                \"version\", \"2017-02-28\",\n                \"operation\", \"GET\",\n                \"path\", \"/id/post/_search\",\n                \"params\", Map.of(\n                        \"headers\", Map.of(),\n                        \"queryString\", Map.of(),\n                        \"body\", Map.of(\"from\", 0, \"size\", 50))))))\n        .responseMappingTemplate(MappingTemplate.fromString(\"[\\n    #foreach($entry in $context.result.hits.hits)\\n    #if( $velocityCount > 1 ) , #end\\n    $utils.toJson($entry.get(\\\"_source\\\"))\\n    #end\\n  ]\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import opensearch \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar api graphqlApi\n\n\nuser := iam.NewUser(this, jsii.String(\"User\"))\ndomain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_2(),\n\tremovalPolicy: awscdk.RemovalPolicy_DESTROY,\n\tfineGrainedAccessControl: &advancedSecurityOptions{\n\t\tmasterUserArn: user.userArn,\n\t},\n\tencryptionAtRest: &encryptionAtRestOptions{\n\t\tenabled: jsii.Boolean(true),\n\t},\n\tnodeToNodeEncryption: jsii.Boolean(true),\n\tenforceHttps: jsii.Boolean(true),\n})\nds := api.addOpenSearchDataSource(jsii.String(\"ds\"), domain)\n\nds.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getTests\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromString(jSON.stringify(map[string]interface{}{\n\t\t\"version\": jsii.String(\"2017-02-28\"),\n\t\t\"operation\": jsii.String(\"GET\"),\n\t\t\"path\": jsii.String(\"/id/post/_search\"),\n\t\t\"params\": map[string]map[string]interface{}{\n\t\t\t\"headers\": map[string]interface{}{\n\t\t\t},\n\t\t\t\"queryString\": map[string]interface{}{\n\t\t\t},\n\t\t\t\"body\": map[string]*f64{\n\t\t\t\t\"from\": jsii.Number(0),\n\t\t\t\t\"size\": jsii.Number(50),\n\t\t\t},\n\t\t},\n\t})),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"[\\n    #foreach($entry in $context.result.hits.hits)\\n    #if( $velocityCount > 1 ) , #end\\n    $utils.toJson($entry.get(\\\"_source\\\"))\\n    #end\\n  ]\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as opensearch from 'aws-cdk-lib/aws-opensearchservice';\n\nconst user = new iam.User(this, 'User');\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_2,\n  removalPolicy: RemovalPolicy.DESTROY,\n  fineGrainedAccessControl: { masterUserArn: user.userArn },\n  encryptionAtRest: { enabled: true },\n  nodeToNodeEncryption: true,\n  enforceHttps: true,\n});\n\ndeclare const api: appsync.GraphqlApi;\nconst ds = api.addOpenSearchDataSource('ds', domain);\n\nds.createResolver({\n  typeName: 'Query',\n  fieldName: 'getTests',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(JSON.stringify({\n    version: '2017-02-28',\n    operation: 'GET',\n    path: '/id/post/_search',\n    params: {\n      headers: {},\n      queryString: {},\n      body: { from: 0, size: 50 },\n    },\n  })),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`[\n    #foreach($entry in $context.result.hits.hits)\n    #if( $velocityCount > 1 ) , #end\n    $utils.toJson($entry.get(\"_source\"))\n    #end\n  ]`),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 244
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addOpenSearchDataSource",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#fromString",
        "@aws-cdk/aws-appsync-alpha.OpenSearchDataSource",
        "aws-cdk-lib.RemovalPolicy",
        "aws-cdk-lib.RemovalPolicy#DESTROY",
        "aws-cdk-lib.aws_iam.User",
        "aws-cdk-lib.aws_iam.User#userArn",
        "aws-cdk-lib.aws_opensearchservice.AdvancedSecurityOptions",
        "aws-cdk-lib.aws_opensearchservice.Domain",
        "aws-cdk-lib.aws_opensearchservice.DomainProps",
        "aws-cdk-lib.aws_opensearchservice.EncryptionAtRestOptions",
        "aws-cdk-lib.aws_opensearchservice.EngineVersion",
        "aws-cdk-lib.aws_opensearchservice.EngineVersion#OPENSEARCH_1_2",
        "aws-cdk-lib.aws_opensearchservice.IDomain"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as opensearch from 'aws-cdk-lib/aws-opensearchservice';\n\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst user = new iam.User(this, 'User');\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_2,\n  removalPolicy: RemovalPolicy.DESTROY,\n  fineGrainedAccessControl: { masterUserArn: user.userArn },\n  encryptionAtRest: { enabled: true },\n  nodeToNodeEncryption: true,\n  enforceHttps: true,\n});\nconst ds = api.addOpenSearchDataSource('ds', domain);\n\nds.createResolver({\n  typeName: 'Query',\n  fieldName: 'getTests',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(JSON.stringify({\n    version: '2017-02-28',\n    operation: 'GET',\n    path: '/id/post/_search',\n    params: {\n      headers: {},\n      queryString: {},\n      body: { from: 0, size: 50 },\n    },\n  })),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`[\n    #foreach($entry in $context.result.hits.hits)\n    #if( $velocityCount > 1 ) , #end\n    $utils.toJson($entry.get(\"_source\"))\n    #end\n  ]`),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "14": 1,
        "75": 52,
        "104": 2,
        "106": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 9,
        "194": 13,
        "196": 5,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "845dc32cdfebc5c08cc3738025aa4242bc83cc8b4570ae6cae71511396125056"
    },
    "557a069b0594e9b77e5820ce6eaa973c7f11eade8821fb1fc829bfcd0f71d904": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_certificatemanager as acm\nimport aws_cdk.aws_route53 as route53\n\n# hosted zone and route53 features\n# hosted_zone_id: str\nzone_name = \"example.com\"\n\n\nmy_domain_name = \"api.example.com\"\ncertificate = acm.Certificate(self, \"cert\", domain_name=my_domain_name)\napi = appsync.GraphqlApi(self, \"api\",\n    name=\"myApi\",\n    domain_name=appsync.DomainOptions(\n        certificate=certificate,\n        domain_name=my_domain_name\n    )\n)\n\n# hosted zone for adding appsync domain\nzone = route53.HostedZone.from_hosted_zone_attributes(self, \"HostedZone\",\n    hosted_zone_id=hosted_zone_id,\n    zone_name=zone_name\n)\n\n# create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nroute53.CnameRecord(self, \"CnameApiRecord\",\n    record_name=\"api\",\n    zone=zone,\n    domain_name=my_domain_name\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.Route53;\n\n// hosted zone and route53 features\nstring hostedZoneId;\nstring zoneName = \"example.com\";\n\n\nstring myDomainName = \"api.example.com\";\nCertificate certificate = new Certificate(this, \"cert\", new CertificateProps { DomainName = myDomainName });\nGraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"myApi\",\n    DomainName = new DomainOptions {\n        Certificate = certificate,\n        DomainName = myDomainName\n    }\n});\n\n// hosted zone for adding appsync domain\nIHostedZone zone = HostedZone.FromHostedZoneAttributes(this, \"HostedZone\", new HostedZoneAttributes {\n    HostedZoneId = hostedZoneId,\n    ZoneName = zoneName\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew CnameRecord(this, \"CnameApiRecord\", new CnameRecordProps {\n    RecordName = \"api\",\n    Zone = zone,\n    DomainName = myDomainName\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.route53.*;\n\n// hosted zone and route53 features\nString hostedZoneId;\nString zoneName = \"example.com\";\n\n\nString myDomainName = \"api.example.com\";\nCertificate certificate = Certificate.Builder.create(this, \"cert\").domainName(myDomainName).build();\nGraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"myApi\")\n        .domainName(DomainOptions.builder()\n                .certificate(certificate)\n                .domainName(myDomainName)\n                .build())\n        .build();\n\n// hosted zone for adding appsync domain\nIHostedZone zone = HostedZone.fromHostedZoneAttributes(this, \"HostedZone\", HostedZoneAttributes.builder()\n        .hostedZoneId(hostedZoneId)\n        .zoneName(zoneName)\n        .build());\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nCnameRecord.Builder.create(this, \"CnameApiRecord\")\n        .recordName(\"api\")\n        .zone(zone)\n        .domainName(myDomainName)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import acm \"github.com/aws/aws-cdk-go/awscdk\"\nimport route53 \"github.com/aws/aws-cdk-go/awscdk\"\n\n// hosted zone and route53 features\nvar hostedZoneId string\nzoneName := \"example.com\"\n\n\nmyDomainName := \"api.example.com\"\ncertificate := acm.NewCertificate(this, jsii.String(\"cert\"), &certificateProps{\n\tdomainName: myDomainName,\n})\napi := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"myApi\"),\n\tdomainName: &domainOptions{\n\t\tcertificate: certificate,\n\t\tdomainName: myDomainName,\n\t},\n})\n\n// hosted zone for adding appsync domain\nzone := route53.hostedZone.fromHostedZoneAttributes(this, jsii.String(\"HostedZone\"), &hostedZoneAttributes{\n\thostedZoneId: jsii.String(hostedZoneId),\n\tzoneName: jsii.String(zoneName),\n})\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nroute53.NewCnameRecord(this, jsii.String(\"CnameApiRecord\"), &cnameRecordProps{\n\trecordName: jsii.String(\"api\"),\n\tzone: zone,\n\tdomainName: myDomainName,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as acm from 'aws-cdk-lib/aws-certificatemanager';\nimport * as route53 from 'aws-cdk-lib/aws-route53';\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: myDomainName,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 287
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.DomainOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "aws-cdk-lib.aws_certificatemanager.Certificate",
        "aws-cdk-lib.aws_certificatemanager.CertificateProps",
        "aws-cdk-lib.aws_certificatemanager.ICertificate",
        "aws-cdk-lib.aws_route53.CnameRecord",
        "aws-cdk-lib.aws_route53.CnameRecordProps",
        "aws-cdk-lib.aws_route53.HostedZone",
        "aws-cdk-lib.aws_route53.HostedZone#fromHostedZoneAttributes",
        "aws-cdk-lib.aws_route53.HostedZoneAttributes",
        "aws-cdk-lib.aws_route53.IHostedZone"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as acm from 'aws-cdk-lib/aws-certificatemanager';\nimport * as route53 from 'aws-cdk-lib/aws-route53';\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: myDomainName,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "14": 2,
        "75": 30,
        "104": 4,
        "130": 2,
        "143": 1,
        "193": 5,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "282": 4,
        "290": 1
      },
      "fqnsFingerprint": "c98c2b93c686ac1e13c061fabe1598cff6940f33f35aeef3abbd55909d087827"
    },
    "551ef4bfcd1988b75c14d68137ab4aa7b46fb340a048d5bc32bef1e682855fca": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"api\", name=\"myApi\")",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps { Name = \"myApi\" });",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"api\").name(\"myApi\").build();",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"myApi\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'api', { name: 'myApi' });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 330
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'api', { name: 'myApi' });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "0ee8301cb6d23e068db7d8f573cdeeb0c46562a66d2443644381a25c9e784a12"
    },
    "a926e817dbc456be184736688819a33d3e6a48b891ce2bd3b85a122f4cff5669": {
      "translations": {
        "python": {
          "source": "schema = appsync.Schema()\nschema.add_type(appsync.ObjectType(\"demo\",\n    definition={\"id\": appsync.GraphqlType.id()}\n))\napi = appsync.GraphqlApi(self, \"api\",\n    name=\"myApi\",\n    schema=schema\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Schema schema = new Schema();\nschema.AddType(new ObjectType(\"demo\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> { { \"id\", GraphqlType.Id() } }\n}));\nGraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"myApi\",\n    Schema = schema\n});",
          "version": "1"
        },
        "java": {
          "source": "Schema schema = new Schema();\nschema.addType(ObjectType.Builder.create(\"demo\")\n        .definition(Map.of(\"id\", GraphqlType.id()))\n        .build());\nGraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"myApi\")\n        .schema(schema)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "schema := appsync.NewSchema()\nschema.addType(appsync.NewObjectType(jsii.String(\"demo\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.id(),\n\t},\n}))\napi := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"myApi\"),\n\tschema: schema,\n})",
          "version": "1"
        },
        "$": {
          "source": "const schema = new appsync.Schema();\nschema.addType(new appsync.ObjectType('demo', {\n  definition: { id: appsync.GraphqlType.id() },\n}));\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  schema,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 340
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#id",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.IIntermediateType",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#addType"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst schema = new appsync.Schema();\nschema.addType(new appsync.ObjectType('demo', {\n  definition: { id: appsync.GraphqlType.id() },\n}));\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  schema,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "193": 3,
        "194": 6,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 1
      },
      "fqnsFingerprint": "1320dbdd596ce3ce18d095bf23954941dae499eec5144c72390c901d89d9d5d8"
    },
    "25daa527d605f147808ffe90e8ce0a88df3d2478a8d1e6fe92051c9727ff9a4c": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"api\",\n    name=\"myApi\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphl\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"myApi\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphl\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"myApi\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphl\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"myApi\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphl\"))),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphl')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 358
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#fromAsset"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphl')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "17118e624e59de43148bdba769e479d38571ad15bd8759e868ed753caa80b03a"
    },
    "85b9eaeacf0506794e23c7f5e521ad556736c9837de0fcc50a2b5a9cf73f5ccf": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# table: dynamodb.Table\n\nimported_api = appsync.GraphqlApi.from_graphql_api_attributes(self, \"IApi\",\n    graphql_api_id=api.api_id,\n    graphql_api_arn=api.arn\n)\nimported_api.add_dynamo_db_data_source(\"TableDataSource\", table)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nTable table;\n\nIGraphqlApi importedApi = GraphqlApi.FromGraphqlApiAttributes(this, \"IApi\", new GraphqlApiAttributes {\n    GraphqlApiId = api.ApiId,\n    GraphqlApiArn = api.Arn\n});\nimportedApi.AddDynamoDbDataSource(\"TableDataSource\", table);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nTable table;\n\nIGraphqlApi importedApi = GraphqlApi.fromGraphqlApiAttributes(this, \"IApi\", GraphqlApiAttributes.builder()\n        .graphqlApiId(api.getApiId())\n        .graphqlApiArn(api.getArn())\n        .build());\nimportedApi.addDynamoDbDataSource(\"TableDataSource\", table);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar table table\n\nimportedApi := appsync.graphqlApi.fromGraphqlApiAttributes(this, jsii.String(\"IApi\"), &graphqlApiAttributes{\n\tgraphqlApiId: api.apiId,\n\tgraphqlApiArn: api.arn,\n})\nimportedApi.addDynamoDbDataSource(jsii.String(\"TableDataSource\"), table)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const table: dynamodb.Table;\nconst importedApi = appsync.GraphqlApi.fromGraphqlApiAttributes(this, 'IApi', {\n  graphqlApiId: api.apiId,\n  graphqlApiArn: api.arn,\n});\nimportedApi.addDynamoDbDataSource('TableDataSource', table);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 371
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#apiId",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#arn",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#fromGraphqlApiAttributes",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiAttributes",
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi#addDynamoDbDataSource",
        "aws-cdk-lib.aws_dynamodb.ITable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const table: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst importedApi = appsync.GraphqlApi.fromGraphqlApiAttributes(this, 'IApi', {\n  graphqlApiId: api.apiId,\n  graphqlApiArn: api.arn,\n});\nimportedApi.addDynamoDbDataSource('TableDataSource', table);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 19,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 5,
        "196": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7a0ed453d1044d1f225abcf91996232620ba02681e3065e6447fdb47dcfc2792"
    },
    "90786dd8d44eb41d0accde7f04a6d5258d93d034769985b063efbb53ac8d54a7": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n# auth_function: lambda.Function\n\n\nappsync.GraphqlApi(self, \"api\",\n    name=\"api\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"appsync.test.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.LAMBDA,\n            lambda_authorizer_config=appsync.LambdaAuthorizerConfig(\n                handler=auth_function\n            )\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\nFunction authFunction;\n\n\nnew GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"api\",\n    Schema = Schema.FromAsset(Join(__dirname, \"appsync.test.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.LAMBDA,\n            LambdaAuthorizerConfig = new LambdaAuthorizerConfig {\n                Handler = authFunction\n            }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\nFunction authFunction;\n\n\nGraphqlApi.Builder.create(this, \"api\")\n        .name(\"api\")\n        .schema(Schema.fromAsset(join(__dirname, \"appsync.test.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.LAMBDA)\n                        .lambdaAuthorizerConfig(LambdaAuthorizerConfig.builder()\n                                .handler(authFunction)\n                                .build())\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import lambda \"github.com/aws/aws-cdk-go/awscdk\"\nvar authFunction function\n\n\nappsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"api\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"appsync.test.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_LAMBDA,\n\t\t\tlambdaAuthorizerConfig: &lambdaAuthorizerConfig{\n\t\t\t\thandler: authFunction,\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from 'aws-cdk-lib/aws-lambda';\ndeclare const authFunction: lambda.Function;\n\nnew appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'appsync.test.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.LAMBDA,\n      lambdaAuthorizerConfig: {\n        handler: authFunction,\n        // can also specify `resultsCacheTtl` and `validationRegex`.\n      },\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 401
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AuthorizationConfig",
        "@aws-cdk/aws-appsync-alpha.AuthorizationMode",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType#LAMBDA",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.LambdaAuthorizerConfig",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#fromAsset",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\ndeclare const authFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'appsync.test.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.LAMBDA,\n      lambdaAuthorizerConfig: {\n        handler: authFunction,\n        // can also specify `resultsCacheTtl` and `validationRegex`.\n      },\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 23,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "530c10be082c24780bf07b062be73ef74a0887c721ee7f7a3b89125302ddb506"
    },
    "f50819cb9412667c026d999e7787d6a91537f40faf363880e379ebd0a3fe12cb": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\")\n)\n\napi.grant(role, appsync.IamResource.custom(\"types/Mutation/fields/updateExample\"), \"appsync:GraphQL\")",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\")\n});\n\napi.Grant(role, IamResource.Custom(\"types/Mutation/fields/updateExample\"), \"appsync:GraphQL\");",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .build();\n\napi.grant(role, IamResource.custom(\"types/Mutation/fields/updateExample\"), \"appsync:GraphQL\");",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nrole := iam.NewRole(this, jsii.String(\"Role\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"lambda.amazonaws.com\")),\n})\n\napi.grant(role, appsync.iamResource.custom(jsii.String(\"types/Mutation/fields/updateExample\")), jsii.String(\"appsync:GraphQL\"))",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\ndeclare const api: appsync.GraphqlApi;\n\napi.grant(role, appsync.IamResource.custom('types/Mutation/fields/updateExample'), 'appsync:GraphQL');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 463
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#grant",
        "@aws-cdk/aws-appsync-alpha.IamResource",
        "@aws-cdk/aws-appsync-alpha.IamResource#custom",
        "aws-cdk-lib.aws_iam.IGrantable",
        "aws-cdk-lib.aws_iam.IPrincipal",
        "aws-cdk-lib.aws_iam.Role",
        "aws-cdk-lib.aws_iam.RoleProps",
        "aws-cdk-lib.aws_iam.ServicePrincipal"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\napi.grant(role, appsync.IamResource.custom('types/Mutation/fields/updateExample'), 'appsync:GraphQL');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "2796ed2ca1fe2fd1a420bcf446735c3ce78415e95fefff566e91fed9cd8ddbbc"
    },
    "daf7ce0a5a1df10a5eb40cecbb19ba1b34bef7ea86d0cc8e17d880900a7a4372": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# role: iam.Role\n\n\n# For generic types\napi.grant_mutation(role, \"updateExample\")\n\n# For custom types and granular design\napi.grant(role, appsync.IamResource.of_type(\"Mutation\", \"updateExample\"), \"appsync:GraphQL\")",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nRole role;\n\n\n// For generic types\napi.GrantMutation(role, \"updateExample\");\n\n// For custom types and granular design\napi.Grant(role, IamResource.OfType(\"Mutation\", \"updateExample\"), \"appsync:GraphQL\");",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nRole role;\n\n\n// For generic types\napi.grantMutation(role, \"updateExample\");\n\n// For custom types and granular design\napi.grant(role, IamResource.ofType(\"Mutation\", \"updateExample\"), \"appsync:GraphQL\");",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar role role\n\n\n// For generic types\napi.grantMutation(role, jsii.String(\"updateExample\"))\n\n// For custom types and granular design\napi.grant(role, appsync.iamResource.ofType(jsii.String(\"Mutation\"), jsii.String(\"updateExample\")), jsii.String(\"appsync:GraphQL\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const role: iam.Role;\n\n// For generic types\napi.grantMutation(role, 'updateExample');\n\n// For custom types and granular design\napi.grant(role, appsync.IamResource.ofType('Mutation', 'updateExample'), 'appsync:GraphQL');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 492
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#grant",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#grantMutation",
        "@aws-cdk/aws-appsync-alpha.IamResource",
        "@aws-cdk/aws-appsync-alpha.IamResource#ofType",
        "aws-cdk-lib.aws_iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// For generic types\napi.grantMutation(role, 'updateExample');\n\n// For custom types and granular design\napi.grant(role, appsync.IamResource.ofType('Mutation', 'updateExample'), 'appsync:GraphQL');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 4,
        "196": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "2b66a5d52ca4e854751df75e2667ba1d65579e69ad6104ed7e0a4d98c35a6610"
    },
    "256ad3d8b49ce82f5615f7d08b03b767e5cf8dcd0f168df02227bebf2e71cacf": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\n\nappsync_function = appsync.AppsyncFunction(self, \"function\",\n    name=\"appsync_function\",\n    api=api,\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=appsync.MappingTemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.MappingTemplate.from_file(\"response.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\n\nAppsyncFunction appsyncFunction = new AppsyncFunction(this, \"function\", new AppsyncFunctionProps {\n    Name = \"appsync_function\",\n    Api = api,\n    DataSource = api.AddNoneDataSource(\"none\"),\n    RequestMappingTemplate = MappingTemplate.FromFile(\"request.vtl\"),\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"response.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\n\nAppsyncFunction appsyncFunction = AppsyncFunction.Builder.create(this, \"function\")\n        .name(\"appsync_function\")\n        .api(api)\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .requestMappingTemplate(MappingTemplate.fromFile(\"request.vtl\"))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"response.vtl\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\n\nappsyncFunction := appsync.NewAppsyncFunction(this, jsii.String(\"function\"), &appsyncFunctionProps{\n\tname: jsii.String(\"appsync_function\"),\n\tapi: api,\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"request.vtl\")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"response.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 509
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
        "@aws-cdk/aws-appsync-alpha.AppsyncFunctionProps",
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#fromFile"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2bc3ec14da9fbe2aba78ac8b8e1773fb398df2a08d64cca66965378fc3db3b05"
    },
    "55a3645a4d36637e6e22f45cc15d01effb27af9453fed74a6a343522c762646d": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# appsync_function: appsync.AppsyncFunction\n\n\npipeline_resolver = appsync.Resolver(self, \"pipeline\",\n    api=api,\n    data_source=api.add_none_data_source(\"none\"),\n    type_name=\"typeName\",\n    field_name=\"fieldName\",\n    request_mapping_template=appsync.MappingTemplate.from_file(\"beforeRequest.vtl\"),\n    pipeline_config=[appsync_function],\n    response_mapping_template=appsync.MappingTemplate.from_file(\"afterResponse.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nAppsyncFunction appsyncFunction;\n\n\nResolver pipelineResolver = new Resolver(this, \"pipeline\", new ResolverProps {\n    Api = api,\n    DataSource = api.AddNoneDataSource(\"none\"),\n    TypeName = \"typeName\",\n    FieldName = \"fieldName\",\n    RequestMappingTemplate = MappingTemplate.FromFile(\"beforeRequest.vtl\"),\n    PipelineConfig = new [] { appsyncFunction },\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"afterResponse.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nAppsyncFunction appsyncFunction;\n\n\nResolver pipelineResolver = Resolver.Builder.create(this, \"pipeline\")\n        .api(api)\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .typeName(\"typeName\")\n        .fieldName(\"fieldName\")\n        .requestMappingTemplate(MappingTemplate.fromFile(\"beforeRequest.vtl\"))\n        .pipelineConfig(List.of(appsyncFunction))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"afterResponse.vtl\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar appsyncFunction appsyncFunction\n\n\npipelineResolver := appsync.NewResolver(this, jsii.String(\"pipeline\"), &resolverProps{\n\tapi: api,\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\ttypeName: jsii.String(\"typeName\"),\n\tfieldName: jsii.String(\"fieldName\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"beforeRequest.vtl\")),\n\tpipelineConfig: []iAppsyncFunction{\n\t\tappsyncFunction,\n\t},\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"afterResponse.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 524
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#fromFile",
        "@aws-cdk/aws-appsync-alpha.Resolver",
        "@aws-cdk/aws-appsync-alpha.ResolverProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "63229bbef60d66ac9693bc909265b8d27422346016a72ea385680a5ee629a344"
    },
    "014c78f33dc6d896b312b360f3f316488b13f3aa44926504113134e102cd3e95": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_appsync_alpha as appsync\npluralize = require(\"pluralize\")\n\nargs = {\n    \"after\": appsync.GraphqlType.string(),\n    \"first\": appsync.GraphqlType.int(),\n    \"before\": appsync.GraphqlType.string(),\n    \"last\": appsync.GraphqlType.int()\n}\n\nNode = appsync.InterfaceType(\"Node\",\n    definition={\"id\": appsync.GraphqlType.string()}\n)\nFilmNode = appsync.ObjectType(\"FilmNode\",\n    interface_types=[Node],\n    definition={\"film_name\": appsync.GraphqlType.string()}\n)\n\ndef generate_edge_and_connection(base):\n    edge = appsync.ObjectType(f\"{base.name}Edge\",\n        definition={\"node\": base.attribute(), \"cursor\": appsync.GraphqlType.string()}\n    )\n    connection = appsync.ObjectType(f\"{base.name}Connection\",\n        definition={\n            \"edges\": edge.attribute(is_list=True),\n            \"pluralize(base.name)\": base.attribute(is_list=True),\n            \"total_count\": appsync.GraphqlType.int()\n        }\n    )\n    return {\"edge\": edge, \"connection\": connection}",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AppSync.Alpha;\nvar pluralize = Require(\"pluralize\");\n\nIDictionary<string, GraphqlType> args = new Dictionary<string, GraphqlType> {\n    { \"after\", GraphqlType.String() },\n    { \"first\", GraphqlType.Int() },\n    { \"before\", GraphqlType.String() },\n    { \"last\", GraphqlType.Int() }\n};\n\nInterfaceType Node = new InterfaceType(\"Node\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> { { \"id\", GraphqlType.String() } }\n});\nObjectType FilmNode = new ObjectType(\"FilmNode\", new ObjectTypeOptions {\n    InterfaceTypes = new [] { Node },\n    Definition = new Dictionary<string, IField> { { \"filmName\", GraphqlType.String() } }\n});\n\npublic IDictionary<string, ObjectType> GenerateEdgeAndConnection(ObjectType base)\n{\n    ObjectType edge = new ObjectType($\"{base.name}Edge\", new ObjectTypeOptions {\n        Definition = new Dictionary<string, IField> { { \"node\", base.Attribute() }, { \"cursor\", GraphqlType.String() } }\n    });\n    ObjectType connection = new ObjectType($\"{base.name}Connection\", new ObjectTypeOptions {\n        Definition = new Dictionary<string, IField> {\n            { \"edges\", edge.Attribute(new BaseTypeOptions { IsList = true }) },\n            { Pluralize(base.Name), base.Attribute(new BaseTypeOptions { IsList = true }) },\n            { \"totalCount\", GraphqlType.Int() }\n        }\n    });\n    return new Struct { Edge = edge, Connection = connection };\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.appsync.alpha.*;\nObject pluralize = require(\"pluralize\");\n\nMap<String, GraphqlType> args = Map.of(\n        \"after\", GraphqlType.string(),\n        \"first\", GraphqlType.int(),\n        \"before\", GraphqlType.string(),\n        \"last\", GraphqlType.int());\n\nInterfaceType Node = InterfaceType.Builder.create(\"Node\")\n        .definition(Map.of(\"id\", GraphqlType.string()))\n        .build();\nObjectType FilmNode = ObjectType.Builder.create(\"FilmNode\")\n        .interfaceTypes(List.of(Node))\n        .definition(Map.of(\"filmName\", GraphqlType.string()))\n        .build();\n\npublic Map<String, ObjectType> generateEdgeAndConnection(ObjectType base) {\n    ObjectType edge = ObjectType.Builder.create(String.format(\"%sEdge\", base.getName()))\n            .definition(Map.of(\"node\", base.attribute(), \"cursor\", GraphqlType.string()))\n            .build();\n    ObjectType connection = ObjectType.Builder.create(String.format(\"%sConnection\", base.getName()))\n            .definition(Map.of(\n                    \"edges\", edge.attribute(BaseTypeOptions.builder().isList(true).build()),\n                    pluralize(base.getName()), base.attribute(BaseTypeOptions.builder().isList(true).build()),\n                    \"totalCount\", GraphqlType.int()))\n            .build();\n    return Map.of(\"edge\", edge, \"connection\", connection);\n}",
          "version": "1"
        },
        "go": {
          "source": "import appsync \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\npluralize := require(jsii.String(\"pluralize\"))\n\nargs := map[string]graphqlType{\n\t\"after\": appsync.graphqlType.string(),\n\t\"first\": appsync.graphqlType.int(),\n\t\"before\": appsync.graphqlType.string(),\n\t\"last\": appsync.graphqlType.int(),\n}\n\nnode := appsync.NewInterfaceType(jsii.String(\"Node\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.*graphqlType.string(),\n\t},\n})\nfilmNode := appsync.NewObjectType(jsii.String(\"FilmNode\"), &objectTypeOptions{\n\tinterfaceTypes: []interfaceType{\n\t\t*node,\n\t},\n\tdefinition: map[string]*iField{\n\t\t\"filmName\": appsync.*graphqlType.string(),\n\t},\n})\n\nfunc GenerateEdgeAndConnection(base *objectType) map[string]objectType {\n\tedge := appsync.NewObjectType(fmt.Sprintf(\"%vEdge\", *base.name), &objectTypeOptions{\n\t\tdefinition: map[string]*iField{\n\t\t\t\"node\": base.attribute(),\n\t\t\t\"cursor\": appsync.*graphqlType.string(),\n\t\t},\n\t})\n\tconnection := appsync.NewObjectType(fmt.Sprintf(\"%vConnection\", *base.name), &objectTypeOptions{\n\t\tdefinition: map[string]*iField{\n\t\t\t\"edges\": edge.attribute(&BaseTypeOptions{\n\t\t\t\t\"isList\": jsii.Boolean(true),\n\t\t\t}),\n\t\t\tpluralize(base.name): base.attribute(&BaseTypeOptions{\n\t\t\t\t\"isList\": jsii.Boolean(true),\n\t\t\t}),\n\t\t\t\"totalCount\": appsync.*graphqlType.int(),\n\t\t},\n\t})\n\treturn map[string]objectType{\n\t\t\"edge\": edge,\n\t\t\"connection\": connection,\n\t}\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as appsync from '@aws-cdk/aws-appsync-alpha';\nconst pluralize = require('pluralize');\n\nexport const args = {\n  after: appsync.GraphqlType.string(),\n  first: appsync.GraphqlType.int(),\n  before: appsync.GraphqlType.string(),\n  last: appsync.GraphqlType.int(),\n};\n\nexport const Node = new appsync.InterfaceType('Node', {\n  definition: { id: appsync.GraphqlType.string() }\n});\nexport const FilmNode = new appsync.ObjectType('FilmNode', {\n  interfaceTypes: [Node],\n  definition: { filmName: appsync.GraphqlType.string() }\n});\n\nexport function generateEdgeAndConnection(base: appsync.ObjectType) {\n  const edge = new appsync.ObjectType(`${base.name}Edge`, {\n    definition: { node: base.attribute(), cursor: appsync.GraphqlType.string() }\n  });\n  const connection = new appsync.ObjectType(`${base.name}Connection`, {\n    definition: {\n      edges: edge.attribute({ isList: true }),\n      [pluralize(base.name)]: base.attribute({ isList: true }),\n      totalCount: appsync.GraphqlType.int(),\n    }\n  });\n  return { edge: edge, connection: connection };\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 589
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseTypeOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#int",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.InterfaceType",
        "@aws-cdk/aws-appsync-alpha.InterfaceType#attribute",
        "@aws-cdk/aws-appsync-alpha.InterfaceType#name",
        "@aws-cdk/aws-appsync-alpha.IntermediateTypeOptions",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions"
      ],
      "fullSource": "import * as appsync from '@aws-cdk/aws-appsync-alpha';\nconst pluralize = require('pluralize');\n\nexport const args = {\n  after: appsync.GraphqlType.string(),\n  first: appsync.GraphqlType.int(),\n  before: appsync.GraphqlType.string(),\n  last: appsync.GraphqlType.int(),\n};\n\nexport const Node = new appsync.InterfaceType('Node', {\n  definition: { id: appsync.GraphqlType.string() }\n});\nexport const FilmNode = new appsync.ObjectType('FilmNode', {\n  interfaceTypes: [Node],\n  definition: { filmName: appsync.GraphqlType.string() }\n});\n\nexport function generateEdgeAndConnection(base: appsync.ObjectType) {\n  const edge = new appsync.ObjectType(`${base.name}Edge`, {\n    definition: { node: base.attribute(), cursor: appsync.GraphqlType.string() }\n  });\n  const connection = new appsync.ObjectType(`${base.name}Connection`, {\n    definition: {\n      edges: edge.attribute({ isList: true }),\n      [pluralize(base.name)]: base.attribute({ isList: true }),\n      totalCount: appsync.GraphqlType.int(),\n    }\n  });\n  return { edge: edge, connection: connection };\n}",
      "syntaxKindCounter": {
        "10": 4,
        "15": 2,
        "17": 2,
        "75": 79,
        "89": 4,
        "106": 2,
        "153": 1,
        "154": 1,
        "156": 1,
        "169": 1,
        "192": 1,
        "193": 12,
        "194": 26,
        "196": 13,
        "197": 4,
        "211": 2,
        "221": 2,
        "223": 1,
        "225": 6,
        "235": 1,
        "242": 6,
        "243": 6,
        "244": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 20,
        "290": 1
      },
      "fqnsFingerprint": "4eec8dc6d12f8008ffd4660c2c1d1471041fbd773fc3d4df71f05f9b7f238797"
    },
    "b532deb607903ec4e6d21a3726de1627b5a2d008b2207b239bfb655f7644131f": {
      "translations": {
        "python": {
          "source": "# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\n\napi = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\"\n)\n\nobject_types = [Node, FilmNode]\n\nfilm_connections = generate_edge_and_connection(FilmNode)\n\napi.add_query(\"allFilms\", appsync.ResolvableField(\n    return_type=film_connections.connection.attribute(),\n    args=args,\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=dummy_request,\n    response_mapping_template=dummy_response\n))\n\napi.add_type(Node)\napi.add_type(FilmNode)\napi.add_type(film_connections.edge)\napi.add_type(film_connections.connection)",
          "version": "2"
        },
        "csharp": {
          "source": "MappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\n\nGraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\"\n});\n\nInterfaceType[] objectTypes = new [] { Node, FilmNode };\n\nIDictionary<string, ObjectType> filmConnections = GenerateEdgeAndConnection(FilmNode);\n\napi.AddQuery(\"allFilms\", new ResolvableField(new ResolvableFieldOptions {\n    ReturnType = filmConnections.Connection.Attribute(),\n    Args = args,\n    DataSource = api.AddNoneDataSource(\"none\"),\n    RequestMappingTemplate = dummyRequest,\n    ResponseMappingTemplate = dummyResponse\n}));\n\napi.AddType(Node);\napi.AddType(FilmNode);\napi.AddType(filmConnections.Edge);\napi.AddType(filmConnections.Connection);",
          "version": "1"
        },
        "java": {
          "source": "MappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\n\nGraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .build();\n\nInterfaceType[] objectTypes = List.of(Node, FilmNode);\n\nMap<String, ObjectType> filmConnections = generateEdgeAndConnection(FilmNode);\n\napi.addQuery(\"allFilms\", ResolvableField.Builder.create()\n        .returnType(filmConnections.connection.attribute())\n        .args(args)\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .requestMappingTemplate(dummyRequest)\n        .responseMappingTemplate(dummyResponse)\n        .build());\n\napi.addType(Node);\napi.addType(FilmNode);\napi.addType(filmConnections.getEdge());\napi.addType(filmConnections.getConnection());",
          "version": "1"
        },
        "go": {
          "source": "var dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\n\napi := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n})\n\nobjectTypes := []interfaceType{\n\tnode,\n\tfilmNode,\n}\n\nfilmConnections := generateEdgeAndConnection(filmNode)\n\napi.addQuery(jsii.String(\"allFilms\"), appsync.NewResolvableField(&resolvableFieldOptions{\n\treturnType: filmConnections.connection.attribute(),\n\targs: args,\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\trequestMappingTemplate: dummyRequest,\n\tresponseMappingTemplate: dummyResponse,\n}))\n\napi.addType(node)\napi.addType(filmNode)\napi.addType(filmConnections.edge)\napi.addType(filmConnections.connection)",
          "version": "1"
        },
        "$": {
          "source": "declare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\n\nconst objectTypes = [ Node, FilmNode ];\n\nconst filmConnections = generateEdgeAndConnection(FilmNode);\n\napi.addQuery('allFilms', new appsync.ResolvableField({\n  returnType: filmConnections.connection.attribute(),\n  args: args,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));\n\napi.addType(Node);\napi.addType(FilmNode);\napi.addType(filmConnections.edge);\napi.addType(filmConnections.connection);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 626
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addQuery",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addType",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.IIntermediateType",
        "@aws-cdk/aws-appsync-alpha.InterfaceType#attribute",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ResolvableField",
        "@aws-cdk/aws-appsync-alpha.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nconst pluralize = require('pluralize');\n\nconst args = {\n  after: appsync.GraphqlType.string(),\n  first: appsync.GraphqlType.int(),\n  before: appsync.GraphqlType.string(),\n  last: appsync.GraphqlType.int(),\n};\n\nconst Node = new appsync.InterfaceType('Node', {\n  definition: { id: appsync.GraphqlType.string() }\n});\n\nconst FilmNode = new appsync.ObjectType('FilmNode', {\n  interfaceTypes: [Node],\n  definition: { filmName: appsync.GraphqlType.string() }\n});\n\nfunction generateEdgeAndConnection(base: appsync.ObjectType) {\n  const edge = new appsync.ObjectType(`${base.name}Edge`, {\n    definition: { node: base.attribute(), cursor: appsync.GraphqlType.string() }\n  });\n  const connection = new appsync.ObjectType(`${base.name}Connection`, {\n    definition: {\n      edges: edge.attribute({ isList: true }),\n      [pluralize(base.name)]: base.attribute({ isList: true }),\n      totalCount: appsync.GraphqlType.int(),\n    }\n  });\n  return { edge: edge, connection: connection };\n}\n\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\n\nconst objectTypes = [ Node, FilmNode ];\n\nconst filmConnections = generateEdgeAndConnection(FilmNode);\n\napi.addQuery('allFilms', new appsync.ResolvableField({\n  returnType: filmConnections.connection.attribute(),\n  args: args,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));\n\napi.addType(Node);\napi.addType(FilmNode);\napi.addType(filmConnections.edge);\napi.addType(filmConnections.connection);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 47,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 12,
        "196": 8,
        "197": 2,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "d018a7a4ffad217ce40b07673ca680836c5f927633881bc39c1ef880e8c2cccc"
    },
    "069831becce0c9a6d8ea31311a21fe268e8aeae130159b432a87535535bb561c": {
      "translations": {
        "python": {
          "source": "field = appsync.Field(\n    return_type=appsync.GraphqlType.string(),\n    args={\n        \"argument\": appsync.GraphqlType.string()\n    }\n)\ntype = appsync.InterfaceType(\"Node\",\n    definition={\"test\": field}\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Field field = new Field(new FieldOptions {\n    ReturnType = GraphqlType.String(),\n    Args = new Dictionary<string, GraphqlType> {\n        { \"argument\", GraphqlType.String() }\n    }\n});\nInterfaceType type = new InterfaceType(\"Node\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> { { \"test\", field } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Field field = Field.Builder.create()\n        .returnType(GraphqlType.string())\n        .args(Map.of(\n                \"argument\", GraphqlType.string()))\n        .build();\nInterfaceType type = InterfaceType.Builder.create(\"Node\")\n        .definition(Map.of(\"test\", field))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "field := appsync.NewField(&fieldOptions{\n\treturnType: appsync.graphqlType.string(),\n\targs: map[string]*graphqlType{\n\t\t\"argument\": appsync.*graphqlType.string(),\n\t},\n})\ntype := appsync.NewInterfaceType(jsii.String(\"Node\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"test\": field,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const field = new appsync.Field({\n  returnType: appsync.GraphqlType.string(),\n  args: {\n    argument: appsync.GraphqlType.string(),\n  },\n});\nconst type = new appsync.InterfaceType('Node', {\n  definition: { test: field },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 711
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.Field",
        "@aws-cdk/aws-appsync-alpha.FieldOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.InterfaceType",
        "@aws-cdk/aws-appsync-alpha.IntermediateTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst field = new appsync.Field({\n  returnType: appsync.GraphqlType.string(),\n  args: {\n    argument: appsync.GraphqlType.string(),\n  },\n});\nconst type = new appsync.InterfaceType('Node', {\n  definition: { test: field },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 18,
        "193": 4,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "cacc39c302bd5a679f3a56c57c131ee1847f26234fbfd57f25a5e0be8f4b547a"
    },
    "a0a5d130a13293da2e6197134de9fdfebbfdf7edb0ef893bbfc17f59d538661d": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\ninfo = appsync.ObjectType(\"Info\",\n    definition={\n        \"node\": appsync.ResolvableField(\n            return_type=appsync.GraphqlType.string(),\n            args={\n                \"id\": appsync.GraphqlType.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = new ObjectType(\"Info\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"node\", new ResolvableField(new ResolvableFieldOptions {\n            ReturnType = GraphqlType.String(),\n            Args = new Dictionary<string, GraphqlType> {\n                { \"id\", GraphqlType.String() }\n            },\n            DataSource = api.AddNoneDataSource(\"none\"),\n            RequestMappingTemplate = dummyRequest,\n            ResponseMappingTemplate = dummyResponse\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = ObjectType.Builder.create(\"Info\")\n        .definition(Map.of(\n                \"node\", ResolvableField.Builder.create()\n                        .returnType(GraphqlType.string())\n                        .args(Map.of(\n                                \"id\", GraphqlType.string()))\n                        .dataSource(api.addNoneDataSource(\"none\"))\n                        .requestMappingTemplate(dummyRequest)\n                        .responseMappingTemplate(dummyResponse)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\ninfo := appsync.NewObjectType(jsii.String(\"Info\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"node\": appsync.NewResolvableField(&ResolvableFieldOptions{\n\t\t\t\"returnType\": appsync.GraphqlType.string(),\n\t\t\t\"args\": map[string]GraphqlType{\n\t\t\t\t\"id\": appsync.GraphqlType.string(),\n\t\t\t},\n\t\t\t\"dataSource\": api.addNoneDataSource(jsii.String(\"none\")),\n\t\t\t\"requestMappingTemplate\": dummyRequest,\n\t\t\t\"responseMappingTemplate\": dummyResponse,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 739
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions",
        "@aws-cdk/aws-appsync-alpha.ResolvableField",
        "@aws-cdk/aws-appsync-alpha.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "9d0ed6ed08d6634c741d3b9ed64d5beb46adcc25efed35c6a28cf5b4b14e8925"
    },
    "6de8ce3517e76500d713fe95f74bf61848528869d1d122bb8f2a18d3465f9579": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\nquery = appsync.ObjectType(\"Query\",\n    definition={\n        \"get\": appsync.ResolvableField(\n            return_type=appsync.GraphqlType.string(),\n            args={\n                \"argument\": appsync.GraphqlType.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType query = new ObjectType(\"Query\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"get\", new ResolvableField(new ResolvableFieldOptions {\n            ReturnType = GraphqlType.String(),\n            Args = new Dictionary<string, GraphqlType> {\n                { \"argument\", GraphqlType.String() }\n            },\n            DataSource = api.AddNoneDataSource(\"none\"),\n            RequestMappingTemplate = dummyRequest,\n            ResponseMappingTemplate = dummyResponse\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType query = ObjectType.Builder.create(\"Query\")\n        .definition(Map.of(\n                \"get\", ResolvableField.Builder.create()\n                        .returnType(GraphqlType.string())\n                        .args(Map.of(\n                                \"argument\", GraphqlType.string()))\n                        .dataSource(api.addNoneDataSource(\"none\"))\n                        .requestMappingTemplate(dummyRequest)\n                        .responseMappingTemplate(dummyResponse)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\nquery := appsync.NewObjectType(jsii.String(\"Query\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"get\": appsync.NewResolvableField(&ResolvableFieldOptions{\n\t\t\t\"returnType\": appsync.GraphqlType.string(),\n\t\t\t\"args\": map[string]GraphqlType{\n\t\t\t\t\"argument\": appsync.GraphqlType.string(),\n\t\t\t},\n\t\t\t\"dataSource\": api.addNoneDataSource(jsii.String(\"none\")),\n\t\t\t\"requestMappingTemplate\": dummyRequest,\n\t\t\t\"responseMappingTemplate\": dummyResponse,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst query = new appsync.ObjectType('Query', {\n  definition: {\n    get: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        argument: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 770
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions",
        "@aws-cdk/aws-appsync-alpha.ResolvableField",
        "@aws-cdk/aws-appsync-alpha.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst query = new appsync.ObjectType('Query', {\n  definition: {\n    get: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        argument: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "9d0ed6ed08d6634c741d3b9ed64d5beb46adcc25efed35c6a28cf5b4b14e8925"
    },
    "79cab0566c7f68537e13bd4920c7c8c2a56dd6e11980448afe0389c5186c6b3e": {
      "translations": {
        "python": {
          "source": "node = appsync.InterfaceType(\"Node\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True)\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "InterfaceType node = new InterfaceType(\"Node\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "InterfaceType node = InterfaceType.Builder.create(\"Node\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "node := appsync.NewInterfaceType(jsii.String(\"Node\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 813
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseTypeOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.InterfaceType",
        "@aws-cdk/aws-appsync-alpha.IntermediateTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "106": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "88581ec59c62c7e06fa239fce665b4afbe9a08cafd11353e84f9b2e5a09b57ce"
    },
    "940a7f0956f276f1b4c51b3d242b27f9f58c55fe99e366900b2aa436d6142e93": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\"\n)\ndemo = appsync.ObjectType(\"Demo\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True),\n        \"version\": appsync.GraphqlType.string(is_required=True)\n    }\n)\n\napi.add_type(demo)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\"\n});\nObjectType demo = new ObjectType(\"Demo\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) },\n        { \"version\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});\n\napi.AddType(demo);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .build();\nObjectType demo = ObjectType.Builder.create(\"Demo\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build()),\n                \"version\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();\n\napi.addType(demo);",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n})\ndemo := appsync.NewObjectType(jsii.String(\"Demo\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t\t\"version\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})\n\napi.addType(demo)",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 833
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseTypeOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addType",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.IIntermediateType",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 21,
        "104": 1,
        "106": 2,
        "193": 5,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6
      },
      "fqnsFingerprint": "861dcbda087d22e2fe5a7633529559019aa1a1cd83b0861638bb225e2cd3ceba"
    },
    "fd964a611d7f0df4825689eeb3c57a4c32698bc0e1bc0ebcb72d93af0a20a30c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_appsync_alpha as appsync\ndemo = appsync.ObjectType(\"Demo\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True),\n        \"version\": appsync.GraphqlType.string(is_required=True)\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AppSync.Alpha;\nObjectType demo = new ObjectType(\"Demo\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) },\n        { \"version\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.appsync.alpha.*;\nObjectType demo = ObjectType.Builder.create(\"Demo\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build()),\n                \"version\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import appsync \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\ndemo := appsync.NewObjectType(jsii.String(\"Demo\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t\t\"version\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as appsync from '@aws-cdk/aws-appsync-alpha';\nexport const demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 852
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseTypeOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions"
      ],
      "fullSource": "import * as appsync from '@aws-cdk/aws-appsync-alpha';\nexport const demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "89": 1,
        "106": 2,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "04d12fab2d36bfb65d1a6595c3090240856fa606d2544bebb66536bf7ea7c864"
    },
    "04c9e9c3a3efff240c62e6df240e0bf1f1cd506fdb692d0ca60fb301c8cad0ac": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\napi.add_type(demo)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\napi.AddType(demo);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\napi.addType(demo);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\napi.addType(demo)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\napi.addType(demo);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 864
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.IIntermediateType",
        "@aws-cdk/aws-appsync-alpha.ObjectType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nconst pluralize = require('pluralize');\n\nconst args = {\n  after: appsync.GraphqlType.string(),\n  first: appsync.GraphqlType.int(),\n  before: appsync.GraphqlType.string(),\n  last: appsync.GraphqlType.int(),\n};\n\nconst Node = new appsync.InterfaceType('Node', {\n  definition: { id: appsync.GraphqlType.string() }\n});\n\nconst FilmNode = new appsync.ObjectType('FilmNode', {\n  interfaceTypes: [Node],\n  definition: { filmName: appsync.GraphqlType.string() }\n});\n\nfunction generateEdgeAndConnection(base: appsync.ObjectType) {\n  const edge = new appsync.ObjectType(`${base.name}Edge`, {\n    definition: { node: base.attribute(), cursor: appsync.GraphqlType.string() }\n  });\n  const connection = new appsync.ObjectType(`${base.name}Connection`, {\n    definition: {\n      edges: edge.attribute({ isList: true }),\n      [pluralize(base.name)]: base.attribute({ isList: true }),\n      totalCount: appsync.GraphqlType.int(),\n    }\n  });\n  return { edge: edge, connection: connection };\n}\n\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\napi.addType(demo);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "ae01576c2bc9cbaa2cc816ba9c7536a0ae79813250a16ebb4be0533d794102fd"
    },
    "efbd7a3f4860bc84479f764c95eb9aff7eca8bce939eb807f1c9af57be984b80": {
      "translations": {
        "python": {
          "source": "node = appsync.InterfaceType(\"Node\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True)\n    }\n)\ndemo = appsync.ObjectType(\"Demo\",\n    interface_types=[node],\n    definition={\n        \"version\": appsync.GraphqlType.string(is_required=True)\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "InterfaceType node = new InterfaceType(\"Node\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});\nObjectType demo = new ObjectType(\"Demo\", new ObjectTypeOptions {\n    InterfaceTypes = new [] { node },\n    Definition = new Dictionary<string, IField> {\n        { \"version\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "InterfaceType node = InterfaceType.Builder.create(\"Node\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();\nObjectType demo = ObjectType.Builder.create(\"Demo\")\n        .interfaceTypes(List.of(node))\n        .definition(Map.of(\n                \"version\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "node := appsync.NewInterfaceType(jsii.String(\"Node\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})\ndemo := appsync.NewObjectType(jsii.String(\"Demo\"), &objectTypeOptions{\n\tinterfaceTypes: []interfaceType{\n\t\tnode,\n\t},\n\tdefinition: map[string]*iField{\n\t\t\"version\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\nconst demo = new appsync.ObjectType('Demo', {\n  interfaceTypes: [ node ],\n  definition: {\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 871
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseTypeOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.InterfaceType",
        "@aws-cdk/aws-appsync-alpha.IntermediateTypeOptions",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\nconst demo = new appsync.ObjectType('Demo', {\n  interfaceTypes: [ node ],\n  definition: {\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 20,
        "106": 2,
        "192": 1,
        "193": 6,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7
      },
      "fqnsFingerprint": "0889bc502e23c2e4ce2772e7c0487d8444d16f0c5c268bed7890ea5877865cb2"
    },
    "c54ac45fc5552ec111b956ad2f641ddca766d24c99894721da94c677e59e5bfd": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\nepisode = appsync.EnumType(\"Episode\",\n    definition=[\"NEWHOPE\", \"EMPIRE\", \"JEDI\"\n    ]\n)\napi.add_type(episode)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\nEnumType episode = new EnumType(\"Episode\", new EnumTypeOptions {\n    Definition = new [] { \"NEWHOPE\", \"EMPIRE\", \"JEDI\" }\n});\napi.AddType(episode);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\nEnumType episode = EnumType.Builder.create(\"Episode\")\n        .definition(List.of(\"NEWHOPE\", \"EMPIRE\", \"JEDI\"))\n        .build();\napi.addType(episode);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\nepisode := appsync.NewEnumType(jsii.String(\"Episode\"), &enumTypeOptions{\n\tdefinition: []*string{\n\t\tjsii.String(\"NEWHOPE\"),\n\t\tjsii.String(\"EMPIRE\"),\n\t\tjsii.String(\"JEDI\"),\n\t},\n})\napi.addType(episode)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\nconst episode = new appsync.EnumType('Episode', {\n  definition: [\n    'NEWHOPE',\n    'EMPIRE',\n    'JEDI',\n  ],\n});\napi.addType(episode);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 907
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.EnumType",
        "@aws-cdk/aws-appsync-alpha.EnumTypeOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addType",
        "@aws-cdk/aws-appsync-alpha.IIntermediateType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst episode = new appsync.EnumType('Episode', {\n  definition: [\n    'NEWHOPE',\n    'EMPIRE',\n    'JEDI',\n  ],\n});\napi.addType(episode);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "28be361c1b7a24f1c1c370bc932a03bdf401ce6a6cd54f032442455782aac16a"
    },
    "cd64f505e67317eb64d881cd961884f7015f2937851a227bbe18da6b732a7d9c": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\nreview = appsync.InputType(\"Review\",\n    definition={\n        \"stars\": appsync.GraphqlType.int(is_required=True),\n        \"commentary\": appsync.GraphqlType.string()\n    }\n)\napi.add_type(review)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\nInputType review = new InputType(\"Review\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"stars\", GraphqlType.Int(new BaseTypeOptions { IsRequired = true }) },\n        { \"commentary\", GraphqlType.String() }\n    }\n});\napi.AddType(review);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\nInputType review = InputType.Builder.create(\"Review\")\n        .definition(Map.of(\n                \"stars\", GraphqlType.int(BaseTypeOptions.builder().isRequired(true).build()),\n                \"commentary\", GraphqlType.string()))\n        .build();\napi.addType(review);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\nreview := appsync.NewInputType(jsii.String(\"Review\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"stars\": appsync.GraphqlType.int(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t\t\"commentary\": appsync.GraphqlType.string(),\n\t},\n})\napi.addType(review)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\nconst review = new appsync.InputType('Review', {\n  definition: {\n    stars: appsync.GraphqlType.int({ isRequired: true }),\n    commentary: appsync.GraphqlType.string(),\n  },\n});\napi.addType(review);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 935
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseTypeOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#int",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.IIntermediateType",
        "@aws-cdk/aws-appsync-alpha.InputType",
        "@aws-cdk/aws-appsync-alpha.IntermediateTypeOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst review = new appsync.InputType('Review', {\n  definition: {\n    stars: appsync.GraphqlType.int({ isRequired: true }),\n    commentary: appsync.GraphqlType.string(),\n  },\n});\napi.addType(review);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 19,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "94e1aae29de8ef90e84e620d97f60a87c5609cfeae633deada2a37d96fd5eabd"
    },
    "57a062dba0206b5ca236416474c4ab3fc2be84c6c7a0dd8c0b1e3c4c33847324": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\nstring = appsync.GraphqlType.string()\nhuman = appsync.ObjectType(\"Human\", definition={\"name\": string})\ndroid = appsync.ObjectType(\"Droid\", definition={\"name\": string})\nstarship = appsync.ObjectType(\"Starship\", definition={\"name\": string})\nsearch = appsync.UnionType(\"Search\",\n    definition=[human, droid, starship]\n)\napi.add_type(search)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\nGraphqlType string = GraphqlType.String();\nObjectType human = new ObjectType(\"Human\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nObjectType droid = new ObjectType(\"Droid\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nObjectType starship = new ObjectType(\"Starship\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nUnionType search = new UnionType(\"Search\", new UnionTypeOptions {\n    Definition = new [] { human, droid, starship }\n});\napi.AddType(search);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\nGraphqlType string = GraphqlType.string();\nObjectType human = ObjectType.Builder.create(\"Human\").definition(Map.of(\"name\", string)).build();\nObjectType droid = ObjectType.Builder.create(\"Droid\").definition(Map.of(\"name\", string)).build();\nObjectType starship = ObjectType.Builder.create(\"Starship\").definition(Map.of(\"name\", string)).build();\nUnionType search = UnionType.Builder.create(\"Search\")\n        .definition(List.of(human, droid, starship))\n        .build();\napi.addType(search);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\nstring := appsync.graphqlType.string()\nhuman := appsync.NewObjectType(jsii.String(\"Human\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"name\": string,\n\t},\n})\ndroid := appsync.NewObjectType(jsii.String(\"Droid\"), &objectTypeOptions{\n\tdefinition: map[string]*iField{\n\t\t\"name\": string,\n\t},\n})\nstarship := appsync.NewObjectType(jsii.String(\"Starship\"), &objectTypeOptions{\n\tdefinition: map[string]*iField{\n\t\t\"name\": string,\n\t},\n})\nsearch := appsync.NewUnionType(jsii.String(\"Search\"), &unionTypeOptions{\n\tdefinition: []iIntermediateType{\n\t\thuman,\n\t\tdroid,\n\t\tstarship,\n\t},\n})\napi.addType(search)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\nconst string = appsync.GraphqlType.string();\nconst human = new appsync.ObjectType('Human', { definition: { name: string } });\nconst droid = new appsync.ObjectType('Droid', { definition: { name: string } });\nconst starship = new appsync.ObjectType('Starship', { definition: { name: string } }););\nconst search = new appsync.UnionType('Search', {\n  definition: [ human, droid, starship ],\n});\napi.addType(search);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 963
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.IIntermediateType",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions",
        "@aws-cdk/aws-appsync-alpha.UnionType",
        "@aws-cdk/aws-appsync-alpha.UnionTypeOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst string = appsync.GraphqlType.string();\nconst human = new appsync.ObjectType('Human', { definition: { name: string } });\nconst droid = new appsync.ObjectType('Droid', { definition: { name: string } });\nconst starship = new appsync.ObjectType('Starship', { definition: { name: string } });;\nconst search = new appsync.UnionType('Search', {\n  definition: [ human, droid, starship ],\n});\napi.addType(search);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 35,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 7,
        "194": 7,
        "196": 2,
        "197": 4,
        "224": 1,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "0f7ebed99fe9a27e90e43516285fcc1254e5500cf6462d6f1db033ba5a9ecb39"
    },
    "bead18d12665510f58f78f72b0e9fd768df620037660133240df0576d61ae214": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# film_connection: appsync.InterfaceType\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\n\nstring = appsync.GraphqlType.string()\nint = appsync.GraphqlType.int()\napi.add_query(\"allFilms\", appsync.ResolvableField(\n    return_type=film_connection.attribute(),\n    args={\"after\": string, \"first\": int, \"before\": string, \"last\": int},\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=dummy_request,\n    response_mapping_template=dummy_response\n))",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nInterfaceType filmConnection;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\n\nGraphqlType string = GraphqlType.String();\nGraphqlType int = GraphqlType.Int();\napi.AddQuery(\"allFilms\", new ResolvableField(new ResolvableFieldOptions {\n    ReturnType = filmConnection.Attribute(),\n    Args = new Dictionary<string, GraphqlType> { { \"after\", string }, { \"first\", int }, { \"before\", string }, { \"last\", int } },\n    DataSource = api.AddNoneDataSource(\"none\"),\n    RequestMappingTemplate = dummyRequest,\n    ResponseMappingTemplate = dummyResponse\n}));",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nInterfaceType filmConnection;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\n\nGraphqlType string = GraphqlType.string();\nGraphqlType int = GraphqlType.int();\napi.addQuery(\"allFilms\", ResolvableField.Builder.create()\n        .returnType(filmConnection.attribute())\n        .args(Map.of(\"after\", string, \"first\", int, \"before\", string, \"last\", int))\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .requestMappingTemplate(dummyRequest)\n        .responseMappingTemplate(dummyResponse)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar filmConnection interfaceType\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\n\nstring := appsync.graphqlType.string()\nint := appsync.graphqlType.int()\napi.addQuery(jsii.String(\"allFilms\"), appsync.NewResolvableField(&resolvableFieldOptions{\n\treturnType: filmConnection.attribute(),\n\targs: map[string]*graphqlType{\n\t\t\"after\": string,\n\t\t\"first\": int,\n\t\t\"before\": string,\n\t\t\"last\": int,\n\t},\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\trequestMappingTemplate: dummyRequest,\n\tresponseMappingTemplate: dummyResponse,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const filmConnection: appsync.InterfaceType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst string = appsync.GraphqlType.string();\nconst int = appsync.GraphqlType.int();\napi.addQuery('allFilms', new appsync.ResolvableField({\n  returnType: filmConnection.attribute(),\n  args: { after: string, first: int, before: string, last: int},\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 986
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addQuery",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#int",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.InterfaceType#attribute",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.ResolvableField",
        "@aws-cdk/aws-appsync-alpha.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const filmConnection: appsync.InterfaceType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst string = appsync.GraphqlType.string();\nconst int = appsync.GraphqlType.int();\napi.addQuery('allFilms', new appsync.ResolvableField({\n  returnType: filmConnection.attribute(),\n  args: { after: string, first: int, before: string, last: int},\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 43,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 2,
        "194": 8,
        "196": 5,
        "197": 1,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "0b4c2f4f31699eb29fe2fde6879049170400e4728ce007b75fbec414f22ce405"
    },
    "9b159da21aba5f47efde26d1d9fa43c5dea89e4ceadaa9a90b4ea02ae09acf9b": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# film_node: appsync.ObjectType\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\n\nstring = appsync.GraphqlType.string()\nint = appsync.GraphqlType.int()\napi.add_mutation(\"addFilm\", appsync.ResolvableField(\n    return_type=film_node.attribute(),\n    args={\"name\": string, \"film_number\": int},\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=dummy_request,\n    response_mapping_template=dummy_response\n))",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nObjectType filmNode;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\n\nGraphqlType string = GraphqlType.String();\nGraphqlType int = GraphqlType.Int();\napi.AddMutation(\"addFilm\", new ResolvableField(new ResolvableFieldOptions {\n    ReturnType = filmNode.Attribute(),\n    Args = new Dictionary<string, GraphqlType> { { \"name\", string }, { \"film_number\", int } },\n    DataSource = api.AddNoneDataSource(\"none\"),\n    RequestMappingTemplate = dummyRequest,\n    ResponseMappingTemplate = dummyResponse\n}));",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nObjectType filmNode;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\n\nGraphqlType string = GraphqlType.string();\nGraphqlType int = GraphqlType.int();\napi.addMutation(\"addFilm\", ResolvableField.Builder.create()\n        .returnType(filmNode.attribute())\n        .args(Map.of(\"name\", string, \"film_number\", int))\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .requestMappingTemplate(dummyRequest)\n        .responseMappingTemplate(dummyResponse)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar filmNode objectType\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\n\nstring := appsync.graphqlType.string()\nint := appsync.graphqlType.int()\napi.addMutation(jsii.String(\"addFilm\"), appsync.NewResolvableField(&resolvableFieldOptions{\n\treturnType: filmNode.attribute(),\n\targs: map[string]*graphqlType{\n\t\t\"name\": string,\n\t\t\"film_number\": int,\n\t},\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\trequestMappingTemplate: dummyRequest,\n\tresponseMappingTemplate: dummyResponse,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const filmNode: appsync.ObjectType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst string = appsync.GraphqlType.string();\nconst int = appsync.GraphqlType.int();\napi.addMutation('addFilm', new appsync.ResolvableField({\n  returnType: filmNode.attribute(),\n  args: { name: string, film_number: int },\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 1014
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addMutation",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#int",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.InterfaceType#attribute",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.ResolvableField",
        "@aws-cdk/aws-appsync-alpha.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const filmNode: appsync.ObjectType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst string = appsync.GraphqlType.string();\nconst int = appsync.GraphqlType.int();\napi.addMutation('addFilm', new appsync.ResolvableField({\n  returnType: filmNode.attribute(),\n  args: { name: string, film_number: int },\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 39,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 2,
        "194": 8,
        "196": 5,
        "197": 1,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "db5d0a89fc62fad2a90770cc51f938e4482d1ea7dc0ff49017fe313a9a828015"
    },
    "8a57e1646b193d7e2923e88e5d1805062a5859f687a2cd8c8186de69699f73bf": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# film: appsync.InterfaceType\n\n\napi.add_subscription(\"addedFilm\", appsync.Field(\n    return_type=film.attribute(),\n    args={\"id\": appsync.GraphqlType.id(is_required=True)},\n    directives=[appsync.Directive.subscribe(\"addFilm\")]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nInterfaceType film;\n\n\napi.AddSubscription(\"addedFilm\", new Field(new FieldOptions {\n    ReturnType = film.Attribute(),\n    Args = new Dictionary<string, GraphqlType> { { \"id\", GraphqlType.Id(new BaseTypeOptions { IsRequired = true }) } },\n    Directives = new [] { Directive.Subscribe(\"addFilm\") }\n}));",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nInterfaceType film;\n\n\napi.addSubscription(\"addedFilm\", Field.Builder.create()\n        .returnType(film.attribute())\n        .args(Map.of(\"id\", GraphqlType.id(BaseTypeOptions.builder().isRequired(true).build())))\n        .directives(List.of(Directive.subscribe(\"addFilm\")))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar film interfaceType\n\n\napi.addSubscription(jsii.String(\"addedFilm\"), appsync.NewField(&fieldOptions{\n\treturnType: film.attribute(),\n\targs: map[string]graphqlType{\n\t\t\"id\": appsync.*graphqlType.id(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n\tdirectives: []directive{\n\t\tappsync.*directive.subscribe(jsii.String(\"addFilm\")),\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const film: appsync.InterfaceType;\n\napi.addSubscription('addedFilm', new appsync.Field({\n  returnType: film.attribute(),\n  args: { id: appsync.GraphqlType.id({ isRequired: true }) },\n  directives: [appsync.Directive.subscribe('addFilm')],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 1045
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseTypeOptions",
        "@aws-cdk/aws-appsync-alpha.Directive",
        "@aws-cdk/aws-appsync-alpha.Directive#subscribe",
        "@aws-cdk/aws-appsync-alpha.Field",
        "@aws-cdk/aws-appsync-alpha.FieldOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addSubscription",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#id",
        "@aws-cdk/aws-appsync-alpha.InterfaceType#attribute",
        "@aws-cdk/aws-appsync-alpha.ResolvableField"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const film: appsync.InterfaceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\napi.addSubscription('addedFilm', new appsync.Field({\n  returnType: film.attribute(),\n  args: { id: appsync.GraphqlType.id({ isRequired: true }) },\n  directives: [appsync.Directive.subscribe('addFilm')],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 23,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 3,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "e1586a7b682471ce23e36ff36f217c96d9a3e0cbc83e062b4a097ba04cc25492"
    },
    "beebeaa84b46254117ccee31ed8b59d01990cb6419ef7ca78b93bbd47b22c048": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\n# field: appsync_alpha.Field\n\nadd_field_options = appsync_alpha.AddFieldOptions(\n    field=field,\n    field_name=\"fieldName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nField field;\n\nAddFieldOptions addFieldOptions = new AddFieldOptions {\n    Field = field,\n    FieldName = \"fieldName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nField field;\n\nAddFieldOptions addFieldOptions = AddFieldOptions.builder()\n        .field(field)\n        .fieldName(\"fieldName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\nvar field field\n\naddFieldOptions := &addFieldOptions{\n\tfield: field,\n\tfieldName: jsii.String(\"fieldName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const field: appsync_alpha.Field;\nconst addFieldOptions: appsync_alpha.AddFieldOptions = {\n  field: field,\n  fieldName: 'fieldName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.AddFieldOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AddFieldOptions",
        "@aws-cdk/aws-appsync-alpha.IField"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const field: appsync_alpha.Field;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst addFieldOptions: appsync_alpha.AddFieldOptions = {\n  field: field,\n  fieldName: 'fieldName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "991b8d4cefd3c2b9cc32ee009211ab26c9699f2946d6fd8730aa315b8152c1fe"
    },
    "014b3277f62c28710b25fff230d19e2b6aa73fd167f77efc6c41bb4214f36d48": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\nimport aws_cdk as cdk\n\n# expiration: cdk.Expiration\n\napi_key_config = appsync_alpha.ApiKeyConfig(\n    description=\"description\",\n    expires=expiration,\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\nusing Amazon.CDK;\n\nExpiration expiration;\n\nApiKeyConfig apiKeyConfig = new ApiKeyConfig {\n    Description = \"description\",\n    Expires = expiration,\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\nimport software.amazon.awscdk.*;\n\nExpiration expiration;\n\nApiKeyConfig apiKeyConfig = ApiKeyConfig.builder()\n        .description(\"description\")\n        .expires(expiration)\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\nimport cdk \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar expiration expiration\n\napiKeyConfig := &apiKeyConfig{\n\tdescription: jsii.String(\"description\"),\n\texpires: expiration,\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport * as cdk from 'aws-cdk-lib';\n\ndeclare const expiration: cdk.Expiration;\nconst apiKeyConfig: appsync_alpha.ApiKeyConfig = {\n  description: 'description',\n  expires: expiration,\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.ApiKeyConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.ApiKeyConfig",
        "aws-cdk-lib.Expiration"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport * as cdk from 'aws-cdk-lib';\n\ndeclare const expiration: cdk.Expiration;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiKeyConfig: appsync_alpha.ApiKeyConfig = {\n  description: 'description',\n  expires: expiration,\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f7689483d96b3ab3ced325a572ff7f54e6714846b4d107b0ddf4315dc974d6ce"
    },
    "1b24c50ae9becaa6f5fa4ca78d5b287f648955124103150d0c685901f27477a9": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\n\nappsync_function = appsync.AppsyncFunction(self, \"function\",\n    name=\"appsync_function\",\n    api=api,\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=appsync.MappingTemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.MappingTemplate.from_file(\"response.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\n\nAppsyncFunction appsyncFunction = new AppsyncFunction(this, \"function\", new AppsyncFunctionProps {\n    Name = \"appsync_function\",\n    Api = api,\n    DataSource = api.AddNoneDataSource(\"none\"),\n    RequestMappingTemplate = MappingTemplate.FromFile(\"request.vtl\"),\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"response.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\n\nAppsyncFunction appsyncFunction = AppsyncFunction.Builder.create(this, \"function\")\n        .name(\"appsync_function\")\n        .api(api)\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .requestMappingTemplate(MappingTemplate.fromFile(\"request.vtl\"))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"response.vtl\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\n\nappsyncFunction := appsync.NewAppsyncFunction(this, jsii.String(\"function\"), &appsyncFunctionProps{\n\tname: jsii.String(\"appsync_function\"),\n\tapi: api,\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"request.vtl\")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"response.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
        "@aws-cdk/aws-appsync-alpha.AppsyncFunctionProps",
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#fromFile"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2bc3ec14da9fbe2aba78ac8b8e1773fb398df2a08d64cca66965378fc3db3b05"
    },
    "cc77239858b36495c77731343dc6fabaa2122b2a13bb7427061e72ad169c639d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\nappsync_function_attributes = appsync_alpha.AppsyncFunctionAttributes(\n    function_arn=\"functionArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nAppsyncFunctionAttributes appsyncFunctionAttributes = new AppsyncFunctionAttributes {\n    FunctionArn = \"functionArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nAppsyncFunctionAttributes appsyncFunctionAttributes = AppsyncFunctionAttributes.builder()\n        .functionArn(\"functionArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\nappsyncFunctionAttributes := &appsyncFunctionAttributes{\n\tfunctionArn: jsii.String(\"functionArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nconst appsyncFunctionAttributes: appsync_alpha.AppsyncFunctionAttributes = {\n  functionArn: 'functionArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunctionAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AppsyncFunctionAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst appsyncFunctionAttributes: appsync_alpha.AppsyncFunctionAttributes = {\n  functionArn: 'functionArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "8b112aa64bc92a40b09cab6a583001c843ee95cccd49407c05bbb755d26f350c"
    },
    "20319665b993febc8f088fc3062acf8c850c2358cc725e87d7a225cf9ab3249f": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\n\nappsync_function = appsync.AppsyncFunction(self, \"function\",\n    name=\"appsync_function\",\n    api=api,\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=appsync.MappingTemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.MappingTemplate.from_file(\"response.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\n\nAppsyncFunction appsyncFunction = new AppsyncFunction(this, \"function\", new AppsyncFunctionProps {\n    Name = \"appsync_function\",\n    Api = api,\n    DataSource = api.AddNoneDataSource(\"none\"),\n    RequestMappingTemplate = MappingTemplate.FromFile(\"request.vtl\"),\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"response.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\n\nAppsyncFunction appsyncFunction = AppsyncFunction.Builder.create(this, \"function\")\n        .name(\"appsync_function\")\n        .api(api)\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .requestMappingTemplate(MappingTemplate.fromFile(\"request.vtl\"))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"response.vtl\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\n\nappsyncFunction := appsync.NewAppsyncFunction(this, jsii.String(\"function\"), &appsyncFunctionProps{\n\tname: jsii.String(\"appsync_function\"),\n\tapi: api,\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"request.vtl\")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"response.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunctionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
        "@aws-cdk/aws-appsync-alpha.AppsyncFunctionProps",
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#fromFile"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2bc3ec14da9fbe2aba78ac8b8e1773fb398df2a08d64cca66965378fc3db3b05"
    },
    "4207f33abe5e1f35eae28052bf8a21d78d218f5bbd24cdb0b5553ad35b72fd7c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\nassign = appsync_alpha.Assign(\"attr\", \"arg\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nAssign assign = new Assign(\"attr\", \"arg\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nAssign assign = new Assign(\"attr\", \"arg\");",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\nassign := appsync_alpha.NewAssign(jsii.String(\"attr\"), jsii.String(\"arg\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nconst assign = new appsync_alpha.Assign('attr', 'arg');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.Assign"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.Assign"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst assign = new appsync_alpha.Assign('attr', 'arg');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "d85a2f60143625fc650b577e718d01a625fc7035a441afc65760d638658f751a"
    },
    "cbfdbc04ba3772224145c8bcf5c82a5345e987c1925eeabb67d2ce8bc7b86b76": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.IAM\n        )\n    ),\n    xray_enabled=True\n)\n\ndemo_table = dynamodb.Table(self, \"DemoTable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\ndemo_dS = api.add_dynamo_db_data_source(\"demoDataSource\", demo_table)\n\n# Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemo_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemos\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_list()\n)\n\n# Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemo_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemo\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_put_item(\n        appsync.PrimaryKey.partition(\"id\").auto(),\n        appsync.Values.projecting(\"input\")),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_item()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.IAM\n        }\n    },\n    XrayEnabled = true\n});\n\nTable demoTable = new Table(this, \"DemoTable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nDynamoDbDataSource demoDS = api.AddDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemos\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbScanTable(),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultList()\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemo\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbPutItem(PrimaryKey.Partition(\"id\").Auto(), Values.Projecting(\"input\")),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultItem()\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.IAM)\n                        .build())\n                .build())\n        .xrayEnabled(true)\n        .build();\n\nTable demoTable = Table.Builder.create(this, \"DemoTable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nDynamoDbDataSource demoDS = api.addDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemos\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbScanTable())\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultList())\n        .build());\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemo\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbPutItem(PrimaryKey.partition(\"id\").auto(), Values.projecting(\"input\")))\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultItem())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_IAM,\n\t\t},\n\t},\n\txrayEnabled: jsii.Boolean(true),\n})\n\ndemoTable := dynamodb.NewTable(this, jsii.String(\"DemoTable\"), &tableProps{\n\tpartitionKey: &attribute{\n\t\tname: jsii.String(\"id\"),\n\t\ttype: dynamodb.attributeType_STRING,\n\t},\n})\n\ndemoDS := api.addDynamoDbDataSource(jsii.String(\"demoDataSource\"), demoTable)\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemos\"),\n\trequestMappingTemplate: appsync.mappingTemplate.dynamoDbScanTable(),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultList(),\n})\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemo\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.dynamoDbPutItem(appsync.primaryKey.partition(jsii.String(\"id\")).auto(), appsync.values.projecting(jsii.String(\"input\"))),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultItem(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.AttributeValues"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AttributeValues",
        "@aws-cdk/aws-appsync-alpha.AuthorizationConfig",
        "@aws-cdk/aws-appsync-alpha.AuthorizationMode",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType#IAM",
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.DynamoDbDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addDynamoDbDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbPutItem",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbResultItem",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbResultList",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbScanTable",
        "@aws-cdk/aws-appsync-alpha.PartitionKeyStep#auto",
        "@aws-cdk/aws-appsync-alpha.PrimaryKey",
        "@aws-cdk/aws-appsync-alpha.PrimaryKey#partition",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#fromAsset",
        "@aws-cdk/aws-appsync-alpha.Values",
        "@aws-cdk/aws-appsync-alpha.Values#projecting",
        "aws-cdk-lib.aws_dynamodb.Attribute",
        "aws-cdk-lib.aws_dynamodb.AttributeType",
        "aws-cdk-lib.aws_dynamodb.AttributeType#STRING",
        "aws-cdk-lib.aws_dynamodb.ITable",
        "aws-cdk-lib.aws_dynamodb.Table",
        "aws-cdk-lib.aws_dynamodb.TableProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 62,
        "104": 2,
        "106": 1,
        "193": 7,
        "194": 25,
        "196": 12,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 17
      },
      "fqnsFingerprint": "563eecc13c99aa91a45a545fe26df40840ff9624e4522ff810b536395a46c4fb"
    },
    "f1987a9fc66970a95a875c22a47359ca54c85596e52839754485cf5c8879a113": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\n# assign: appsync_alpha.Assign\n\nattribute_values_step = appsync_alpha.AttributeValuesStep(\"attr\", \"container\", [assign])",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nAssign assign;\n\nAttributeValuesStep attributeValuesStep = new AttributeValuesStep(\"attr\", \"container\", new [] { assign });",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nAssign assign;\n\nAttributeValuesStep attributeValuesStep = new AttributeValuesStep(\"attr\", \"container\", List.of(assign));",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\nvar assign assign\n\nattributeValuesStep := appsync_alpha.NewAttributeValuesStep(jsii.String(\"attr\"), jsii.String(\"container\"), []assign{\n\tassign,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const assign: appsync_alpha.Assign;\nconst attributeValuesStep = new appsync_alpha.AttributeValuesStep('attr', 'container', [assign]);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.AttributeValuesStep"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AttributeValuesStep"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const assign: appsync_alpha.Assign;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst attributeValuesStep = new appsync_alpha.AttributeValuesStep('attr', 'container', [assign]);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "55ef17c3f75c4aa8202b89816bb85ce3099ac51adc7498d0b889b5e6baec30d8"
    },
    "7b0fde4900df71c6afda51f70224791eeb5bb4779ef829d4e4ca4d56ab7f19f6": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.IAM\n        )\n    ),\n    xray_enabled=True\n)\n\ndemo_table = dynamodb.Table(self, \"DemoTable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\ndemo_dS = api.add_dynamo_db_data_source(\"demoDataSource\", demo_table)\n\n# Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemo_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemos\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_list()\n)\n\n# Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemo_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemo\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_put_item(\n        appsync.PrimaryKey.partition(\"id\").auto(),\n        appsync.Values.projecting(\"input\")),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_item()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.IAM\n        }\n    },\n    XrayEnabled = true\n});\n\nTable demoTable = new Table(this, \"DemoTable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nDynamoDbDataSource demoDS = api.AddDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemos\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbScanTable(),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultList()\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemo\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbPutItem(PrimaryKey.Partition(\"id\").Auto(), Values.Projecting(\"input\")),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultItem()\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.IAM)\n                        .build())\n                .build())\n        .xrayEnabled(true)\n        .build();\n\nTable demoTable = Table.Builder.create(this, \"DemoTable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nDynamoDbDataSource demoDS = api.addDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemos\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbScanTable())\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultList())\n        .build());\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemo\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbPutItem(PrimaryKey.partition(\"id\").auto(), Values.projecting(\"input\")))\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultItem())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_IAM,\n\t\t},\n\t},\n\txrayEnabled: jsii.Boolean(true),\n})\n\ndemoTable := dynamodb.NewTable(this, jsii.String(\"DemoTable\"), &tableProps{\n\tpartitionKey: &attribute{\n\t\tname: jsii.String(\"id\"),\n\t\ttype: dynamodb.attributeType_STRING,\n\t},\n})\n\ndemoDS := api.addDynamoDbDataSource(jsii.String(\"demoDataSource\"), demoTable)\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemos\"),\n\trequestMappingTemplate: appsync.mappingTemplate.dynamoDbScanTable(),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultList(),\n})\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemo\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.dynamoDbPutItem(appsync.primaryKey.partition(jsii.String(\"id\")).auto(), appsync.values.projecting(jsii.String(\"input\"))),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultItem(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.AuthorizationConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AttributeValues",
        "@aws-cdk/aws-appsync-alpha.AuthorizationConfig",
        "@aws-cdk/aws-appsync-alpha.AuthorizationMode",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType#IAM",
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.DynamoDbDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addDynamoDbDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbPutItem",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbResultItem",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbResultList",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbScanTable",
        "@aws-cdk/aws-appsync-alpha.PartitionKeyStep#auto",
        "@aws-cdk/aws-appsync-alpha.PrimaryKey",
        "@aws-cdk/aws-appsync-alpha.PrimaryKey#partition",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#fromAsset",
        "@aws-cdk/aws-appsync-alpha.Values",
        "@aws-cdk/aws-appsync-alpha.Values#projecting",
        "aws-cdk-lib.aws_dynamodb.Attribute",
        "aws-cdk-lib.aws_dynamodb.AttributeType",
        "aws-cdk-lib.aws_dynamodb.AttributeType#STRING",
        "aws-cdk-lib.aws_dynamodb.ITable",
        "aws-cdk-lib.aws_dynamodb.Table",
        "aws-cdk-lib.aws_dynamodb.TableProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 62,
        "104": 2,
        "106": 1,
        "193": 7,
        "194": 25,
        "196": 12,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 17
      },
      "fqnsFingerprint": "563eecc13c99aa91a45a545fe26df40840ff9624e4522ff810b536395a46c4fb"
    },
    "38fee2a27bbdf4cf59f13e60307de1cbd8a4eeab547364d25028ff25ff51fc6e": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.IAM\n        )\n    ),\n    xray_enabled=True\n)\n\ndemo_table = dynamodb.Table(self, \"DemoTable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\ndemo_dS = api.add_dynamo_db_data_source(\"demoDataSource\", demo_table)\n\n# Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemo_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemos\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_list()\n)\n\n# Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemo_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemo\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_put_item(\n        appsync.PrimaryKey.partition(\"id\").auto(),\n        appsync.Values.projecting(\"input\")),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_item()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.IAM\n        }\n    },\n    XrayEnabled = true\n});\n\nTable demoTable = new Table(this, \"DemoTable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nDynamoDbDataSource demoDS = api.AddDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemos\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbScanTable(),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultList()\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemo\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbPutItem(PrimaryKey.Partition(\"id\").Auto(), Values.Projecting(\"input\")),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultItem()\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.IAM)\n                        .build())\n                .build())\n        .xrayEnabled(true)\n        .build();\n\nTable demoTable = Table.Builder.create(this, \"DemoTable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nDynamoDbDataSource demoDS = api.addDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemos\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbScanTable())\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultList())\n        .build());\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemo\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbPutItem(PrimaryKey.partition(\"id\").auto(), Values.projecting(\"input\")))\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultItem())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_IAM,\n\t\t},\n\t},\n\txrayEnabled: jsii.Boolean(true),\n})\n\ndemoTable := dynamodb.NewTable(this, jsii.String(\"DemoTable\"), &tableProps{\n\tpartitionKey: &attribute{\n\t\tname: jsii.String(\"id\"),\n\t\ttype: dynamodb.attributeType_STRING,\n\t},\n})\n\ndemoDS := api.addDynamoDbDataSource(jsii.String(\"demoDataSource\"), demoTable)\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemos\"),\n\trequestMappingTemplate: appsync.mappingTemplate.dynamoDbScanTable(),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultList(),\n})\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemo\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.dynamoDbPutItem(appsync.primaryKey.partition(jsii.String(\"id\")).auto(), appsync.values.projecting(jsii.String(\"input\"))),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultItem(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.AuthorizationMode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AttributeValues",
        "@aws-cdk/aws-appsync-alpha.AuthorizationConfig",
        "@aws-cdk/aws-appsync-alpha.AuthorizationMode",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType#IAM",
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.DynamoDbDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addDynamoDbDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbPutItem",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbResultItem",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbResultList",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbScanTable",
        "@aws-cdk/aws-appsync-alpha.PartitionKeyStep#auto",
        "@aws-cdk/aws-appsync-alpha.PrimaryKey",
        "@aws-cdk/aws-appsync-alpha.PrimaryKey#partition",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#fromAsset",
        "@aws-cdk/aws-appsync-alpha.Values",
        "@aws-cdk/aws-appsync-alpha.Values#projecting",
        "aws-cdk-lib.aws_dynamodb.Attribute",
        "aws-cdk-lib.aws_dynamodb.AttributeType",
        "aws-cdk-lib.aws_dynamodb.AttributeType#STRING",
        "aws-cdk-lib.aws_dynamodb.ITable",
        "aws-cdk-lib.aws_dynamodb.Table",
        "aws-cdk-lib.aws_dynamodb.TableProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 62,
        "104": 2,
        "106": 1,
        "193": 7,
        "194": 25,
        "196": 12,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 17
      },
      "fqnsFingerprint": "563eecc13c99aa91a45a545fe26df40840ff9624e4522ff810b536395a46c4fb"
    },
    "221ae5352dc3d14d30a26c79cef666b0da36175de3124c34cbe8d7de4ef2ddc4": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.IAM\n        )\n    ),\n    xray_enabled=True\n)\n\ndemo_table = dynamodb.Table(self, \"DemoTable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\ndemo_dS = api.add_dynamo_db_data_source(\"demoDataSource\", demo_table)\n\n# Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemo_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemos\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_list()\n)\n\n# Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemo_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemo\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_put_item(\n        appsync.PrimaryKey.partition(\"id\").auto(),\n        appsync.Values.projecting(\"input\")),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_item()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.IAM\n        }\n    },\n    XrayEnabled = true\n});\n\nTable demoTable = new Table(this, \"DemoTable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nDynamoDbDataSource demoDS = api.AddDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemos\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbScanTable(),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultList()\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemo\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbPutItem(PrimaryKey.Partition(\"id\").Auto(), Values.Projecting(\"input\")),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultItem()\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.IAM)\n                        .build())\n                .build())\n        .xrayEnabled(true)\n        .build();\n\nTable demoTable = Table.Builder.create(this, \"DemoTable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nDynamoDbDataSource demoDS = api.addDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemos\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbScanTable())\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultList())\n        .build());\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemo\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbPutItem(PrimaryKey.partition(\"id\").auto(), Values.projecting(\"input\")))\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultItem())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_IAM,\n\t\t},\n\t},\n\txrayEnabled: jsii.Boolean(true),\n})\n\ndemoTable := dynamodb.NewTable(this, jsii.String(\"DemoTable\"), &tableProps{\n\tpartitionKey: &attribute{\n\t\tname: jsii.String(\"id\"),\n\t\ttype: dynamodb.attributeType_STRING,\n\t},\n})\n\ndemoDS := api.addDynamoDbDataSource(jsii.String(\"demoDataSource\"), demoTable)\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemos\"),\n\trequestMappingTemplate: appsync.mappingTemplate.dynamoDbScanTable(),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultList(),\n})\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemo\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.dynamoDbPutItem(appsync.primaryKey.partition(jsii.String(\"id\")).auto(), appsync.values.projecting(jsii.String(\"input\"))),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultItem(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.AuthorizationType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AttributeValues",
        "@aws-cdk/aws-appsync-alpha.AuthorizationConfig",
        "@aws-cdk/aws-appsync-alpha.AuthorizationMode",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType#IAM",
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.DynamoDbDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addDynamoDbDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbPutItem",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbResultItem",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbResultList",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbScanTable",
        "@aws-cdk/aws-appsync-alpha.PartitionKeyStep#auto",
        "@aws-cdk/aws-appsync-alpha.PrimaryKey",
        "@aws-cdk/aws-appsync-alpha.PrimaryKey#partition",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#fromAsset",
        "@aws-cdk/aws-appsync-alpha.Values",
        "@aws-cdk/aws-appsync-alpha.Values#projecting",
        "aws-cdk-lib.aws_dynamodb.Attribute",
        "aws-cdk-lib.aws_dynamodb.AttributeType",
        "aws-cdk-lib.aws_dynamodb.AttributeType#STRING",
        "aws-cdk-lib.aws_dynamodb.ITable",
        "aws-cdk-lib.aws_dynamodb.Table",
        "aws-cdk-lib.aws_dynamodb.TableProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 62,
        "104": 2,
        "106": 1,
        "193": 7,
        "194": 25,
        "196": 12,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 17
      },
      "fqnsFingerprint": "563eecc13c99aa91a45a545fe26df40840ff9624e4522ff810b536395a46c4fb"
    },
    "92eb01c9d214479731959826772da74813503fa8bdb304659a03d2f81967f9cc": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"api\",\n    name=\"api\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\"))\n)\n\nhttp_ds = api.add_http_data_source(\"ds\", \"https://states.amazonaws.com\",\n    name=\"httpDsWithStepF\",\n    description=\"from appsync to StepFunctions Workflow\",\n    authorization_config=appsync.AwsIamConfig(\n        signing_region=\"us-east-1\",\n        signing_service_name=\"states\"\n    )\n)\n\nhttp_ds.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"callStepFunction\",\n    request_mapping_template=appsync.MappingTemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.MappingTemplate.from_file(\"response.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"api\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\"))\n});\n\nHttpDataSource httpDs = api.AddHttpDataSource(\"ds\", \"https://states.amazonaws.com\", new HttpDataSourceOptions {\n    Name = \"httpDsWithStepF\",\n    Description = \"from appsync to StepFunctions Workflow\",\n    AuthorizationConfig = new AwsIamConfig {\n        SigningRegion = \"us-east-1\",\n        SigningServiceName = \"states\"\n    }\n});\n\nhttpDs.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"callStepFunction\",\n    RequestMappingTemplate = MappingTemplate.FromFile(\"request.vtl\"),\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"response.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"api\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .build();\n\nHttpDataSource httpDs = api.addHttpDataSource(\"ds\", \"https://states.amazonaws.com\", HttpDataSourceOptions.builder()\n        .name(\"httpDsWithStepF\")\n        .description(\"from appsync to StepFunctions Workflow\")\n        .authorizationConfig(AwsIamConfig.builder()\n                .signingRegion(\"us-east-1\")\n                .signingServiceName(\"states\")\n                .build())\n        .build());\n\nhttpDs.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"callStepFunction\")\n        .requestMappingTemplate(MappingTemplate.fromFile(\"request.vtl\"))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"response.vtl\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"api\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n})\n\nhttpDs := api.addHttpDataSource(jsii.String(\"ds\"), jsii.String(\"https://states.amazonaws.com\"), &httpDataSourceOptions{\n\tname: jsii.String(\"httpDsWithStepF\"),\n\tdescription: jsii.String(\"from appsync to StepFunctions Workflow\"),\n\tauthorizationConfig: &awsIamConfig{\n\t\tsigningRegion: jsii.String(\"us-east-1\"),\n\t\tsigningServiceName: jsii.String(\"states\"),\n\t},\n})\n\nhttpDs.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"callStepFunction\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"request.vtl\")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"response.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.AwsIamConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AwsIamConfig",
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addHttpDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.HttpDataSource",
        "@aws-cdk/aws-appsync-alpha.HttpDataSourceOptions",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#fromFile",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#fromAsset"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 31,
        "104": 1,
        "193": 4,
        "194": 10,
        "196": 6,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 11
      },
      "fqnsFingerprint": "20efa7a761ac702721b484a19d8244c2182fde058d288c16f10874d98f13a154"
    },
    "cc3cb62dbbcbbc4544f094819f49a728ac76ead743eef0014fe7f7504ecdc265": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\nfrom aws_cdk import aws_iam as iam\n\n# graphql_api: appsync_alpha.GraphqlApi\n# role: iam.Role\n\nbacked_data_source_props = appsync_alpha.BackedDataSourceProps(\n    api=graphql_api,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\",\n    service_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\nusing Amazon.CDK.AWS.IAM;\n\nGraphqlApi graphqlApi;\nRole role;\n\nBackedDataSourceProps backedDataSourceProps = new BackedDataSourceProps {\n    Api = graphqlApi,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\",\n    ServiceRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\nimport software.amazon.awscdk.services.iam.*;\n\nGraphqlApi graphqlApi;\nRole role;\n\nBackedDataSourceProps backedDataSourceProps = BackedDataSourceProps.builder()\n        .api(graphqlApi)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .serviceRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar graphqlApi graphqlApi\nvar role role\n\nbackedDataSourceProps := &backedDataSourceProps{\n\tapi: graphqlApi,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\tserviceRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\nconst backedDataSourceProps: appsync_alpha.BackedDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.BackedDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BackedDataSourceProps",
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "aws-cdk-lib.aws_iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst backedDataSourceProps: appsync_alpha.BackedDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 18,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "dedba875a98fa12c1fe6448795bf58e4219c80d3bf3762733d1a0144a049d39f"
    },
    "5499c1e9aa1c58a05cc48846057879187f1470faacee576dfd16706f7871df76": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\n# mapping_template: appsync_alpha.MappingTemplate\n\nbase_appsync_function_props = appsync_alpha.BaseAppsyncFunctionProps(\n    name=\"name\",\n\n    # the properties below are optional\n    description=\"description\",\n    request_mapping_template=mapping_template,\n    response_mapping_template=mapping_template\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nMappingTemplate mappingTemplate;\n\nBaseAppsyncFunctionProps baseAppsyncFunctionProps = new BaseAppsyncFunctionProps {\n    Name = \"name\",\n\n    // the properties below are optional\n    Description = \"description\",\n    RequestMappingTemplate = mappingTemplate,\n    ResponseMappingTemplate = mappingTemplate\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nMappingTemplate mappingTemplate;\n\nBaseAppsyncFunctionProps baseAppsyncFunctionProps = BaseAppsyncFunctionProps.builder()\n        .name(\"name\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .requestMappingTemplate(mappingTemplate)\n        .responseMappingTemplate(mappingTemplate)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\nvar mappingTemplate mappingTemplate\n\nbaseAppsyncFunctionProps := &baseAppsyncFunctionProps{\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\trequestMappingTemplate: mappingTemplate,\n\tresponseMappingTemplate: mappingTemplate,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const mappingTemplate: appsync_alpha.MappingTemplate;\nconst baseAppsyncFunctionProps: appsync_alpha.BaseAppsyncFunctionProps = {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  requestMappingTemplate: mappingTemplate,\n  responseMappingTemplate: mappingTemplate,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.BaseAppsyncFunctionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseAppsyncFunctionProps",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const mappingTemplate: appsync_alpha.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst baseAppsyncFunctionProps: appsync_alpha.BaseAppsyncFunctionProps = {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  requestMappingTemplate: mappingTemplate,\n  responseMappingTemplate: mappingTemplate,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "d6625776f5a40f8999dc67b6107778829f8fdd699e72c2e4334dd2fb0e91d461"
    },
    "0fc093beffacae87d4e17ad33e417605f55caa958f3b413e4b2b657b4e64bc4b": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\ninfo = appsync.ObjectType(\"Info\",\n    definition={\n        \"node\": appsync.ResolvableField(\n            return_type=appsync.GraphqlType.string(),\n            args={\n                \"id\": appsync.GraphqlType.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = new ObjectType(\"Info\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"node\", new ResolvableField(new ResolvableFieldOptions {\n            ReturnType = GraphqlType.String(),\n            Args = new Dictionary<string, GraphqlType> {\n                { \"id\", GraphqlType.String() }\n            },\n            DataSource = api.AddNoneDataSource(\"none\"),\n            RequestMappingTemplate = dummyRequest,\n            ResponseMappingTemplate = dummyResponse\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = ObjectType.Builder.create(\"Info\")\n        .definition(Map.of(\n                \"node\", ResolvableField.Builder.create()\n                        .returnType(GraphqlType.string())\n                        .args(Map.of(\n                                \"id\", GraphqlType.string()))\n                        .dataSource(api.addNoneDataSource(\"none\"))\n                        .requestMappingTemplate(dummyRequest)\n                        .responseMappingTemplate(dummyResponse)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\ninfo := appsync.NewObjectType(jsii.String(\"Info\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"node\": appsync.NewResolvableField(&ResolvableFieldOptions{\n\t\t\t\"returnType\": appsync.GraphqlType.string(),\n\t\t\t\"args\": map[string]GraphqlType{\n\t\t\t\t\"id\": appsync.GraphqlType.string(),\n\t\t\t},\n\t\t\t\"dataSource\": api.addNoneDataSource(jsii.String(\"none\")),\n\t\t\t\"requestMappingTemplate\": dummyRequest,\n\t\t\t\"responseMappingTemplate\": dummyResponse,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.BaseDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions",
        "@aws-cdk/aws-appsync-alpha.ResolvableField",
        "@aws-cdk/aws-appsync-alpha.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "9d0ed6ed08d6634c741d3b9ed64d5beb46adcc25efed35c6a28cf5b4b14e8925"
    },
    "f2fbed7d2a6e83f4e8023550e9fd9707a5f1e57cd65a27b36cf1f42265f9cba6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\n# graphql_api: appsync_alpha.GraphqlApi\n\nbase_data_source_props = appsync_alpha.BaseDataSourceProps(\n    api=graphql_api,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nGraphqlApi graphqlApi;\n\nBaseDataSourceProps baseDataSourceProps = new BaseDataSourceProps {\n    Api = graphqlApi,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nGraphqlApi graphqlApi;\n\nBaseDataSourceProps baseDataSourceProps = BaseDataSourceProps.builder()\n        .api(graphqlApi)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\nvar graphqlApi graphqlApi\n\nbaseDataSourceProps := &baseDataSourceProps{\n\tapi: graphqlApi,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\nconst baseDataSourceProps: appsync_alpha.BaseDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.BaseDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSourceProps",
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst baseDataSourceProps: appsync_alpha.BaseDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "7626f9ae389c55bd360941cc1e7c366ecd3483b0c98861e766feced90e6503b6"
    },
    "a0ca9de2562da3101a25c181bda14cd04e0125d7abcab319c3bf7e54361dc2b7": {
      "translations": {
        "python": {
          "source": "# Build a data source for AppSync to access the database.\n# api: appsync.GraphqlApi\n# Create username and password secret for DB Cluster\nsecret = rds.DatabaseSecret(self, \"AuroraSecret\",\n    username=\"clusteradmin\"\n)\n\n# The VPC to place the cluster in\nvpc = ec2.Vpc(self, \"AuroraVpc\")\n\n# Create the serverless cluster, provide all values needed to customise the database.\ncluster = rds.ServerlessCluster(self, \"AuroraCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,\n    credentials={\"username\": \"clusteradmin\"},\n    cluster_identifier=\"db-endpoint-test\",\n    default_database_name=\"demos\"\n)\nrds_dS = api.add_rds_data_source(\"rds\", cluster, secret, \"demos\")\n\n# Set up a resolver for an RDS query.\nrds_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemosRds\",\n    request_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"SELECT * FROM demos\"\n            ]\n          }\n          \"\"\"),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n            $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n          \"\"\")\n)\n\n# Set up a resolver for an RDS mutation.\nrds_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemoRds\",\n    request_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"INSERT INTO demos VALUES (:id, :version)\",\n              \"SELECT * WHERE id = :id\"\n            ],\n            \"variableMap\": {\n              \":id\": $util.toJson($util.autoId()),\n              \":version\": $util.toJson($ctx.args.version)\n            }\n          }\n          \"\"\"),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n            $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n          \"\"\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Build a data source for AppSync to access the database.\nGraphqlApi api;\n// Create username and password secret for DB Cluster\nDatabaseSecret secret = new DatabaseSecret(this, \"AuroraSecret\", new DatabaseSecretProps {\n    Username = \"clusteradmin\"\n});\n\n// The VPC to place the cluster in\nVpc vpc = new Vpc(this, \"AuroraVpc\");\n\n// Create the serverless cluster, provide all values needed to customise the database.\nServerlessCluster cluster = new ServerlessCluster(this, \"AuroraCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,\n    Credentials = new Dictionary<string, string> { { \"username\", \"clusteradmin\" } },\n    ClusterIdentifier = \"db-endpoint-test\",\n    DefaultDatabaseName = \"demos\"\n});\nRdsDataSource rdsDS = api.AddRdsDataSource(\"rds\", cluster, secret, \"demos\");\n\n// Set up a resolver for an RDS query.\nrdsDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemosRds\",\n    RequestMappingTemplate = MappingTemplate.FromString(@\"\n      {\n        \"\"version\"\": \"\"2018-05-29\"\",\n        \"\"statements\"\": [\n          \"\"SELECT * FROM demos\"\"\n        ]\n      }\n      \"),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"\n        $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n      \")\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemoRds\",\n    RequestMappingTemplate = MappingTemplate.FromString(@\"\n      {\n        \"\"version\"\": \"\"2018-05-29\"\",\n        \"\"statements\"\": [\n          \"\"INSERT INTO demos VALUES (:id, :version)\"\",\n          \"\"SELECT * WHERE id = :id\"\"\n        ],\n        \"\"variableMap\"\": {\n          \"\":id\"\": $util.toJson($util.autoId()),\n          \"\":version\"\": $util.toJson($ctx.args.version)\n        }\n      }\n      \"),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"\n        $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n      \")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Build a data source for AppSync to access the database.\nGraphqlApi api;\n// Create username and password secret for DB Cluster\nDatabaseSecret secret = DatabaseSecret.Builder.create(this, \"AuroraSecret\")\n        .username(\"clusteradmin\")\n        .build();\n\n// The VPC to place the cluster in\nVpc vpc = new Vpc(this, \"AuroraVpc\");\n\n// Create the serverless cluster, provide all values needed to customise the database.\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AuroraCluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc)\n        .credentials(Map.of(\"username\", \"clusteradmin\"))\n        .clusterIdentifier(\"db-endpoint-test\")\n        .defaultDatabaseName(\"demos\")\n        .build();\nRdsDataSource rdsDS = api.addRdsDataSource(\"rds\", cluster, secret, \"demos\");\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemosRds\")\n        .requestMappingTemplate(MappingTemplate.fromString(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"SELECT * FROM demos\\\"\\n    ]\\n  }\\n  \"))\n        .responseMappingTemplate(MappingTemplate.fromString(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\\n  \"))\n        .build());\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemoRds\")\n        .requestMappingTemplate(MappingTemplate.fromString(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"INSERT INTO demos VALUES (:id, :version)\\\",\\n      \\\"SELECT * WHERE id = :id\\\"\\n    ],\\n    \\\"variableMap\\\": {\\n      \\\":id\\\": $util.toJson($util.autoId()),\\n      \\\":version\\\": $util.toJson($ctx.args.version)\\n    }\\n  }\\n  \"))\n        .responseMappingTemplate(MappingTemplate.fromString(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\\n  \"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Build a data source for AppSync to access the database.\nvar api graphqlApi\n// Create username and password secret for DB Cluster\nsecret := rds.NewDatabaseSecret(this, jsii.String(\"AuroraSecret\"), &databaseSecretProps{\n\tusername: jsii.String(\"clusteradmin\"),\n})\n\n// The VPC to place the cluster in\nvpc := ec2.NewVpc(this, jsii.String(\"AuroraVpc\"))\n\n// Create the serverless cluster, provide all values needed to customise the database.\ncluster := rds.NewServerlessCluster(this, jsii.String(\"AuroraCluster\"), &serverlessClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA_MYSQL(),\n\tvpc: vpc,\n\tcredentials: map[string]*string{\n\t\t\"username\": jsii.String(\"clusteradmin\"),\n\t},\n\tclusterIdentifier: jsii.String(\"db-endpoint-test\"),\n\tdefaultDatabaseName: jsii.String(\"demos\"),\n})\nrdsDS := api.addRdsDataSource(jsii.String(\"rds\"), cluster, secret, jsii.String(\"demos\"))\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemosRds\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromString(jsii.String(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"SELECT * FROM demos\\\"\\n    ]\\n  }\\n  \")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\\n  \")),\n})\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemoRds\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"INSERT INTO demos VALUES (:id, :version)\\\",\\n      \\\"SELECT * WHERE id = :id\\\"\\n    ],\\n    \\\"variableMap\\\": {\\n      \\\":id\\\": $util.toJson($util.autoId()),\\n      \\\":version\\\": $util.toJson($ctx.args.version)\\n    }\\n  }\\n  \")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\\n  \")),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.BaseResolverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addRdsDataSource",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#fromString",
        "@aws-cdk/aws-appsync-alpha.RdsDataSource",
        "aws-cdk-lib.aws_ec2.IVpc",
        "aws-cdk-lib.aws_ec2.Vpc",
        "aws-cdk-lib.aws_rds.Credentials",
        "aws-cdk-lib.aws_rds.DatabaseClusterEngine",
        "aws-cdk-lib.aws_rds.DatabaseClusterEngine#AURORA_MYSQL",
        "aws-cdk-lib.aws_rds.DatabaseSecret",
        "aws-cdk-lib.aws_rds.DatabaseSecretProps",
        "aws-cdk-lib.aws_rds.IClusterEngine",
        "aws-cdk-lib.aws_rds.IServerlessCluster",
        "aws-cdk-lib.aws_rds.ServerlessCluster",
        "aws-cdk-lib.aws_rds.ServerlessClusterProps",
        "aws-cdk-lib.aws_secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "14": 4,
        "75": 51,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 16,
        "196": 7,
        "197": 3,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 14,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "89466e1bb62772a15b619a7e5a81b4ec9020998d9f2875f824877b836b2bb906"
    },
    "70c576bfb7e3df643483539b79cb1afe404ae22ef395570e4d63cacdc98a5cb2": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\"\n)\ndemo = appsync.ObjectType(\"Demo\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True),\n        \"version\": appsync.GraphqlType.string(is_required=True)\n    }\n)\n\napi.add_type(demo)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\"\n});\nObjectType demo = new ObjectType(\"Demo\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) },\n        { \"version\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});\n\napi.AddType(demo);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .build();\nObjectType demo = ObjectType.Builder.create(\"Demo\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build()),\n                \"version\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();\n\napi.addType(demo);",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n})\ndemo := appsync.NewObjectType(jsii.String(\"Demo\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t\t\"version\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})\n\napi.addType(demo)",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.BaseTypeOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseTypeOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addType",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.IIntermediateType",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 21,
        "104": 1,
        "106": 2,
        "193": 5,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6
      },
      "fqnsFingerprint": "861dcbda087d22e2fe5a7633529559019aa1a1cd83b0861638bb225e2cd3ceba"
    },
    "7025cb4366a25f4c94e9a47d92de513ae58e7b7acbc9f6d5db500b4bfe95b1f3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\nimport aws_cdk as cdk\n\ncaching_config = appsync_alpha.CachingConfig(\n    ttl=cdk.Duration.minutes(30),\n\n    # the properties below are optional\n    caching_keys=[\"cachingKeys\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\nusing Amazon.CDK;\n\nCachingConfig cachingConfig = new CachingConfig {\n    Ttl = Duration.Minutes(30),\n\n    // the properties below are optional\n    CachingKeys = new [] { \"cachingKeys\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\nimport software.amazon.awscdk.*;\n\nCachingConfig cachingConfig = CachingConfig.builder()\n        .ttl(Duration.minutes(30))\n\n        // the properties below are optional\n        .cachingKeys(List.of(\"cachingKeys\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\nimport cdk \"github.com/aws/aws-cdk-go/awscdk\"\n\ncachingConfig := &cachingConfig{\n\tttl: cdk.duration.minutes(jsii.Number(30)),\n\n\t// the properties below are optional\n\tcachingKeys: []*string{\n\t\tjsii.String(\"cachingKeys\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport * as cdk from 'aws-cdk-lib';\nconst cachingConfig: appsync_alpha.CachingConfig = {\n  ttl: cdk.Duration.minutes(30),\n\n  // the properties below are optional\n  cachingKeys: ['cachingKeys'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.CachingConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.CachingConfig",
        "aws-cdk-lib.Duration",
        "aws-cdk-lib.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport * as cdk from 'aws-cdk-lib';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cachingConfig: appsync_alpha.CachingConfig = {\n  ttl: cdk.Duration.minutes(30),\n\n  // the properties below are optional\n  cachingKeys: ['cachingKeys'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f9ed2a309fe4694b8d5e3ce215f66a37e76594c7b737970afe71726cb5ed21e5"
    },
    "cf0edbd7d810996664e746d6814c739a74c6f22dcba89c9251fd7a1776352ac0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\ndata_source_options = appsync_alpha.DataSourceOptions(\n    description=\"description\",\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nDataSourceOptions dataSourceOptions = new DataSourceOptions {\n    Description = \"description\",\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nDataSourceOptions dataSourceOptions = DataSourceOptions.builder()\n        .description(\"description\")\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\ndataSourceOptions := &dataSourceOptions{\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nconst dataSourceOptions: appsync_alpha.DataSourceOptions = {\n  description: 'description',\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.DataSourceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.DataSourceOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dataSourceOptions: appsync_alpha.DataSourceOptions = {\n  description: 'description',\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "5bc97cd8ef95f9cb836b04768ab9a138b8752bc2609d8bec311718b138003d33"
    },
    "42b64e2841f2fa0790eb4af036d82570cda0cfbfd28992681cc02a3a3293ca1e": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# film: appsync.InterfaceType\n\n\napi.add_subscription(\"addedFilm\", appsync.Field(\n    return_type=film.attribute(),\n    args={\"id\": appsync.GraphqlType.id(is_required=True)},\n    directives=[appsync.Directive.subscribe(\"addFilm\")]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nInterfaceType film;\n\n\napi.AddSubscription(\"addedFilm\", new Field(new FieldOptions {\n    ReturnType = film.Attribute(),\n    Args = new Dictionary<string, GraphqlType> { { \"id\", GraphqlType.Id(new BaseTypeOptions { IsRequired = true }) } },\n    Directives = new [] { Directive.Subscribe(\"addFilm\") }\n}));",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nInterfaceType film;\n\n\napi.addSubscription(\"addedFilm\", Field.Builder.create()\n        .returnType(film.attribute())\n        .args(Map.of(\"id\", GraphqlType.id(BaseTypeOptions.builder().isRequired(true).build())))\n        .directives(List.of(Directive.subscribe(\"addFilm\")))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar film interfaceType\n\n\napi.addSubscription(jsii.String(\"addedFilm\"), appsync.NewField(&fieldOptions{\n\treturnType: film.attribute(),\n\targs: map[string]graphqlType{\n\t\t\"id\": appsync.*graphqlType.id(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n\tdirectives: []directive{\n\t\tappsync.*directive.subscribe(jsii.String(\"addFilm\")),\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const film: appsync.InterfaceType;\n\napi.addSubscription('addedFilm', new appsync.Field({\n  returnType: film.attribute(),\n  args: { id: appsync.GraphqlType.id({ isRequired: true }) },\n  directives: [appsync.Directive.subscribe('addFilm')],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.Directive"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseTypeOptions",
        "@aws-cdk/aws-appsync-alpha.Directive",
        "@aws-cdk/aws-appsync-alpha.Directive#subscribe",
        "@aws-cdk/aws-appsync-alpha.Field",
        "@aws-cdk/aws-appsync-alpha.FieldOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addSubscription",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#id",
        "@aws-cdk/aws-appsync-alpha.InterfaceType#attribute",
        "@aws-cdk/aws-appsync-alpha.ResolvableField"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const film: appsync.InterfaceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\napi.addSubscription('addedFilm', new appsync.Field({\n  returnType: film.attribute(),\n  args: { id: appsync.GraphqlType.id({ isRequired: true }) },\n  directives: [appsync.Directive.subscribe('addFilm')],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 23,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 3,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "e1586a7b682471ce23e36ff36f217c96d9a3e0cbc83e062b4a097ba04cc25492"
    },
    "e91ef567c1428cc23baaebd3cb2f3666d40055d38da3c469a2b35a9dfbb3e362": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_certificatemanager as acm\nimport aws_cdk.aws_route53 as route53\n\n# hosted zone and route53 features\n# hosted_zone_id: str\nzone_name = \"example.com\"\n\n\nmy_domain_name = \"api.example.com\"\ncertificate = acm.Certificate(self, \"cert\", domain_name=my_domain_name)\napi = appsync.GraphqlApi(self, \"api\",\n    name=\"myApi\",\n    domain_name=appsync.DomainOptions(\n        certificate=certificate,\n        domain_name=my_domain_name\n    )\n)\n\n# hosted zone for adding appsync domain\nzone = route53.HostedZone.from_hosted_zone_attributes(self, \"HostedZone\",\n    hosted_zone_id=hosted_zone_id,\n    zone_name=zone_name\n)\n\n# create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nroute53.CnameRecord(self, \"CnameApiRecord\",\n    record_name=\"api\",\n    zone=zone,\n    domain_name=my_domain_name\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.Route53;\n\n// hosted zone and route53 features\nstring hostedZoneId;\nstring zoneName = \"example.com\";\n\n\nstring myDomainName = \"api.example.com\";\nCertificate certificate = new Certificate(this, \"cert\", new CertificateProps { DomainName = myDomainName });\nGraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"myApi\",\n    DomainName = new DomainOptions {\n        Certificate = certificate,\n        DomainName = myDomainName\n    }\n});\n\n// hosted zone for adding appsync domain\nIHostedZone zone = HostedZone.FromHostedZoneAttributes(this, \"HostedZone\", new HostedZoneAttributes {\n    HostedZoneId = hostedZoneId,\n    ZoneName = zoneName\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew CnameRecord(this, \"CnameApiRecord\", new CnameRecordProps {\n    RecordName = \"api\",\n    Zone = zone,\n    DomainName = myDomainName\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.route53.*;\n\n// hosted zone and route53 features\nString hostedZoneId;\nString zoneName = \"example.com\";\n\n\nString myDomainName = \"api.example.com\";\nCertificate certificate = Certificate.Builder.create(this, \"cert\").domainName(myDomainName).build();\nGraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"myApi\")\n        .domainName(DomainOptions.builder()\n                .certificate(certificate)\n                .domainName(myDomainName)\n                .build())\n        .build();\n\n// hosted zone for adding appsync domain\nIHostedZone zone = HostedZone.fromHostedZoneAttributes(this, \"HostedZone\", HostedZoneAttributes.builder()\n        .hostedZoneId(hostedZoneId)\n        .zoneName(zoneName)\n        .build());\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nCnameRecord.Builder.create(this, \"CnameApiRecord\")\n        .recordName(\"api\")\n        .zone(zone)\n        .domainName(myDomainName)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import acm \"github.com/aws/aws-cdk-go/awscdk\"\nimport route53 \"github.com/aws/aws-cdk-go/awscdk\"\n\n// hosted zone and route53 features\nvar hostedZoneId string\nzoneName := \"example.com\"\n\n\nmyDomainName := \"api.example.com\"\ncertificate := acm.NewCertificate(this, jsii.String(\"cert\"), &certificateProps{\n\tdomainName: myDomainName,\n})\napi := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"myApi\"),\n\tdomainName: &domainOptions{\n\t\tcertificate: certificate,\n\t\tdomainName: myDomainName,\n\t},\n})\n\n// hosted zone for adding appsync domain\nzone := route53.hostedZone.fromHostedZoneAttributes(this, jsii.String(\"HostedZone\"), &hostedZoneAttributes{\n\thostedZoneId: jsii.String(hostedZoneId),\n\tzoneName: jsii.String(zoneName),\n})\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nroute53.NewCnameRecord(this, jsii.String(\"CnameApiRecord\"), &cnameRecordProps{\n\trecordName: jsii.String(\"api\"),\n\tzone: zone,\n\tdomainName: myDomainName,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as acm from 'aws-cdk-lib/aws-certificatemanager';\nimport * as route53 from 'aws-cdk-lib/aws-route53';\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: myDomainName,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.DomainOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.DomainOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "aws-cdk-lib.aws_certificatemanager.Certificate",
        "aws-cdk-lib.aws_certificatemanager.CertificateProps",
        "aws-cdk-lib.aws_certificatemanager.ICertificate",
        "aws-cdk-lib.aws_route53.CnameRecord",
        "aws-cdk-lib.aws_route53.CnameRecordProps",
        "aws-cdk-lib.aws_route53.HostedZone",
        "aws-cdk-lib.aws_route53.HostedZone#fromHostedZoneAttributes",
        "aws-cdk-lib.aws_route53.HostedZoneAttributes",
        "aws-cdk-lib.aws_route53.IHostedZone"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as acm from 'aws-cdk-lib/aws-certificatemanager';\nimport * as route53 from 'aws-cdk-lib/aws-route53';\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: myDomainName,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "14": 2,
        "75": 30,
        "104": 4,
        "130": 2,
        "143": 1,
        "193": 5,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "282": 4,
        "290": 1
      },
      "fqnsFingerprint": "c98c2b93c686ac1e13c061fabe1598cff6940f33f35aeef3abbd55909d087827"
    },
    "edc77c6bc7eab19d7aa35e3bbfe118b5450f2f839a8343e03a8b61f9dbd87182": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.IAM\n        )\n    ),\n    xray_enabled=True\n)\n\ndemo_table = dynamodb.Table(self, \"DemoTable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\ndemo_dS = api.add_dynamo_db_data_source(\"demoDataSource\", demo_table)\n\n# Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemo_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemos\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_list()\n)\n\n# Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemo_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemo\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_put_item(\n        appsync.PrimaryKey.partition(\"id\").auto(),\n        appsync.Values.projecting(\"input\")),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_item()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.IAM\n        }\n    },\n    XrayEnabled = true\n});\n\nTable demoTable = new Table(this, \"DemoTable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nDynamoDbDataSource demoDS = api.AddDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemos\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbScanTable(),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultList()\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemo\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbPutItem(PrimaryKey.Partition(\"id\").Auto(), Values.Projecting(\"input\")),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultItem()\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.IAM)\n                        .build())\n                .build())\n        .xrayEnabled(true)\n        .build();\n\nTable demoTable = Table.Builder.create(this, \"DemoTable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nDynamoDbDataSource demoDS = api.addDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemos\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbScanTable())\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultList())\n        .build());\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemo\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbPutItem(PrimaryKey.partition(\"id\").auto(), Values.projecting(\"input\")))\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultItem())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_IAM,\n\t\t},\n\t},\n\txrayEnabled: jsii.Boolean(true),\n})\n\ndemoTable := dynamodb.NewTable(this, jsii.String(\"DemoTable\"), &tableProps{\n\tpartitionKey: &attribute{\n\t\tname: jsii.String(\"id\"),\n\t\ttype: dynamodb.attributeType_STRING,\n\t},\n})\n\ndemoDS := api.addDynamoDbDataSource(jsii.String(\"demoDataSource\"), demoTable)\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemos\"),\n\trequestMappingTemplate: appsync.mappingTemplate.dynamoDbScanTable(),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultList(),\n})\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemo\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.dynamoDbPutItem(appsync.primaryKey.partition(jsii.String(\"id\")).auto(), appsync.values.projecting(jsii.String(\"input\"))),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultItem(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.DynamoDbDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AttributeValues",
        "@aws-cdk/aws-appsync-alpha.AuthorizationConfig",
        "@aws-cdk/aws-appsync-alpha.AuthorizationMode",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType#IAM",
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.DynamoDbDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addDynamoDbDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbPutItem",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbResultItem",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbResultList",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbScanTable",
        "@aws-cdk/aws-appsync-alpha.PartitionKeyStep#auto",
        "@aws-cdk/aws-appsync-alpha.PrimaryKey",
        "@aws-cdk/aws-appsync-alpha.PrimaryKey#partition",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#fromAsset",
        "@aws-cdk/aws-appsync-alpha.Values",
        "@aws-cdk/aws-appsync-alpha.Values#projecting",
        "aws-cdk-lib.aws_dynamodb.Attribute",
        "aws-cdk-lib.aws_dynamodb.AttributeType",
        "aws-cdk-lib.aws_dynamodb.AttributeType#STRING",
        "aws-cdk-lib.aws_dynamodb.ITable",
        "aws-cdk-lib.aws_dynamodb.Table",
        "aws-cdk-lib.aws_dynamodb.TableProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 62,
        "104": 2,
        "106": 1,
        "193": 7,
        "194": 25,
        "196": 12,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 17
      },
      "fqnsFingerprint": "563eecc13c99aa91a45a545fe26df40840ff9624e4522ff810b536395a46c4fb"
    },
    "92cf981ddd568d84b7439530708a90e0994861556326f98f8ac4e91725706b2f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\nfrom aws_cdk import aws_dynamodb as dynamodb\nfrom aws_cdk import aws_iam as iam\n\n# graphql_api: appsync_alpha.GraphqlApi\n# role: iam.Role\n# table: dynamodb.Table\n\ndynamo_db_data_source_props = appsync_alpha.DynamoDbDataSourceProps(\n    api=graphql_api,\n    table=table,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\",\n    read_only_access=False,\n    service_role=role,\n    use_caller_credentials=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\nusing Amazon.CDK.AWS.DynamoDB;\nusing Amazon.CDK.AWS.IAM;\n\nGraphqlApi graphqlApi;\nRole role;\nTable table;\n\nDynamoDbDataSourceProps dynamoDbDataSourceProps = new DynamoDbDataSourceProps {\n    Api = graphqlApi,\n    Table = table,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\",\n    ReadOnlyAccess = false,\n    ServiceRole = role,\n    UseCallerCredentials = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\nimport software.amazon.awscdk.services.dynamodb.*;\nimport software.amazon.awscdk.services.iam.*;\n\nGraphqlApi graphqlApi;\nRole role;\nTable table;\n\nDynamoDbDataSourceProps dynamoDbDataSourceProps = DynamoDbDataSourceProps.builder()\n        .api(graphqlApi)\n        .table(table)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .readOnlyAccess(false)\n        .serviceRole(role)\n        .useCallerCredentials(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar graphqlApi graphqlApi\nvar role role\nvar table table\n\ndynamoDbDataSourceProps := &dynamoDbDataSourceProps{\n\tapi: graphqlApi,\n\ttable: table,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\treadOnlyAccess: jsii.Boolean(false),\n\tserviceRole: role,\n\tuseCallerCredentials: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_dynamodb as dynamodb } from 'aws-cdk-lib';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\ndeclare const table: dynamodb.Table;\nconst dynamoDbDataSourceProps: appsync_alpha.DynamoDbDataSourceProps = {\n  api: graphqlApi,\n  table: table,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  readOnlyAccess: false,\n  serviceRole: role,\n  useCallerCredentials: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.DynamoDbDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.DynamoDbDataSourceProps",
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "aws-cdk-lib.aws_dynamodb.ITable",
        "aws-cdk-lib.aws_iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_dynamodb as dynamodb } from 'aws-cdk-lib';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\ndeclare const table: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dynamoDbDataSourceProps: appsync_alpha.DynamoDbDataSourceProps = {\n  api: graphqlApi,\n  table: table,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  readOnlyAccess: false,\n  serviceRole: role,\n  useCallerCredentials: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 27,
        "91": 2,
        "130": 3,
        "153": 4,
        "169": 4,
        "193": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 1,
        "257": 2,
        "258": 2,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "5afdd39aa2d92e0de76ae506bfd4ea8987d8bec0e9a0d79731e433339ca115af"
    },
    "54eb0b300253323190d2d34303234f5c40568aec15faf819b4eb6c5ff1ee5758": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\nfrom aws_cdk import aws_elasticsearch as elasticsearch\nfrom aws_cdk import aws_iam as iam\n\n# domain: elasticsearch.Domain\n# graphql_api: appsync_alpha.GraphqlApi\n# role: iam.Role\n\nelasticsearch_data_source = appsync_alpha.ElasticsearchDataSource(self, \"MyElasticsearchDataSource\",\n    api=graphql_api,\n    domain=domain,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\",\n    service_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\nusing Amazon.CDK.AWS.Elasticsearch;\nusing Amazon.CDK.AWS.IAM;\n\nDomain domain;\nGraphqlApi graphqlApi;\nRole role;\n\nElasticsearchDataSource elasticsearchDataSource = new ElasticsearchDataSource(this, \"MyElasticsearchDataSource\", new ElasticsearchDataSourceProps {\n    Api = graphqlApi,\n    Domain = domain,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\",\n    ServiceRole = role\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\nimport software.amazon.awscdk.services.elasticsearch.*;\nimport software.amazon.awscdk.services.iam.*;\n\nDomain domain;\nGraphqlApi graphqlApi;\nRole role;\n\nElasticsearchDataSource elasticsearchDataSource = ElasticsearchDataSource.Builder.create(this, \"MyElasticsearchDataSource\")\n        .api(graphqlApi)\n        .domain(domain)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .serviceRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar domain domain\nvar graphqlApi graphqlApi\nvar role role\n\nelasticsearchDataSource := appsync_alpha.NewElasticsearchDataSource(this, jsii.String(\"MyElasticsearchDataSource\"), &elasticsearchDataSourceProps{\n\tapi: graphqlApi,\n\tdomain: domain,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\tserviceRole: role,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_elasticsearch as elasticsearch } from 'aws-cdk-lib';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const domain: elasticsearch.Domain;\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\nconst elasticsearchDataSource = new appsync_alpha.ElasticsearchDataSource(this, 'MyElasticsearchDataSource', {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.ElasticsearchDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.ElasticsearchDataSource",
        "@aws-cdk/aws-appsync-alpha.ElasticsearchDataSourceProps",
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "aws-cdk-lib.aws_elasticsearch.IDomain",
        "aws-cdk-lib.aws_iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_elasticsearch as elasticsearch } from 'aws-cdk-lib';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const domain: elasticsearch.Domain;\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst elasticsearchDataSource = new appsync_alpha.ElasticsearchDataSource(this, 'MyElasticsearchDataSource', {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 1,
        "257": 2,
        "258": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "9976f288b94136548a37867e6df8ea238f053872e42f971d7fd9ef4f56c48dc9"
    },
    "5c48d9a28e1fa36d4da72071d17f781b59c264695c4ffcdf36e6ead6764726af": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\nfrom aws_cdk import aws_elasticsearch as elasticsearch\nfrom aws_cdk import aws_iam as iam\n\n# domain: elasticsearch.Domain\n# graphql_api: appsync_alpha.GraphqlApi\n# role: iam.Role\n\nelasticsearch_data_source_props = appsync_alpha.ElasticsearchDataSourceProps(\n    api=graphql_api,\n    domain=domain,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\",\n    service_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\nusing Amazon.CDK.AWS.Elasticsearch;\nusing Amazon.CDK.AWS.IAM;\n\nDomain domain;\nGraphqlApi graphqlApi;\nRole role;\n\nElasticsearchDataSourceProps elasticsearchDataSourceProps = new ElasticsearchDataSourceProps {\n    Api = graphqlApi,\n    Domain = domain,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\",\n    ServiceRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\nimport software.amazon.awscdk.services.elasticsearch.*;\nimport software.amazon.awscdk.services.iam.*;\n\nDomain domain;\nGraphqlApi graphqlApi;\nRole role;\n\nElasticsearchDataSourceProps elasticsearchDataSourceProps = ElasticsearchDataSourceProps.builder()\n        .api(graphqlApi)\n        .domain(domain)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .serviceRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar domain domain\nvar graphqlApi graphqlApi\nvar role role\n\nelasticsearchDataSourceProps := &elasticsearchDataSourceProps{\n\tapi: graphqlApi,\n\tdomain: domain,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\tserviceRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_elasticsearch as elasticsearch } from 'aws-cdk-lib';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const domain: elasticsearch.Domain;\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\nconst elasticsearchDataSourceProps: appsync_alpha.ElasticsearchDataSourceProps = {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.ElasticsearchDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.ElasticsearchDataSourceProps",
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "aws-cdk-lib.aws_elasticsearch.IDomain",
        "aws-cdk-lib.aws_iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_elasticsearch as elasticsearch } from 'aws-cdk-lib';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const domain: elasticsearch.Domain;\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst elasticsearchDataSourceProps: appsync_alpha.ElasticsearchDataSourceProps = {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 3,
        "153": 4,
        "169": 4,
        "193": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 1,
        "257": 2,
        "258": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "4cb73a5b7a3d35de1de18cdd1c1b0653de294f58a6cb7882c2dfcb14efcb7641"
    },
    "8c8af125aa4881066138fe53bb646d22f2795113acbdc87463a1fdac4fbb95c1": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\nepisode = appsync.EnumType(\"Episode\",\n    definition=[\"NEWHOPE\", \"EMPIRE\", \"JEDI\"\n    ]\n)\napi.add_type(episode)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\nEnumType episode = new EnumType(\"Episode\", new EnumTypeOptions {\n    Definition = new [] { \"NEWHOPE\", \"EMPIRE\", \"JEDI\" }\n});\napi.AddType(episode);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\nEnumType episode = EnumType.Builder.create(\"Episode\")\n        .definition(List.of(\"NEWHOPE\", \"EMPIRE\", \"JEDI\"))\n        .build();\napi.addType(episode);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\nepisode := appsync.NewEnumType(jsii.String(\"Episode\"), &enumTypeOptions{\n\tdefinition: []*string{\n\t\tjsii.String(\"NEWHOPE\"),\n\t\tjsii.String(\"EMPIRE\"),\n\t\tjsii.String(\"JEDI\"),\n\t},\n})\napi.addType(episode)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\nconst episode = new appsync.EnumType('Episode', {\n  definition: [\n    'NEWHOPE',\n    'EMPIRE',\n    'JEDI',\n  ],\n});\napi.addType(episode);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.EnumType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.EnumType",
        "@aws-cdk/aws-appsync-alpha.EnumTypeOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addType",
        "@aws-cdk/aws-appsync-alpha.IIntermediateType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst episode = new appsync.EnumType('Episode', {\n  definition: [\n    'NEWHOPE',\n    'EMPIRE',\n    'JEDI',\n  ],\n});\napi.addType(episode);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "28be361c1b7a24f1c1c370bc932a03bdf401ce6a6cd54f032442455782aac16a"
    },
    "978b338d9e69671393a94481ed1b3ee32ee95c09df1638e64477640871f6012a": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\nepisode = appsync.EnumType(\"Episode\",\n    definition=[\"NEWHOPE\", \"EMPIRE\", \"JEDI\"\n    ]\n)\napi.add_type(episode)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\nEnumType episode = new EnumType(\"Episode\", new EnumTypeOptions {\n    Definition = new [] { \"NEWHOPE\", \"EMPIRE\", \"JEDI\" }\n});\napi.AddType(episode);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\nEnumType episode = EnumType.Builder.create(\"Episode\")\n        .definition(List.of(\"NEWHOPE\", \"EMPIRE\", \"JEDI\"))\n        .build();\napi.addType(episode);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\nepisode := appsync.NewEnumType(jsii.String(\"Episode\"), &enumTypeOptions{\n\tdefinition: []*string{\n\t\tjsii.String(\"NEWHOPE\"),\n\t\tjsii.String(\"EMPIRE\"),\n\t\tjsii.String(\"JEDI\"),\n\t},\n})\napi.addType(episode)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\nconst episode = new appsync.EnumType('Episode', {\n  definition: [\n    'NEWHOPE',\n    'EMPIRE',\n    'JEDI',\n  ],\n});\napi.addType(episode);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.EnumTypeOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.EnumType",
        "@aws-cdk/aws-appsync-alpha.EnumTypeOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addType",
        "@aws-cdk/aws-appsync-alpha.IIntermediateType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst episode = new appsync.EnumType('Episode', {\n  definition: [\n    'NEWHOPE',\n    'EMPIRE',\n    'JEDI',\n  ],\n});\napi.addType(episode);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "28be361c1b7a24f1c1c370bc932a03bdf401ce6a6cd54f032442455782aac16a"
    },
    "3d8cca77e9a00e863adf63055832d2fae10ad05a8357f0b9a6e8d2b38464fef7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\nextended_data_source_props = appsync_alpha.ExtendedDataSourceProps(\n    type=\"type\",\n\n    # the properties below are optional\n    dynamo_db_config=DynamoDBConfigProperty(\n        aws_region=\"awsRegion\",\n        table_name=\"tableName\",\n\n        # the properties below are optional\n        delta_sync_config=DeltaSyncConfigProperty(\n            base_table_ttl=\"baseTableTtl\",\n            delta_sync_table_name=\"deltaSyncTableName\",\n            delta_sync_table_ttl=\"deltaSyncTableTtl\"\n        ),\n        use_caller_credentials=False,\n        versioned=False\n    ),\n    elasticsearch_config=ElasticsearchConfigProperty(\n        aws_region=\"awsRegion\",\n        endpoint=\"endpoint\"\n    ),\n    http_config=HttpConfigProperty(\n        endpoint=\"endpoint\",\n\n        # the properties below are optional\n        authorization_config=AuthorizationConfigProperty(\n            authorization_type=\"authorizationType\",\n\n            # the properties below are optional\n            aws_iam_config=AwsIamConfigProperty(\n                signing_region=\"signingRegion\",\n                signing_service_name=\"signingServiceName\"\n            )\n        )\n    ),\n    lambda_config=LambdaConfigProperty(\n        lambda_function_arn=\"lambdaFunctionArn\"\n    ),\n    open_search_service_config=OpenSearchServiceConfigProperty(\n        aws_region=\"awsRegion\",\n        endpoint=\"endpoint\"\n    ),\n    relational_database_config=RelationalDatabaseConfigProperty(\n        relational_database_source_type=\"relationalDatabaseSourceType\",\n\n        # the properties below are optional\n        rds_http_endpoint_config=RdsHttpEndpointConfigProperty(\n            aws_region=\"awsRegion\",\n            aws_secret_store_arn=\"awsSecretStoreArn\",\n            db_cluster_identifier=\"dbClusterIdentifier\",\n\n            # the properties below are optional\n            database_name=\"databaseName\",\n            schema=\"schema\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nExtendedDataSourceProps extendedDataSourceProps = new ExtendedDataSourceProps {\n    Type = \"type\",\n\n    // the properties below are optional\n    DynamoDbConfig = new DynamoDBConfigProperty {\n        AwsRegion = \"awsRegion\",\n        TableName = \"tableName\",\n\n        // the properties below are optional\n        DeltaSyncConfig = new DeltaSyncConfigProperty {\n            BaseTableTtl = \"baseTableTtl\",\n            DeltaSyncTableName = \"deltaSyncTableName\",\n            DeltaSyncTableTtl = \"deltaSyncTableTtl\"\n        },\n        UseCallerCredentials = false,\n        Versioned = false\n    },\n    ElasticsearchConfig = new ElasticsearchConfigProperty {\n        AwsRegion = \"awsRegion\",\n        Endpoint = \"endpoint\"\n    },\n    HttpConfig = new HttpConfigProperty {\n        Endpoint = \"endpoint\",\n\n        // the properties below are optional\n        AuthorizationConfig = new AuthorizationConfigProperty {\n            AuthorizationType = \"authorizationType\",\n\n            // the properties below are optional\n            AwsIamConfig = new AwsIamConfigProperty {\n                SigningRegion = \"signingRegion\",\n                SigningServiceName = \"signingServiceName\"\n            }\n        }\n    },\n    LambdaConfig = new LambdaConfigProperty {\n        LambdaFunctionArn = \"lambdaFunctionArn\"\n    },\n    OpenSearchServiceConfig = new OpenSearchServiceConfigProperty {\n        AwsRegion = \"awsRegion\",\n        Endpoint = \"endpoint\"\n    },\n    RelationalDatabaseConfig = new RelationalDatabaseConfigProperty {\n        RelationalDatabaseSourceType = \"relationalDatabaseSourceType\",\n\n        // the properties below are optional\n        RdsHttpEndpointConfig = new RdsHttpEndpointConfigProperty {\n            AwsRegion = \"awsRegion\",\n            AwsSecretStoreArn = \"awsSecretStoreArn\",\n            DbClusterIdentifier = \"dbClusterIdentifier\",\n\n            // the properties below are optional\n            DatabaseName = \"databaseName\",\n            Schema = \"schema\"\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nExtendedDataSourceProps extendedDataSourceProps = ExtendedDataSourceProps.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .dynamoDbConfig(DynamoDBConfigProperty.builder()\n                .awsRegion(\"awsRegion\")\n                .tableName(\"tableName\")\n\n                // the properties below are optional\n                .deltaSyncConfig(DeltaSyncConfigProperty.builder()\n                        .baseTableTtl(\"baseTableTtl\")\n                        .deltaSyncTableName(\"deltaSyncTableName\")\n                        .deltaSyncTableTtl(\"deltaSyncTableTtl\")\n                        .build())\n                .useCallerCredentials(false)\n                .versioned(false)\n                .build())\n        .elasticsearchConfig(ElasticsearchConfigProperty.builder()\n                .awsRegion(\"awsRegion\")\n                .endpoint(\"endpoint\")\n                .build())\n        .httpConfig(HttpConfigProperty.builder()\n                .endpoint(\"endpoint\")\n\n                // the properties below are optional\n                .authorizationConfig(AuthorizationConfigProperty.builder()\n                        .authorizationType(\"authorizationType\")\n\n                        // the properties below are optional\n                        .awsIamConfig(AwsIamConfigProperty.builder()\n                                .signingRegion(\"signingRegion\")\n                                .signingServiceName(\"signingServiceName\")\n                                .build())\n                        .build())\n                .build())\n        .lambdaConfig(LambdaConfigProperty.builder()\n                .lambdaFunctionArn(\"lambdaFunctionArn\")\n                .build())\n        .openSearchServiceConfig(OpenSearchServiceConfigProperty.builder()\n                .awsRegion(\"awsRegion\")\n                .endpoint(\"endpoint\")\n                .build())\n        .relationalDatabaseConfig(RelationalDatabaseConfigProperty.builder()\n                .relationalDatabaseSourceType(\"relationalDatabaseSourceType\")\n\n                // the properties below are optional\n                .rdsHttpEndpointConfig(RdsHttpEndpointConfigProperty.builder()\n                        .awsRegion(\"awsRegion\")\n                        .awsSecretStoreArn(\"awsSecretStoreArn\")\n                        .dbClusterIdentifier(\"dbClusterIdentifier\")\n\n                        // the properties below are optional\n                        .databaseName(\"databaseName\")\n                        .schema(\"schema\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\nextendedDataSourceProps := &extendedDataSourceProps{\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tdynamoDbConfig: &dynamoDBConfigProperty{\n\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\ttableName: jsii.String(\"tableName\"),\n\n\t\t// the properties below are optional\n\t\tdeltaSyncConfig: &deltaSyncConfigProperty{\n\t\t\tbaseTableTtl: jsii.String(\"baseTableTtl\"),\n\t\t\tdeltaSyncTableName: jsii.String(\"deltaSyncTableName\"),\n\t\t\tdeltaSyncTableTtl: jsii.String(\"deltaSyncTableTtl\"),\n\t\t},\n\t\tuseCallerCredentials: jsii.Boolean(false),\n\t\tversioned: jsii.Boolean(false),\n\t},\n\telasticsearchConfig: &elasticsearchConfigProperty{\n\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\tendpoint: jsii.String(\"endpoint\"),\n\t},\n\thttpConfig: &httpConfigProperty{\n\t\tendpoint: jsii.String(\"endpoint\"),\n\n\t\t// the properties below are optional\n\t\tauthorizationConfig: &authorizationConfigProperty{\n\t\t\tauthorizationType: jsii.String(\"authorizationType\"),\n\n\t\t\t// the properties below are optional\n\t\t\tawsIamConfig: &awsIamConfigProperty{\n\t\t\t\tsigningRegion: jsii.String(\"signingRegion\"),\n\t\t\t\tsigningServiceName: jsii.String(\"signingServiceName\"),\n\t\t\t},\n\t\t},\n\t},\n\tlambdaConfig: &lambdaConfigProperty{\n\t\tlambdaFunctionArn: jsii.String(\"lambdaFunctionArn\"),\n\t},\n\topenSearchServiceConfig: &openSearchServiceConfigProperty{\n\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\tendpoint: jsii.String(\"endpoint\"),\n\t},\n\trelationalDatabaseConfig: &relationalDatabaseConfigProperty{\n\t\trelationalDatabaseSourceType: jsii.String(\"relationalDatabaseSourceType\"),\n\n\t\t// the properties below are optional\n\t\trdsHttpEndpointConfig: &rdsHttpEndpointConfigProperty{\n\t\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\t\tawsSecretStoreArn: jsii.String(\"awsSecretStoreArn\"),\n\t\t\tdbClusterIdentifier: jsii.String(\"dbClusterIdentifier\"),\n\n\t\t\t// the properties below are optional\n\t\t\tdatabaseName: jsii.String(\"databaseName\"),\n\t\t\tschema: jsii.String(\"schema\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nconst extendedDataSourceProps: appsync_alpha.ExtendedDataSourceProps = {\n  type: 'type',\n\n  // the properties below are optional\n  dynamoDbConfig: {\n    awsRegion: 'awsRegion',\n    tableName: 'tableName',\n\n    // the properties below are optional\n    deltaSyncConfig: {\n      baseTableTtl: 'baseTableTtl',\n      deltaSyncTableName: 'deltaSyncTableName',\n      deltaSyncTableTtl: 'deltaSyncTableTtl',\n    },\n    useCallerCredentials: false,\n    versioned: false,\n  },\n  elasticsearchConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  httpConfig: {\n    endpoint: 'endpoint',\n\n    // the properties below are optional\n    authorizationConfig: {\n      authorizationType: 'authorizationType',\n\n      // the properties below are optional\n      awsIamConfig: {\n        signingRegion: 'signingRegion',\n        signingServiceName: 'signingServiceName',\n      },\n    },\n  },\n  lambdaConfig: {\n    lambdaFunctionArn: 'lambdaFunctionArn',\n  },\n  openSearchServiceConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  relationalDatabaseConfig: {\n    relationalDatabaseSourceType: 'relationalDatabaseSourceType',\n\n    // the properties below are optional\n    rdsHttpEndpointConfig: {\n      awsRegion: 'awsRegion',\n      awsSecretStoreArn: 'awsSecretStoreArn',\n      dbClusterIdentifier: 'dbClusterIdentifier',\n\n      // the properties below are optional\n      databaseName: 'databaseName',\n      schema: 'schema',\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.ExtendedDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.ExtendedDataSourceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst extendedDataSourceProps: appsync_alpha.ExtendedDataSourceProps = {\n  type: 'type',\n\n  // the properties below are optional\n  dynamoDbConfig: {\n    awsRegion: 'awsRegion',\n    tableName: 'tableName',\n\n    // the properties below are optional\n    deltaSyncConfig: {\n      baseTableTtl: 'baseTableTtl',\n      deltaSyncTableName: 'deltaSyncTableName',\n      deltaSyncTableTtl: 'deltaSyncTableTtl',\n    },\n    useCallerCredentials: false,\n    versioned: false,\n  },\n  elasticsearchConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  httpConfig: {\n    endpoint: 'endpoint',\n\n    // the properties below are optional\n    authorizationConfig: {\n      authorizationType: 'authorizationType',\n\n      // the properties below are optional\n      awsIamConfig: {\n        signingRegion: 'signingRegion',\n        signingServiceName: 'signingServiceName',\n      },\n    },\n  },\n  lambdaConfig: {\n    lambdaFunctionArn: 'lambdaFunctionArn',\n  },\n  openSearchServiceConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  relationalDatabaseConfig: {\n    relationalDatabaseSourceType: 'relationalDatabaseSourceType',\n\n    // the properties below are optional\n    rdsHttpEndpointConfig: {\n      awsRegion: 'awsRegion',\n      awsSecretStoreArn: 'awsSecretStoreArn',\n      dbClusterIdentifier: 'dbClusterIdentifier',\n\n      // the properties below are optional\n      databaseName: 'databaseName',\n      schema: 'schema',\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 22,
        "75": 37,
        "91": 2,
        "153": 1,
        "169": 1,
        "193": 11,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 33,
        "290": 1
      },
      "fqnsFingerprint": "56fd9b437cbde44475a1a2550a2842b229bd8d5eb7ce19f071fa87c65f4639cd"
    },
    "ea9bcaab35a87737de48eb32d1dd11fd5053eab6776a7b5f13a934cd62e136d3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\nimport aws_cdk as cdk\n\n# appsync_function: appsync_alpha.AppsyncFunction\n# base_data_source: appsync_alpha.BaseDataSource\n# mapping_template: appsync_alpha.MappingTemplate\n\nextended_resolver_props = appsync_alpha.ExtendedResolverProps(\n    field_name=\"fieldName\",\n    type_name=\"typeName\",\n\n    # the properties below are optional\n    caching_config=appsync_alpha.CachingConfig(\n        ttl=cdk.Duration.minutes(30),\n\n        # the properties below are optional\n        caching_keys=[\"cachingKeys\"]\n    ),\n    data_source=base_data_source,\n    pipeline_config=[appsync_function],\n    request_mapping_template=mapping_template,\n    response_mapping_template=mapping_template\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\nusing Amazon.CDK;\n\nAppsyncFunction appsyncFunction;\nBaseDataSource baseDataSource;\nMappingTemplate mappingTemplate;\n\nExtendedResolverProps extendedResolverProps = new ExtendedResolverProps {\n    FieldName = \"fieldName\",\n    TypeName = \"typeName\",\n\n    // the properties below are optional\n    CachingConfig = new CachingConfig {\n        Ttl = Duration.Minutes(30),\n\n        // the properties below are optional\n        CachingKeys = new [] { \"cachingKeys\" }\n    },\n    DataSource = baseDataSource,\n    PipelineConfig = new [] { appsyncFunction },\n    RequestMappingTemplate = mappingTemplate,\n    ResponseMappingTemplate = mappingTemplate\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\nimport software.amazon.awscdk.*;\n\nAppsyncFunction appsyncFunction;\nBaseDataSource baseDataSource;\nMappingTemplate mappingTemplate;\n\nExtendedResolverProps extendedResolverProps = ExtendedResolverProps.builder()\n        .fieldName(\"fieldName\")\n        .typeName(\"typeName\")\n\n        // the properties below are optional\n        .cachingConfig(CachingConfig.builder()\n                .ttl(Duration.minutes(30))\n\n                // the properties below are optional\n                .cachingKeys(List.of(\"cachingKeys\"))\n                .build())\n        .dataSource(baseDataSource)\n        .pipelineConfig(List.of(appsyncFunction))\n        .requestMappingTemplate(mappingTemplate)\n        .responseMappingTemplate(mappingTemplate)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\nimport cdk \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar appsyncFunction appsyncFunction\nvar baseDataSource baseDataSource\nvar mappingTemplate mappingTemplate\n\nextendedResolverProps := &extendedResolverProps{\n\tfieldName: jsii.String(\"fieldName\"),\n\ttypeName: jsii.String(\"typeName\"),\n\n\t// the properties below are optional\n\tcachingConfig: &cachingConfig{\n\t\tttl: cdk.duration.minutes(jsii.Number(30)),\n\n\t\t// the properties below are optional\n\t\tcachingKeys: []*string{\n\t\t\tjsii.String(\"cachingKeys\"),\n\t\t},\n\t},\n\tdataSource: baseDataSource,\n\tpipelineConfig: []iAppsyncFunction{\n\t\tappsyncFunction,\n\t},\n\trequestMappingTemplate: mappingTemplate,\n\tresponseMappingTemplate: mappingTemplate,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport * as cdk from 'aws-cdk-lib';\n\ndeclare const appsyncFunction: appsync_alpha.AppsyncFunction;\ndeclare const baseDataSource: appsync_alpha.BaseDataSource;\ndeclare const mappingTemplate: appsync_alpha.MappingTemplate;\nconst extendedResolverProps: appsync_alpha.ExtendedResolverProps = {\n  fieldName: 'fieldName',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  cachingConfig: {\n    ttl: cdk.Duration.minutes(30),\n\n    // the properties below are optional\n    cachingKeys: ['cachingKeys'],\n  },\n  dataSource: baseDataSource,\n  pipelineConfig: [appsyncFunction],\n  requestMappingTemplate: mappingTemplate,\n  responseMappingTemplate: mappingTemplate,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.ExtendedResolverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.CachingConfig",
        "@aws-cdk/aws-appsync-alpha.ExtendedResolverProps",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "aws-cdk-lib.Duration",
        "aws-cdk-lib.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport * as cdk from 'aws-cdk-lib';\n\ndeclare const appsyncFunction: appsync_alpha.AppsyncFunction;\ndeclare const baseDataSource: appsync_alpha.BaseDataSource;\ndeclare const mappingTemplate: appsync_alpha.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst extendedResolverProps: appsync_alpha.ExtendedResolverProps = {\n  fieldName: 'fieldName',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  cachingConfig: {\n    ttl: cdk.Duration.minutes(30),\n\n    // the properties below are optional\n    cachingKeys: ['cachingKeys'],\n  },\n  dataSource: baseDataSource,\n  pipelineConfig: [appsyncFunction],\n  requestMappingTemplate: mappingTemplate,\n  responseMappingTemplate: mappingTemplate,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 30,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "36037e6b8fe6cbd6ea24f1e5313cc92c06e3823379913ffdfe1288545179a19a"
    },
    "04b929b1e2302d934ea9da26b3c08e3fcaa629a3aae545fe0ba0cd3dfb28489a": {
      "translations": {
        "python": {
          "source": "field = appsync.Field(\n    return_type=appsync.GraphqlType.string(),\n    args={\n        \"argument\": appsync.GraphqlType.string()\n    }\n)\ntype = appsync.InterfaceType(\"Node\",\n    definition={\"test\": field}\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Field field = new Field(new FieldOptions {\n    ReturnType = GraphqlType.String(),\n    Args = new Dictionary<string, GraphqlType> {\n        { \"argument\", GraphqlType.String() }\n    }\n});\nInterfaceType type = new InterfaceType(\"Node\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> { { \"test\", field } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Field field = Field.Builder.create()\n        .returnType(GraphqlType.string())\n        .args(Map.of(\n                \"argument\", GraphqlType.string()))\n        .build();\nInterfaceType type = InterfaceType.Builder.create(\"Node\")\n        .definition(Map.of(\"test\", field))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "field := appsync.NewField(&fieldOptions{\n\treturnType: appsync.graphqlType.string(),\n\targs: map[string]*graphqlType{\n\t\t\"argument\": appsync.*graphqlType.string(),\n\t},\n})\ntype := appsync.NewInterfaceType(jsii.String(\"Node\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"test\": field,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const field = new appsync.Field({\n  returnType: appsync.GraphqlType.string(),\n  args: {\n    argument: appsync.GraphqlType.string(),\n  },\n});\nconst type = new appsync.InterfaceType('Node', {\n  definition: { test: field },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.Field"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.Field",
        "@aws-cdk/aws-appsync-alpha.FieldOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.InterfaceType",
        "@aws-cdk/aws-appsync-alpha.IntermediateTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst field = new appsync.Field({\n  returnType: appsync.GraphqlType.string(),\n  args: {\n    argument: appsync.GraphqlType.string(),\n  },\n});\nconst type = new appsync.InterfaceType('Node', {\n  definition: { test: field },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 18,
        "193": 4,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "cacc39c302bd5a679f3a56c57c131ee1847f26234fbfd57f25a5e0be8f4b547a"
    },
    "928fa170afd9a47a403f45211d30cb43a3fa3204afb530ac203ecaa4563ce8ef": {
      "translations": {
        "python": {
          "source": "field = appsync.Field(\n    return_type=appsync.GraphqlType.string(),\n    args={\n        \"argument\": appsync.GraphqlType.string()\n    }\n)\ntype = appsync.InterfaceType(\"Node\",\n    definition={\"test\": field}\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Field field = new Field(new FieldOptions {\n    ReturnType = GraphqlType.String(),\n    Args = new Dictionary<string, GraphqlType> {\n        { \"argument\", GraphqlType.String() }\n    }\n});\nInterfaceType type = new InterfaceType(\"Node\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> { { \"test\", field } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Field field = Field.Builder.create()\n        .returnType(GraphqlType.string())\n        .args(Map.of(\n                \"argument\", GraphqlType.string()))\n        .build();\nInterfaceType type = InterfaceType.Builder.create(\"Node\")\n        .definition(Map.of(\"test\", field))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "field := appsync.NewField(&fieldOptions{\n\treturnType: appsync.graphqlType.string(),\n\targs: map[string]*graphqlType{\n\t\t\"argument\": appsync.*graphqlType.string(),\n\t},\n})\ntype := appsync.NewInterfaceType(jsii.String(\"Node\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"test\": field,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const field = new appsync.Field({\n  returnType: appsync.GraphqlType.string(),\n  args: {\n    argument: appsync.GraphqlType.string(),\n  },\n});\nconst type = new appsync.InterfaceType('Node', {\n  definition: { test: field },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.FieldOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.Field",
        "@aws-cdk/aws-appsync-alpha.FieldOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.InterfaceType",
        "@aws-cdk/aws-appsync-alpha.IntermediateTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst field = new appsync.Field({\n  returnType: appsync.GraphqlType.string(),\n  args: {\n    argument: appsync.GraphqlType.string(),\n  },\n});\nconst type = new appsync.InterfaceType('Node', {\n  definition: { test: field },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 18,
        "193": 4,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "cacc39c302bd5a679f3a56c57c131ee1847f26234fbfd57f25a5e0be8f4b547a"
    },
    "dba5b4deb948809f7a440f0ac34dfed020d2a77ee0823fa434ccb49fae1b0b2e": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\"\n)\ndemo = appsync.ObjectType(\"Demo\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True),\n        \"version\": appsync.GraphqlType.string(is_required=True)\n    }\n)\n\napi.add_type(demo)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\"\n});\nObjectType demo = new ObjectType(\"Demo\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) },\n        { \"version\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});\n\napi.AddType(demo);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .build();\nObjectType demo = ObjectType.Builder.create(\"Demo\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build()),\n                \"version\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();\n\napi.addType(demo);",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n})\ndemo := appsync.NewObjectType(jsii.String(\"Demo\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t\t\"version\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})\n\napi.addType(demo)",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.GraphqlApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseTypeOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addType",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.IIntermediateType",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 21,
        "104": 1,
        "106": 2,
        "193": 5,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6
      },
      "fqnsFingerprint": "861dcbda087d22e2fe5a7633529559019aa1a1cd83b0861638bb225e2cd3ceba"
    },
    "0cf1b0e17ba9accb24f4e4c825b5b66a04271cb6ef7375085fe35aa669db0f25": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# table: dynamodb.Table\n\nimported_api = appsync.GraphqlApi.from_graphql_api_attributes(self, \"IApi\",\n    graphql_api_id=api.api_id,\n    graphql_api_arn=api.arn\n)\nimported_api.add_dynamo_db_data_source(\"TableDataSource\", table)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nTable table;\n\nIGraphqlApi importedApi = GraphqlApi.FromGraphqlApiAttributes(this, \"IApi\", new GraphqlApiAttributes {\n    GraphqlApiId = api.ApiId,\n    GraphqlApiArn = api.Arn\n});\nimportedApi.AddDynamoDbDataSource(\"TableDataSource\", table);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nTable table;\n\nIGraphqlApi importedApi = GraphqlApi.fromGraphqlApiAttributes(this, \"IApi\", GraphqlApiAttributes.builder()\n        .graphqlApiId(api.getApiId())\n        .graphqlApiArn(api.getArn())\n        .build());\nimportedApi.addDynamoDbDataSource(\"TableDataSource\", table);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar table table\n\nimportedApi := appsync.graphqlApi.fromGraphqlApiAttributes(this, jsii.String(\"IApi\"), &graphqlApiAttributes{\n\tgraphqlApiId: api.apiId,\n\tgraphqlApiArn: api.arn,\n})\nimportedApi.addDynamoDbDataSource(jsii.String(\"TableDataSource\"), table)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const table: dynamodb.Table;\nconst importedApi = appsync.GraphqlApi.fromGraphqlApiAttributes(this, 'IApi', {\n  graphqlApiId: api.apiId,\n  graphqlApiArn: api.arn,\n});\nimportedApi.addDynamoDbDataSource('TableDataSource', table);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.GraphqlApiAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#apiId",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#arn",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#fromGraphqlApiAttributes",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiAttributes",
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi#addDynamoDbDataSource",
        "aws-cdk-lib.aws_dynamodb.ITable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const table: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst importedApi = appsync.GraphqlApi.fromGraphqlApiAttributes(this, 'IApi', {\n  graphqlApiId: api.apiId,\n  graphqlApiArn: api.arn,\n});\nimportedApi.addDynamoDbDataSource('TableDataSource', table);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 19,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 5,
        "196": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7a0ed453d1044d1f225abcf91996232620ba02681e3065e6447fdb47dcfc2792"
    },
    "09e0ebf37ed78e94eb9d0c253a80bac41ed92d6d08493c326bba3e0cdc653e04": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\"\n)\ndemo = appsync.ObjectType(\"Demo\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True),\n        \"version\": appsync.GraphqlType.string(is_required=True)\n    }\n)\n\napi.add_type(demo)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\"\n});\nObjectType demo = new ObjectType(\"Demo\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) },\n        { \"version\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});\n\napi.AddType(demo);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .build();\nObjectType demo = ObjectType.Builder.create(\"Demo\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build()),\n                \"version\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();\n\napi.addType(demo);",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n})\ndemo := appsync.NewObjectType(jsii.String(\"Demo\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t\t\"version\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})\n\napi.addType(demo)",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.GraphqlApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseTypeOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addType",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.IIntermediateType",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 21,
        "104": 1,
        "106": 2,
        "193": 5,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6
      },
      "fqnsFingerprint": "861dcbda087d22e2fe5a7633529559019aa1a1cd83b0861638bb225e2cd3ceba"
    },
    "21b97548c8ae33aac95f47dfe9b1a15e3f4bc75189dbb089b1a85e22d13fd6fe": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\ninfo = appsync.ObjectType(\"Info\",\n    definition={\n        \"node\": appsync.ResolvableField(\n            return_type=appsync.GraphqlType.string(),\n            args={\n                \"id\": appsync.GraphqlType.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = new ObjectType(\"Info\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"node\", new ResolvableField(new ResolvableFieldOptions {\n            ReturnType = GraphqlType.String(),\n            Args = new Dictionary<string, GraphqlType> {\n                { \"id\", GraphqlType.String() }\n            },\n            DataSource = api.AddNoneDataSource(\"none\"),\n            RequestMappingTemplate = dummyRequest,\n            ResponseMappingTemplate = dummyResponse\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = ObjectType.Builder.create(\"Info\")\n        .definition(Map.of(\n                \"node\", ResolvableField.Builder.create()\n                        .returnType(GraphqlType.string())\n                        .args(Map.of(\n                                \"id\", GraphqlType.string()))\n                        .dataSource(api.addNoneDataSource(\"none\"))\n                        .requestMappingTemplate(dummyRequest)\n                        .responseMappingTemplate(dummyResponse)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\ninfo := appsync.NewObjectType(jsii.String(\"Info\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"node\": appsync.NewResolvableField(&ResolvableFieldOptions{\n\t\t\t\"returnType\": appsync.GraphqlType.string(),\n\t\t\t\"args\": map[string]GraphqlType{\n\t\t\t\t\"id\": appsync.GraphqlType.string(),\n\t\t\t},\n\t\t\t\"dataSource\": api.addNoneDataSource(jsii.String(\"none\")),\n\t\t\t\"requestMappingTemplate\": dummyRequest,\n\t\t\t\"responseMappingTemplate\": dummyResponse,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.GraphqlType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions",
        "@aws-cdk/aws-appsync-alpha.ResolvableField",
        "@aws-cdk/aws-appsync-alpha.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "9d0ed6ed08d6634c741d3b9ed64d5beb46adcc25efed35c6a28cf5b4b14e8925"
    },
    "3520b235af4f706a5d1f4ebb340e449b0d98c8190c8b7ef33283630e14c1df1a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\n# intermediate_type: appsync_alpha.IIntermediateType\n\ngraphql_type_options = appsync_alpha.GraphqlTypeOptions(\n    intermediate_type=intermediate_type,\n    is_list=False,\n    is_required=False,\n    is_required_list=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nIIntermediateType intermediateType;\n\nGraphqlTypeOptions graphqlTypeOptions = new GraphqlTypeOptions {\n    IntermediateType = intermediateType,\n    IsList = false,\n    IsRequired = false,\n    IsRequiredList = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nIIntermediateType intermediateType;\n\nGraphqlTypeOptions graphqlTypeOptions = GraphqlTypeOptions.builder()\n        .intermediateType(intermediateType)\n        .isList(false)\n        .isRequired(false)\n        .isRequiredList(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\nvar intermediateType iIntermediateType\n\ngraphqlTypeOptions := &graphqlTypeOptions{\n\tintermediateType: intermediateType,\n\tisList: jsii.Boolean(false),\n\tisRequired: jsii.Boolean(false),\n\tisRequiredList: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const intermediateType: appsync_alpha.IIntermediateType;\nconst graphqlTypeOptions: appsync_alpha.GraphqlTypeOptions = {\n  intermediateType: intermediateType,\n  isList: false,\n  isRequired: false,\n  isRequiredList: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.GraphqlTypeOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.GraphqlTypeOptions",
        "@aws-cdk/aws-appsync-alpha.IIntermediateType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const intermediateType: appsync_alpha.IIntermediateType;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst graphqlTypeOptions: appsync_alpha.GraphqlTypeOptions = {\n  intermediateType: intermediateType,\n  isList: false,\n  isRequired: false,\n  isRequiredList: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 12,
        "91": 3,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "ba10d19e2e869fffb14434b57dd9ec0920e16d27a26c90003a5293f8c24cc296"
    },
    "8bdd2838ceb711db6d06bb001792fc07897c8d891143549b0665083b48418dcc": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"api\",\n    name=\"api\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\"))\n)\n\nhttp_ds = api.add_http_data_source(\"ds\", \"https://states.amazonaws.com\",\n    name=\"httpDsWithStepF\",\n    description=\"from appsync to StepFunctions Workflow\",\n    authorization_config=appsync.AwsIamConfig(\n        signing_region=\"us-east-1\",\n        signing_service_name=\"states\"\n    )\n)\n\nhttp_ds.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"callStepFunction\",\n    request_mapping_template=appsync.MappingTemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.MappingTemplate.from_file(\"response.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"api\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\"))\n});\n\nHttpDataSource httpDs = api.AddHttpDataSource(\"ds\", \"https://states.amazonaws.com\", new HttpDataSourceOptions {\n    Name = \"httpDsWithStepF\",\n    Description = \"from appsync to StepFunctions Workflow\",\n    AuthorizationConfig = new AwsIamConfig {\n        SigningRegion = \"us-east-1\",\n        SigningServiceName = \"states\"\n    }\n});\n\nhttpDs.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"callStepFunction\",\n    RequestMappingTemplate = MappingTemplate.FromFile(\"request.vtl\"),\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"response.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"api\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .build();\n\nHttpDataSource httpDs = api.addHttpDataSource(\"ds\", \"https://states.amazonaws.com\", HttpDataSourceOptions.builder()\n        .name(\"httpDsWithStepF\")\n        .description(\"from appsync to StepFunctions Workflow\")\n        .authorizationConfig(AwsIamConfig.builder()\n                .signingRegion(\"us-east-1\")\n                .signingServiceName(\"states\")\n                .build())\n        .build());\n\nhttpDs.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"callStepFunction\")\n        .requestMappingTemplate(MappingTemplate.fromFile(\"request.vtl\"))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"response.vtl\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"api\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n})\n\nhttpDs := api.addHttpDataSource(jsii.String(\"ds\"), jsii.String(\"https://states.amazonaws.com\"), &httpDataSourceOptions{\n\tname: jsii.String(\"httpDsWithStepF\"),\n\tdescription: jsii.String(\"from appsync to StepFunctions Workflow\"),\n\tauthorizationConfig: &awsIamConfig{\n\t\tsigningRegion: jsii.String(\"us-east-1\"),\n\t\tsigningServiceName: jsii.String(\"states\"),\n\t},\n})\n\nhttpDs.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"callStepFunction\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"request.vtl\")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"response.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.HttpDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AwsIamConfig",
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addHttpDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.HttpDataSource",
        "@aws-cdk/aws-appsync-alpha.HttpDataSourceOptions",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#fromFile",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#fromAsset"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 31,
        "104": 1,
        "193": 4,
        "194": 10,
        "196": 6,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 11
      },
      "fqnsFingerprint": "20efa7a761ac702721b484a19d8244c2182fde058d288c16f10874d98f13a154"
    },
    "aa12ccb6e92fcc93efdbf84998717e9ccd1d6f7107781093b09f1bea40186afa": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"api\",\n    name=\"api\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\"))\n)\n\nhttp_ds = api.add_http_data_source(\"ds\", \"https://states.amazonaws.com\",\n    name=\"httpDsWithStepF\",\n    description=\"from appsync to StepFunctions Workflow\",\n    authorization_config=appsync.AwsIamConfig(\n        signing_region=\"us-east-1\",\n        signing_service_name=\"states\"\n    )\n)\n\nhttp_ds.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"callStepFunction\",\n    request_mapping_template=appsync.MappingTemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.MappingTemplate.from_file(\"response.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"api\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\"))\n});\n\nHttpDataSource httpDs = api.AddHttpDataSource(\"ds\", \"https://states.amazonaws.com\", new HttpDataSourceOptions {\n    Name = \"httpDsWithStepF\",\n    Description = \"from appsync to StepFunctions Workflow\",\n    AuthorizationConfig = new AwsIamConfig {\n        SigningRegion = \"us-east-1\",\n        SigningServiceName = \"states\"\n    }\n});\n\nhttpDs.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"callStepFunction\",\n    RequestMappingTemplate = MappingTemplate.FromFile(\"request.vtl\"),\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"response.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"api\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .build();\n\nHttpDataSource httpDs = api.addHttpDataSource(\"ds\", \"https://states.amazonaws.com\", HttpDataSourceOptions.builder()\n        .name(\"httpDsWithStepF\")\n        .description(\"from appsync to StepFunctions Workflow\")\n        .authorizationConfig(AwsIamConfig.builder()\n                .signingRegion(\"us-east-1\")\n                .signingServiceName(\"states\")\n                .build())\n        .build());\n\nhttpDs.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"callStepFunction\")\n        .requestMappingTemplate(MappingTemplate.fromFile(\"request.vtl\"))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"response.vtl\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"api\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n})\n\nhttpDs := api.addHttpDataSource(jsii.String(\"ds\"), jsii.String(\"https://states.amazonaws.com\"), &httpDataSourceOptions{\n\tname: jsii.String(\"httpDsWithStepF\"),\n\tdescription: jsii.String(\"from appsync to StepFunctions Workflow\"),\n\tauthorizationConfig: &awsIamConfig{\n\t\tsigningRegion: jsii.String(\"us-east-1\"),\n\t\tsigningServiceName: jsii.String(\"states\"),\n\t},\n})\n\nhttpDs.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"callStepFunction\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"request.vtl\")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"response.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.HttpDataSourceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AwsIamConfig",
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addHttpDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.HttpDataSource",
        "@aws-cdk/aws-appsync-alpha.HttpDataSourceOptions",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#fromFile",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#fromAsset"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 31,
        "104": 1,
        "193": 4,
        "194": 10,
        "196": 6,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 11
      },
      "fqnsFingerprint": "20efa7a761ac702721b484a19d8244c2182fde058d288c16f10874d98f13a154"
    },
    "fc85312074aa6b6365f86ab38182a2dbbfddab4926d909f501ba3f251666cf62": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\n# graphql_api: appsync_alpha.GraphqlApi\n\nhttp_data_source_props = appsync_alpha.HttpDataSourceProps(\n    api=graphql_api,\n    endpoint=\"endpoint\",\n\n    # the properties below are optional\n    authorization_config=appsync_alpha.AwsIamConfig(\n        signing_region=\"signingRegion\",\n        signing_service_name=\"signingServiceName\"\n    ),\n    description=\"description\",\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nGraphqlApi graphqlApi;\n\nHttpDataSourceProps httpDataSourceProps = new HttpDataSourceProps {\n    Api = graphqlApi,\n    Endpoint = \"endpoint\",\n\n    // the properties below are optional\n    AuthorizationConfig = new AwsIamConfig {\n        SigningRegion = \"signingRegion\",\n        SigningServiceName = \"signingServiceName\"\n    },\n    Description = \"description\",\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nGraphqlApi graphqlApi;\n\nHttpDataSourceProps httpDataSourceProps = HttpDataSourceProps.builder()\n        .api(graphqlApi)\n        .endpoint(\"endpoint\")\n\n        // the properties below are optional\n        .authorizationConfig(AwsIamConfig.builder()\n                .signingRegion(\"signingRegion\")\n                .signingServiceName(\"signingServiceName\")\n                .build())\n        .description(\"description\")\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\nvar graphqlApi graphqlApi\n\nhttpDataSourceProps := &httpDataSourceProps{\n\tapi: graphqlApi,\n\tendpoint: jsii.String(\"endpoint\"),\n\n\t// the properties below are optional\n\tauthorizationConfig: &awsIamConfig{\n\t\tsigningRegion: jsii.String(\"signingRegion\"),\n\t\tsigningServiceName: jsii.String(\"signingServiceName\"),\n\t},\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\nconst httpDataSourceProps: appsync_alpha.HttpDataSourceProps = {\n  api: graphqlApi,\n  endpoint: 'endpoint',\n\n  // the properties below are optional\n  authorizationConfig: {\n    signingRegion: 'signingRegion',\n    signingServiceName: 'signingServiceName',\n  },\n  description: 'description',\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.HttpDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AwsIamConfig",
        "@aws-cdk/aws-appsync-alpha.HttpDataSourceProps",
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpDataSourceProps: appsync_alpha.HttpDataSourceProps = {\n  api: graphqlApi,\n  endpoint: 'endpoint',\n\n  // the properties below are optional\n  authorizationConfig: {\n    signingRegion: 'signingRegion',\n    signingServiceName: 'signingServiceName',\n  },\n  description: 'description',\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "50e773fae654b36d00f020c60c57c1b744067f56f817e03294f3b18f5c69b528"
    },
    "be457128d5e8bb0f453900a0d5357e132deaf2796c0aa5cc0c42cd6aef16da96": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\")\n)\n\napi.grant(role, appsync.IamResource.custom(\"types/Mutation/fields/updateExample\"), \"appsync:GraphQL\")",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\")\n});\n\napi.Grant(role, IamResource.Custom(\"types/Mutation/fields/updateExample\"), \"appsync:GraphQL\");",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .build();\n\napi.grant(role, IamResource.custom(\"types/Mutation/fields/updateExample\"), \"appsync:GraphQL\");",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nrole := iam.NewRole(this, jsii.String(\"Role\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"lambda.amazonaws.com\")),\n})\n\napi.grant(role, appsync.iamResource.custom(jsii.String(\"types/Mutation/fields/updateExample\")), jsii.String(\"appsync:GraphQL\"))",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\ndeclare const api: appsync.GraphqlApi;\n\napi.grant(role, appsync.IamResource.custom('types/Mutation/fields/updateExample'), 'appsync:GraphQL');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.IamResource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#grant",
        "@aws-cdk/aws-appsync-alpha.IamResource",
        "@aws-cdk/aws-appsync-alpha.IamResource#custom",
        "aws-cdk-lib.aws_iam.IGrantable",
        "aws-cdk-lib.aws_iam.IPrincipal",
        "aws-cdk-lib.aws_iam.Role",
        "aws-cdk-lib.aws_iam.RoleProps",
        "aws-cdk-lib.aws_iam.ServicePrincipal"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\napi.grant(role, appsync.IamResource.custom('types/Mutation/fields/updateExample'), 'appsync:GraphQL');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "2796ed2ca1fe2fd1a420bcf446735c3ce78415e95fefff566e91fed9cd8ddbbc"
    },
    "99f5d0c66084c0381d40c270b6b84137fed584d91f8a01bce671d91d5d98c45c": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\nreview = appsync.InputType(\"Review\",\n    definition={\n        \"stars\": appsync.GraphqlType.int(is_required=True),\n        \"commentary\": appsync.GraphqlType.string()\n    }\n)\napi.add_type(review)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\nInputType review = new InputType(\"Review\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"stars\", GraphqlType.Int(new BaseTypeOptions { IsRequired = true }) },\n        { \"commentary\", GraphqlType.String() }\n    }\n});\napi.AddType(review);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\nInputType review = InputType.Builder.create(\"Review\")\n        .definition(Map.of(\n                \"stars\", GraphqlType.int(BaseTypeOptions.builder().isRequired(true).build()),\n                \"commentary\", GraphqlType.string()))\n        .build();\napi.addType(review);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\nreview := appsync.NewInputType(jsii.String(\"Review\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"stars\": appsync.GraphqlType.int(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t\t\"commentary\": appsync.GraphqlType.string(),\n\t},\n})\napi.addType(review)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\nconst review = new appsync.InputType('Review', {\n  definition: {\n    stars: appsync.GraphqlType.int({ isRequired: true }),\n    commentary: appsync.GraphqlType.string(),\n  },\n});\napi.addType(review);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.InputType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseTypeOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#int",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.IIntermediateType",
        "@aws-cdk/aws-appsync-alpha.InputType",
        "@aws-cdk/aws-appsync-alpha.IntermediateTypeOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst review = new appsync.InputType('Review', {\n  definition: {\n    stars: appsync.GraphqlType.int({ isRequired: true }),\n    commentary: appsync.GraphqlType.string(),\n  },\n});\napi.addType(review);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 19,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "94e1aae29de8ef90e84e620d97f60a87c5609cfeae633deada2a37d96fd5eabd"
    },
    "6569d750adbb3cc8fe7d009d6738ff720bfc96df9c0507925568fa582fd9947a": {
      "translations": {
        "python": {
          "source": "node = appsync.InterfaceType(\"Node\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True)\n    }\n)\ndemo = appsync.ObjectType(\"Demo\",\n    interface_types=[node],\n    definition={\n        \"version\": appsync.GraphqlType.string(is_required=True)\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "InterfaceType node = new InterfaceType(\"Node\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});\nObjectType demo = new ObjectType(\"Demo\", new ObjectTypeOptions {\n    InterfaceTypes = new [] { node },\n    Definition = new Dictionary<string, IField> {\n        { \"version\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "InterfaceType node = InterfaceType.Builder.create(\"Node\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();\nObjectType demo = ObjectType.Builder.create(\"Demo\")\n        .interfaceTypes(List.of(node))\n        .definition(Map.of(\n                \"version\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "node := appsync.NewInterfaceType(jsii.String(\"Node\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})\ndemo := appsync.NewObjectType(jsii.String(\"Demo\"), &objectTypeOptions{\n\tinterfaceTypes: []interfaceType{\n\t\tnode,\n\t},\n\tdefinition: map[string]*iField{\n\t\t\"version\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\nconst demo = new appsync.ObjectType('Demo', {\n  interfaceTypes: [ node ],\n  definition: {\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.InterfaceType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseTypeOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.InterfaceType",
        "@aws-cdk/aws-appsync-alpha.IntermediateTypeOptions",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\nconst demo = new appsync.ObjectType('Demo', {\n  interfaceTypes: [ node ],\n  definition: {\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 20,
        "106": 2,
        "192": 1,
        "193": 6,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7
      },
      "fqnsFingerprint": "0889bc502e23c2e4ce2772e7c0487d8444d16f0c5c268bed7890ea5877865cb2"
    },
    "ff88fc2af3db3729862a72b18f9d110bee1e9aba94f45910133cb762106a79b0": {
      "translations": {
        "python": {
          "source": "node = appsync.InterfaceType(\"Node\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True)\n    }\n)\ndemo = appsync.ObjectType(\"Demo\",\n    interface_types=[node],\n    definition={\n        \"version\": appsync.GraphqlType.string(is_required=True)\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "InterfaceType node = new InterfaceType(\"Node\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});\nObjectType demo = new ObjectType(\"Demo\", new ObjectTypeOptions {\n    InterfaceTypes = new [] { node },\n    Definition = new Dictionary<string, IField> {\n        { \"version\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "InterfaceType node = InterfaceType.Builder.create(\"Node\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();\nObjectType demo = ObjectType.Builder.create(\"Demo\")\n        .interfaceTypes(List.of(node))\n        .definition(Map.of(\n                \"version\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "node := appsync.NewInterfaceType(jsii.String(\"Node\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})\ndemo := appsync.NewObjectType(jsii.String(\"Demo\"), &objectTypeOptions{\n\tinterfaceTypes: []interfaceType{\n\t\tnode,\n\t},\n\tdefinition: map[string]*iField{\n\t\t\"version\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\nconst demo = new appsync.ObjectType('Demo', {\n  interfaceTypes: [ node ],\n  definition: {\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.IntermediateTypeOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseTypeOptions",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.InterfaceType",
        "@aws-cdk/aws-appsync-alpha.IntermediateTypeOptions",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\nconst demo = new appsync.ObjectType('Demo', {\n  interfaceTypes: [ node ],\n  definition: {\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 20,
        "106": 2,
        "192": 1,
        "193": 6,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7
      },
      "fqnsFingerprint": "0889bc502e23c2e4ce2772e7c0487d8444d16f0c5c268bed7890ea5877865cb2"
    },
    "72fda2c980a27714ead6be7170c12ac65cf47adf7807f560ad878f81b8ea9a5b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\nkey_condition = appsync_alpha.KeyCondition.begins_with(\"keyName\", \"arg\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nKeyCondition keyCondition = KeyCondition.BeginsWith(\"keyName\", \"arg\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nKeyCondition keyCondition = KeyCondition.beginsWith(\"keyName\", \"arg\");",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\nkeyCondition := appsync_alpha.keyCondition.beginsWith(jsii.String(\"keyName\"), jsii.String(\"arg\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nconst keyCondition = appsync_alpha.KeyCondition.beginsWith('keyName', 'arg');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.KeyCondition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.KeyCondition",
        "@aws-cdk/aws-appsync-alpha.KeyCondition#beginsWith"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst keyCondition = appsync_alpha.KeyCondition.beginsWith('keyName', 'arg');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 5,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e7d4cbb78d032855acb0ec2f0f0807b9dc2978fa4ace2ece59581d91f1e4176b"
    },
    "9a04d68e8d4a7e05b7b8f8602aa52843bbef866bba8837d944c2e3215e650bac": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n# auth_function: lambda.Function\n\n\nappsync.GraphqlApi(self, \"api\",\n    name=\"api\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"appsync.test.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.LAMBDA,\n            lambda_authorizer_config=appsync.LambdaAuthorizerConfig(\n                handler=auth_function\n            )\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\nFunction authFunction;\n\n\nnew GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"api\",\n    Schema = Schema.FromAsset(Join(__dirname, \"appsync.test.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.LAMBDA,\n            LambdaAuthorizerConfig = new LambdaAuthorizerConfig {\n                Handler = authFunction\n            }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\nFunction authFunction;\n\n\nGraphqlApi.Builder.create(this, \"api\")\n        .name(\"api\")\n        .schema(Schema.fromAsset(join(__dirname, \"appsync.test.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.LAMBDA)\n                        .lambdaAuthorizerConfig(LambdaAuthorizerConfig.builder()\n                                .handler(authFunction)\n                                .build())\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import lambda \"github.com/aws/aws-cdk-go/awscdk\"\nvar authFunction function\n\n\nappsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"api\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"appsync.test.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_LAMBDA,\n\t\t\tlambdaAuthorizerConfig: &lambdaAuthorizerConfig{\n\t\t\t\thandler: authFunction,\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from 'aws-cdk-lib/aws-lambda';\ndeclare const authFunction: lambda.Function;\n\nnew appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'appsync.test.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.LAMBDA,\n      lambdaAuthorizerConfig: {\n        handler: authFunction,\n        // can also specify `resultsCacheTtl` and `validationRegex`.\n      },\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.LambdaAuthorizerConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AuthorizationConfig",
        "@aws-cdk/aws-appsync-alpha.AuthorizationMode",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType#LAMBDA",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.LambdaAuthorizerConfig",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#fromAsset",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\ndeclare const authFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'appsync.test.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.LAMBDA,\n      lambdaAuthorizerConfig: {\n        handler: authFunction,\n        // can also specify `resultsCacheTtl` and `validationRegex`.\n      },\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 23,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "530c10be082c24780bf07b062be73ef74a0887c721ee7f7a3b89125302ddb506"
    },
    "26171352ea85ef306b111cf3ac7efb6f4818737bed3d8967532b5044b1a67a15": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\nfrom aws_cdk import aws_iam as iam\nfrom aws_cdk import aws_lambda as lambda_\n\n# function_: lambda.Function\n# graphql_api: appsync_alpha.GraphqlApi\n# role: iam.Role\n\nlambda_data_source = appsync_alpha.LambdaDataSource(self, \"MyLambdaDataSource\",\n    api=graphql_api,\n    lambda_function=function_,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\",\n    service_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.Lambda;\n\nFunction function_;\nGraphqlApi graphqlApi;\nRole role;\n\nLambdaDataSource lambdaDataSource = new LambdaDataSource(this, \"MyLambdaDataSource\", new LambdaDataSourceProps {\n    Api = graphqlApi,\n    LambdaFunction = function_,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\",\n    ServiceRole = role\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.lambda.*;\n\nFunction function_;\nGraphqlApi graphqlApi;\nRole role;\n\nLambdaDataSource lambdaDataSource = LambdaDataSource.Builder.create(this, \"MyLambdaDataSource\")\n        .api(graphqlApi)\n        .lambdaFunction(function_)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .serviceRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar function_ function\nvar graphqlApi graphqlApi\nvar role role\n\nlambdaDataSource := appsync_alpha.NewLambdaDataSource(this, jsii.String(\"MyLambdaDataSource\"), &lambdaDataSourceProps{\n\tapi: graphqlApi,\n\tlambdaFunction: function_,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\tserviceRole: role,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\nimport { aws_lambda as lambda } from 'aws-cdk-lib';\n\ndeclare const function_: lambda.Function;\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\nconst lambdaDataSource = new appsync_alpha.LambdaDataSource(this, 'MyLambdaDataSource', {\n  api: graphqlApi,\n  lambdaFunction: function_,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.LambdaDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "@aws-cdk/aws-appsync-alpha.LambdaDataSource",
        "@aws-cdk/aws-appsync-alpha.LambdaDataSourceProps",
        "aws-cdk-lib.aws_iam.IRole",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\nimport { aws_lambda as lambda } from 'aws-cdk-lib';\n\ndeclare const function_: lambda.Function;\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lambdaDataSource = new appsync_alpha.LambdaDataSource(this, 'MyLambdaDataSource', {\n  api: graphqlApi,\n  lambdaFunction: function_,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 1,
        "257": 2,
        "258": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "01d8efe3fbb19bfe76466f0415f1e271d0e0afbeb5f722e27fecceb41c02edb6"
    },
    "d472918d8951b01c9fd9df55ee5f3064c2de410b96d31fdeb145f8eb26af968e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\nfrom aws_cdk import aws_iam as iam\nfrom aws_cdk import aws_lambda as lambda_\n\n# function_: lambda.Function\n# graphql_api: appsync_alpha.GraphqlApi\n# role: iam.Role\n\nlambda_data_source_props = appsync_alpha.LambdaDataSourceProps(\n    api=graphql_api,\n    lambda_function=function_,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\",\n    service_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.Lambda;\n\nFunction function_;\nGraphqlApi graphqlApi;\nRole role;\n\nLambdaDataSourceProps lambdaDataSourceProps = new LambdaDataSourceProps {\n    Api = graphqlApi,\n    LambdaFunction = function_,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\",\n    ServiceRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.lambda.*;\n\nFunction function_;\nGraphqlApi graphqlApi;\nRole role;\n\nLambdaDataSourceProps lambdaDataSourceProps = LambdaDataSourceProps.builder()\n        .api(graphqlApi)\n        .lambdaFunction(function_)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .serviceRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar function_ function\nvar graphqlApi graphqlApi\nvar role role\n\nlambdaDataSourceProps := &lambdaDataSourceProps{\n\tapi: graphqlApi,\n\tlambdaFunction: function_,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\tserviceRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\nimport { aws_lambda as lambda } from 'aws-cdk-lib';\n\ndeclare const function_: lambda.Function;\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\nconst lambdaDataSourceProps: appsync_alpha.LambdaDataSourceProps = {\n  api: graphqlApi,\n  lambdaFunction: function_,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.LambdaDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "@aws-cdk/aws-appsync-alpha.LambdaDataSourceProps",
        "aws-cdk-lib.aws_iam.IRole",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\nimport { aws_lambda as lambda } from 'aws-cdk-lib';\n\ndeclare const function_: lambda.Function;\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lambdaDataSourceProps: appsync_alpha.LambdaDataSourceProps = {\n  api: graphqlApi,\n  lambdaFunction: function_,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 3,
        "153": 4,
        "169": 4,
        "193": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 1,
        "257": 2,
        "258": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "8c726e7acab860caf45ecbf9c4a23795bab50832dabd1aa52dc3b2679049ec4e"
    },
    "8068aee4fd6be4445429b5f851c9043e957272898fd810d6b656fbd27afd65ff": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\nfrom aws_cdk import aws_iam as iam\n\n# role: iam.Role\n\nlog_config = appsync_alpha.LogConfig(\n    exclude_verbose_content=False,\n    field_log_level=appsync_alpha.FieldLogLevel.NONE,\n    role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\nusing Amazon.CDK.AWS.IAM;\n\nRole role;\n\nLogConfig logConfig = new LogConfig {\n    ExcludeVerboseContent = false,\n    FieldLogLevel = FieldLogLevel.NONE,\n    Role = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\nimport software.amazon.awscdk.services.iam.*;\n\nRole role;\n\nLogConfig logConfig = LogConfig.builder()\n        .excludeVerboseContent(false)\n        .fieldLogLevel(FieldLogLevel.NONE)\n        .role(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar role role\n\nlogConfig := &logConfig{\n\texcludeVerboseContent: jsii.Boolean(false),\n\tfieldLogLevel: appsync_alpha.fieldLogLevel_NONE,\n\trole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const role: iam.Role;\nconst logConfig: appsync_alpha.LogConfig = {\n  excludeVerboseContent: false,\n  fieldLogLevel: appsync_alpha.FieldLogLevel.NONE,\n  role: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.LogConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.FieldLogLevel",
        "@aws-cdk/aws-appsync-alpha.FieldLogLevel#NONE",
        "@aws-cdk/aws-appsync-alpha.LogConfig",
        "aws-cdk-lib.aws_iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst logConfig: appsync_alpha.LogConfig = {\n  excludeVerboseContent: false,\n  fieldLogLevel: appsync_alpha.FieldLogLevel.NONE,\n  role: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "91": 1,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "040859030bc076f701dc2ca738e67e352afd110614dbbeb9cb9077b793809bab"
    },
    "7edefb803ba2c10b3e57220b8d48064208cc38a754317985c9edcf6e294689d5": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\ninfo = appsync.ObjectType(\"Info\",\n    definition={\n        \"node\": appsync.ResolvableField(\n            return_type=appsync.GraphqlType.string(),\n            args={\n                \"id\": appsync.GraphqlType.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = new ObjectType(\"Info\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"node\", new ResolvableField(new ResolvableFieldOptions {\n            ReturnType = GraphqlType.String(),\n            Args = new Dictionary<string, GraphqlType> {\n                { \"id\", GraphqlType.String() }\n            },\n            DataSource = api.AddNoneDataSource(\"none\"),\n            RequestMappingTemplate = dummyRequest,\n            ResponseMappingTemplate = dummyResponse\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = ObjectType.Builder.create(\"Info\")\n        .definition(Map.of(\n                \"node\", ResolvableField.Builder.create()\n                        .returnType(GraphqlType.string())\n                        .args(Map.of(\n                                \"id\", GraphqlType.string()))\n                        .dataSource(api.addNoneDataSource(\"none\"))\n                        .requestMappingTemplate(dummyRequest)\n                        .responseMappingTemplate(dummyResponse)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\ninfo := appsync.NewObjectType(jsii.String(\"Info\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"node\": appsync.NewResolvableField(&ResolvableFieldOptions{\n\t\t\t\"returnType\": appsync.GraphqlType.string(),\n\t\t\t\"args\": map[string]GraphqlType{\n\t\t\t\t\"id\": appsync.GraphqlType.string(),\n\t\t\t},\n\t\t\t\"dataSource\": api.addNoneDataSource(jsii.String(\"none\")),\n\t\t\t\"requestMappingTemplate\": dummyRequest,\n\t\t\t\"responseMappingTemplate\": dummyResponse,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions",
        "@aws-cdk/aws-appsync-alpha.ResolvableField",
        "@aws-cdk/aws-appsync-alpha.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "9d0ed6ed08d6634c741d3b9ed64d5beb46adcc25efed35c6a28cf5b4b14e8925"
    },
    "fd483b2e04a895498d31e7f3908141a64b483c8959fde3eea603d5359794bb81": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\n# graphql_api: appsync_alpha.GraphqlApi\n\nnone_data_source = appsync_alpha.NoneDataSource(self, \"MyNoneDataSource\",\n    api=graphql_api,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nGraphqlApi graphqlApi;\n\nNoneDataSource noneDataSource = new NoneDataSource(this, \"MyNoneDataSource\", new NoneDataSourceProps {\n    Api = graphqlApi,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nGraphqlApi graphqlApi;\n\nNoneDataSource noneDataSource = NoneDataSource.Builder.create(this, \"MyNoneDataSource\")\n        .api(graphqlApi)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\nvar graphqlApi graphqlApi\n\nnoneDataSource := appsync_alpha.NewNoneDataSource(this, jsii.String(\"MyNoneDataSource\"), &noneDataSourceProps{\n\tapi: graphqlApi,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\nconst noneDataSource = new appsync_alpha.NoneDataSource(this, 'MyNoneDataSource', {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.NoneDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "@aws-cdk/aws-appsync-alpha.NoneDataSource",
        "@aws-cdk/aws-appsync-alpha.NoneDataSourceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst noneDataSource = new appsync_alpha.NoneDataSource(this, 'MyNoneDataSource', {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "3c9dbe84fc45f22aea0f70f7c00896875afee5ed12a46349630e5f75c7a73ab4"
    },
    "06125a3529eb39f30b20470df4e7de798b669757dd86d99fb2936bdcd4fdd7e9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\n# graphql_api: appsync_alpha.GraphqlApi\n\nnone_data_source_props = appsync_alpha.NoneDataSourceProps(\n    api=graphql_api,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nGraphqlApi graphqlApi;\n\nNoneDataSourceProps noneDataSourceProps = new NoneDataSourceProps {\n    Api = graphqlApi,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nGraphqlApi graphqlApi;\n\nNoneDataSourceProps noneDataSourceProps = NoneDataSourceProps.builder()\n        .api(graphqlApi)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\nvar graphqlApi graphqlApi\n\nnoneDataSourceProps := &noneDataSourceProps{\n\tapi: graphqlApi,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\nconst noneDataSourceProps: appsync_alpha.NoneDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.NoneDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "@aws-cdk/aws-appsync-alpha.NoneDataSourceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst noneDataSourceProps: appsync_alpha.NoneDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4778b7797c851c8cf263d13a2785d2e3e2f2e89f7e52cf7878e9df576bb448b4"
    },
    "34a530b32d60ba5ff7c40945a80e105437079e322b6615b91c868eb321e56a23": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\ninfo = appsync.ObjectType(\"Info\",\n    definition={\n        \"node\": appsync.ResolvableField(\n            return_type=appsync.GraphqlType.string(),\n            args={\n                \"id\": appsync.GraphqlType.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = new ObjectType(\"Info\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"node\", new ResolvableField(new ResolvableFieldOptions {\n            ReturnType = GraphqlType.String(),\n            Args = new Dictionary<string, GraphqlType> {\n                { \"id\", GraphqlType.String() }\n            },\n            DataSource = api.AddNoneDataSource(\"none\"),\n            RequestMappingTemplate = dummyRequest,\n            ResponseMappingTemplate = dummyResponse\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = ObjectType.Builder.create(\"Info\")\n        .definition(Map.of(\n                \"node\", ResolvableField.Builder.create()\n                        .returnType(GraphqlType.string())\n                        .args(Map.of(\n                                \"id\", GraphqlType.string()))\n                        .dataSource(api.addNoneDataSource(\"none\"))\n                        .requestMappingTemplate(dummyRequest)\n                        .responseMappingTemplate(dummyResponse)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\ninfo := appsync.NewObjectType(jsii.String(\"Info\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"node\": appsync.NewResolvableField(&ResolvableFieldOptions{\n\t\t\t\"returnType\": appsync.GraphqlType.string(),\n\t\t\t\"args\": map[string]GraphqlType{\n\t\t\t\t\"id\": appsync.GraphqlType.string(),\n\t\t\t},\n\t\t\t\"dataSource\": api.addNoneDataSource(jsii.String(\"none\")),\n\t\t\t\"requestMappingTemplate\": dummyRequest,\n\t\t\t\"responseMappingTemplate\": dummyResponse,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.ObjectType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions",
        "@aws-cdk/aws-appsync-alpha.ResolvableField",
        "@aws-cdk/aws-appsync-alpha.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "9d0ed6ed08d6634c741d3b9ed64d5beb46adcc25efed35c6a28cf5b4b14e8925"
    },
    "6da5c8e449bc02a22f93e27eba79232b3c628977f260353fa9403f3c03a9d570": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\ninfo = appsync.ObjectType(\"Info\",\n    definition={\n        \"node\": appsync.ResolvableField(\n            return_type=appsync.GraphqlType.string(),\n            args={\n                \"id\": appsync.GraphqlType.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = new ObjectType(\"Info\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"node\", new ResolvableField(new ResolvableFieldOptions {\n            ReturnType = GraphqlType.String(),\n            Args = new Dictionary<string, GraphqlType> {\n                { \"id\", GraphqlType.String() }\n            },\n            DataSource = api.AddNoneDataSource(\"none\"),\n            RequestMappingTemplate = dummyRequest,\n            ResponseMappingTemplate = dummyResponse\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = ObjectType.Builder.create(\"Info\")\n        .definition(Map.of(\n                \"node\", ResolvableField.Builder.create()\n                        .returnType(GraphqlType.string())\n                        .args(Map.of(\n                                \"id\", GraphqlType.string()))\n                        .dataSource(api.addNoneDataSource(\"none\"))\n                        .requestMappingTemplate(dummyRequest)\n                        .responseMappingTemplate(dummyResponse)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\ninfo := appsync.NewObjectType(jsii.String(\"Info\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"node\": appsync.NewResolvableField(&ResolvableFieldOptions{\n\t\t\t\"returnType\": appsync.GraphqlType.string(),\n\t\t\t\"args\": map[string]GraphqlType{\n\t\t\t\t\"id\": appsync.GraphqlType.string(),\n\t\t\t},\n\t\t\t\"dataSource\": api.addNoneDataSource(jsii.String(\"none\")),\n\t\t\t\"requestMappingTemplate\": dummyRequest,\n\t\t\t\"responseMappingTemplate\": dummyResponse,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions",
        "@aws-cdk/aws-appsync-alpha.ResolvableField",
        "@aws-cdk/aws-appsync-alpha.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "9d0ed6ed08d6634c741d3b9ed64d5beb46adcc25efed35c6a28cf5b4b14e8925"
    },
    "c533c2347e0abd33393ff11e69a902d7718b64e84aa59634062682480a997078": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\nopen_id_connect_config = appsync_alpha.OpenIdConnectConfig(\n    oidc_provider=\"oidcProvider\",\n\n    # the properties below are optional\n    client_id=\"clientId\",\n    token_expiry_from_auth=123,\n    token_expiry_from_issue=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nOpenIdConnectConfig openIdConnectConfig = new OpenIdConnectConfig {\n    OidcProvider = \"oidcProvider\",\n\n    // the properties below are optional\n    ClientId = \"clientId\",\n    TokenExpiryFromAuth = 123,\n    TokenExpiryFromIssue = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nOpenIdConnectConfig openIdConnectConfig = OpenIdConnectConfig.builder()\n        .oidcProvider(\"oidcProvider\")\n\n        // the properties below are optional\n        .clientId(\"clientId\")\n        .tokenExpiryFromAuth(123)\n        .tokenExpiryFromIssue(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\nopenIdConnectConfig := &openIdConnectConfig{\n\toidcProvider: jsii.String(\"oidcProvider\"),\n\n\t// the properties below are optional\n\tclientId: jsii.String(\"clientId\"),\n\ttokenExpiryFromAuth: jsii.Number(123),\n\ttokenExpiryFromIssue: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nconst openIdConnectConfig: appsync_alpha.OpenIdConnectConfig = {\n  oidcProvider: 'oidcProvider',\n\n  // the properties below are optional\n  clientId: 'clientId',\n  tokenExpiryFromAuth: 123,\n  tokenExpiryFromIssue: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.OpenIdConnectConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.OpenIdConnectConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst openIdConnectConfig: appsync_alpha.OpenIdConnectConfig = {\n  oidcProvider: 'oidcProvider',\n\n  // the properties below are optional\n  clientId: 'clientId',\n  tokenExpiryFromAuth: 123,\n  tokenExpiryFromIssue: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "e5952e369cf0a0af3991c603ac33e859df47364d8acd06454c56ba165afe526a"
    },
    "1423e628f9e4b75c16c9dfa9f0fd86d94dfc096b8eb289282d30a228ec25bb8d": {
      "translations": {
        "python": {
          "source": "-\"ABCD|CDEF\"",
          "version": "2"
        },
        "csharp": {
          "source": "-\"ABCD|CDEF\";",
          "version": "1"
        },
        "java": {
          "source": "-\"ABCD|CDEF\";",
          "version": "1"
        },
        "go": {
          "source": "-\"ABCD|CDEF\"",
          "version": "1"
        },
        "$": {
          "source": "- 'ABCD|CDEF' // where ABCD and CDEF are two different clientId",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-appsync-alpha.OpenIdConnectConfig",
          "memberName": "clientId"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n- 'ABCD|CDEF'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "207": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "346567fb20fcaeb6c98b5ab60ccf964c79c352b9f300a867b484469a3926ca8c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_opensearchservice as opensearch\n\n# api: appsync.GraphqlApi\n\n\nuser = iam.User(self, \"User\")\ndomain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_2,\n    removal_policy=RemovalPolicy.DESTROY,\n    fine_grained_access_control=opensearch.AdvancedSecurityOptions(master_user_arn=user.user_arn),\n    encryption_at_rest=opensearch.EncryptionAtRestOptions(enabled=True),\n    node_to_node_encryption=True,\n    enforce_https=True\n)\nds = api.add_open_search_data_source(\"ds\", domain)\n\nds.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getTests\",\n    request_mapping_template=appsync.MappingTemplate.from_string(JSON.stringify({\n        \"version\": \"2017-02-28\",\n        \"operation\": \"GET\",\n        \"path\": \"/id/post/_search\",\n        \"params\": {\n            \"headers\": {},\n            \"query_string\": {},\n            \"body\": {\"from\": 0, \"size\": 50}\n        }\n    })),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"[\n            #foreach($entry in $context.result.hits.hits)\n            #if( $velocityCount > 1 ) , #end\n            $utils.toJson($entry.get(\"_source\"))\n            #end\n          ]\"\"\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.OpenSearchService;\n\nGraphqlApi api;\n\n\nUser user = new User(this, \"User\");\nDomain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_2,\n    RemovalPolicy = RemovalPolicy.DESTROY,\n    FineGrainedAccessControl = new AdvancedSecurityOptions { MasterUserArn = user.UserArn },\n    EncryptionAtRest = new EncryptionAtRestOptions { Enabled = true },\n    NodeToNodeEncryption = true,\n    EnforceHttps = true\n});\nOpenSearchDataSource ds = api.AddOpenSearchDataSource(\"ds\", domain);\n\nds.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getTests\",\n    RequestMappingTemplate = MappingTemplate.FromString(JSON.Stringify(new Dictionary<string, object> {\n        { \"version\", \"2017-02-28\" },\n        { \"operation\", \"GET\" },\n        { \"path\", \"/id/post/_search\" },\n        { \"params\", new Struct {\n            Headers = new Struct { },\n            QueryString = new Struct { },\n            Body = new Struct { From = 0, Size = 50 }\n        } }\n    })),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"[\n        #foreach($entry in $context.result.hits.hits)\n        #if( $velocityCount > 1 ) , #end\n        $utils.toJson($entry.get(\"\"_source\"\"))\n        #end\n      ]\")\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.opensearchservice.*;\n\nGraphqlApi api;\n\n\nUser user = new User(this, \"User\");\nDomain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_2)\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .fineGrainedAccessControl(AdvancedSecurityOptions.builder().masterUserArn(user.getUserArn()).build())\n        .encryptionAtRest(EncryptionAtRestOptions.builder().enabled(true).build())\n        .nodeToNodeEncryption(true)\n        .enforceHttps(true)\n        .build();\nOpenSearchDataSource ds = api.addOpenSearchDataSource(\"ds\", domain);\n\nds.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getTests\")\n        .requestMappingTemplate(MappingTemplate.fromString(JSON.stringify(Map.of(\n                \"version\", \"2017-02-28\",\n                \"operation\", \"GET\",\n                \"path\", \"/id/post/_search\",\n                \"params\", Map.of(\n                        \"headers\", Map.of(),\n                        \"queryString\", Map.of(),\n                        \"body\", Map.of(\"from\", 0, \"size\", 50))))))\n        .responseMappingTemplate(MappingTemplate.fromString(\"[\\n    #foreach($entry in $context.result.hits.hits)\\n    #if( $velocityCount > 1 ) , #end\\n    $utils.toJson($entry.get(\\\"_source\\\"))\\n    #end\\n  ]\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import opensearch \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar api graphqlApi\n\n\nuser := iam.NewUser(this, jsii.String(\"User\"))\ndomain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_2(),\n\tremovalPolicy: awscdk.RemovalPolicy_DESTROY,\n\tfineGrainedAccessControl: &advancedSecurityOptions{\n\t\tmasterUserArn: user.userArn,\n\t},\n\tencryptionAtRest: &encryptionAtRestOptions{\n\t\tenabled: jsii.Boolean(true),\n\t},\n\tnodeToNodeEncryption: jsii.Boolean(true),\n\tenforceHttps: jsii.Boolean(true),\n})\nds := api.addOpenSearchDataSource(jsii.String(\"ds\"), domain)\n\nds.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getTests\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromString(jSON.stringify(map[string]interface{}{\n\t\t\"version\": jsii.String(\"2017-02-28\"),\n\t\t\"operation\": jsii.String(\"GET\"),\n\t\t\"path\": jsii.String(\"/id/post/_search\"),\n\t\t\"params\": map[string]map[string]interface{}{\n\t\t\t\"headers\": map[string]interface{}{\n\t\t\t},\n\t\t\t\"queryString\": map[string]interface{}{\n\t\t\t},\n\t\t\t\"body\": map[string]*f64{\n\t\t\t\t\"from\": jsii.Number(0),\n\t\t\t\t\"size\": jsii.Number(50),\n\t\t\t},\n\t\t},\n\t})),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"[\\n    #foreach($entry in $context.result.hits.hits)\\n    #if( $velocityCount > 1 ) , #end\\n    $utils.toJson($entry.get(\\\"_source\\\"))\\n    #end\\n  ]\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as opensearch from 'aws-cdk-lib/aws-opensearchservice';\n\nconst user = new iam.User(this, 'User');\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_2,\n  removalPolicy: RemovalPolicy.DESTROY,\n  fineGrainedAccessControl: { masterUserArn: user.userArn },\n  encryptionAtRest: { enabled: true },\n  nodeToNodeEncryption: true,\n  enforceHttps: true,\n});\n\ndeclare const api: appsync.GraphqlApi;\nconst ds = api.addOpenSearchDataSource('ds', domain);\n\nds.createResolver({\n  typeName: 'Query',\n  fieldName: 'getTests',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(JSON.stringify({\n    version: '2017-02-28',\n    operation: 'GET',\n    path: '/id/post/_search',\n    params: {\n      headers: {},\n      queryString: {},\n      body: { from: 0, size: 50 },\n    },\n  })),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`[\n    #foreach($entry in $context.result.hits.hits)\n    #if( $velocityCount > 1 ) , #end\n    $utils.toJson($entry.get(\"_source\"))\n    #end\n  ]`),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.OpenSearchDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addOpenSearchDataSource",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#fromString",
        "@aws-cdk/aws-appsync-alpha.OpenSearchDataSource",
        "aws-cdk-lib.RemovalPolicy",
        "aws-cdk-lib.RemovalPolicy#DESTROY",
        "aws-cdk-lib.aws_iam.User",
        "aws-cdk-lib.aws_iam.User#userArn",
        "aws-cdk-lib.aws_opensearchservice.AdvancedSecurityOptions",
        "aws-cdk-lib.aws_opensearchservice.Domain",
        "aws-cdk-lib.aws_opensearchservice.DomainProps",
        "aws-cdk-lib.aws_opensearchservice.EncryptionAtRestOptions",
        "aws-cdk-lib.aws_opensearchservice.EngineVersion",
        "aws-cdk-lib.aws_opensearchservice.EngineVersion#OPENSEARCH_1_2",
        "aws-cdk-lib.aws_opensearchservice.IDomain"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as opensearch from 'aws-cdk-lib/aws-opensearchservice';\n\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst user = new iam.User(this, 'User');\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_2,\n  removalPolicy: RemovalPolicy.DESTROY,\n  fineGrainedAccessControl: { masterUserArn: user.userArn },\n  encryptionAtRest: { enabled: true },\n  nodeToNodeEncryption: true,\n  enforceHttps: true,\n});\nconst ds = api.addOpenSearchDataSource('ds', domain);\n\nds.createResolver({\n  typeName: 'Query',\n  fieldName: 'getTests',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(JSON.stringify({\n    version: '2017-02-28',\n    operation: 'GET',\n    path: '/id/post/_search',\n    params: {\n      headers: {},\n      queryString: {},\n      body: { from: 0, size: 50 },\n    },\n  })),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`[\n    #foreach($entry in $context.result.hits.hits)\n    #if( $velocityCount > 1 ) , #end\n    $utils.toJson($entry.get(\"_source\"))\n    #end\n  ]`),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "14": 1,
        "75": 52,
        "104": 2,
        "106": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 9,
        "194": 13,
        "196": 5,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "845dc32cdfebc5c08cc3738025aa4242bc83cc8b4570ae6cae71511396125056"
    },
    "752c6468a9b96de357122ac00c748bf8788d73378774165218f9743d1982ffb0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\nfrom aws_cdk import aws_iam as iam\nfrom aws_cdk import aws_opensearchservice as opensearchservice\n\n# domain: opensearchservice.Domain\n# graphql_api: appsync_alpha.GraphqlApi\n# role: iam.Role\n\nopen_search_data_source_props = appsync_alpha.OpenSearchDataSourceProps(\n    api=graphql_api,\n    domain=domain,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\",\n    service_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.OpenSearchService;\n\nDomain domain;\nGraphqlApi graphqlApi;\nRole role;\n\nOpenSearchDataSourceProps openSearchDataSourceProps = new OpenSearchDataSourceProps {\n    Api = graphqlApi,\n    Domain = domain,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\",\n    ServiceRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nDomain domain;\nGraphqlApi graphqlApi;\nRole role;\n\nOpenSearchDataSourceProps openSearchDataSourceProps = OpenSearchDataSourceProps.builder()\n        .api(graphqlApi)\n        .domain(domain)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .serviceRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar domain domain\nvar graphqlApi graphqlApi\nvar role role\n\nopenSearchDataSourceProps := &openSearchDataSourceProps{\n\tapi: graphqlApi,\n\tdomain: domain,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\tserviceRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\nimport { aws_opensearchservice as opensearchservice } from 'aws-cdk-lib';\n\ndeclare const domain: opensearchservice.Domain;\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\nconst openSearchDataSourceProps: appsync_alpha.OpenSearchDataSourceProps = {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.OpenSearchDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "@aws-cdk/aws-appsync-alpha.OpenSearchDataSourceProps",
        "aws-cdk-lib.aws_iam.IRole",
        "aws-cdk-lib.aws_opensearchservice.IDomain"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\nimport { aws_opensearchservice as opensearchservice } from 'aws-cdk-lib';\n\ndeclare const domain: opensearchservice.Domain;\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst openSearchDataSourceProps: appsync_alpha.OpenSearchDataSourceProps = {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 3,
        "153": 4,
        "169": 4,
        "193": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 1,
        "257": 2,
        "258": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "b51f895238e14ec47a19b4127c63499b8b84e878c9b42cad092e3b0e18634d44"
    },
    "f281b60d248c5884da1f5ef7148e1385a2055df0ee81f2479a5caa8429ea4683": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\n# assign: appsync_alpha.Assign\n\npartition_key = appsync_alpha.PartitionKey(assign)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nAssign assign;\n\nPartitionKey partitionKey = new PartitionKey(assign);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nAssign assign;\n\nPartitionKey partitionKey = new PartitionKey(assign);",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\nvar assign assign\n\npartitionKey := appsync_alpha.NewPartitionKey(assign)",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const assign: appsync_alpha.Assign;\nconst partitionKey = new appsync_alpha.PartitionKey(assign);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.PartitionKey"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.Assign",
        "@aws-cdk/aws-appsync-alpha.PartitionKey"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const assign: appsync_alpha.Assign;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst partitionKey = new appsync_alpha.PartitionKey(assign);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "ae4b0d8267a490539d6dd958c25cc68756223a7ad6692eaeda48a6f59a1ea989"
    },
    "38775780eed78073df0b32d8ece769fc4bd34db574535174d6f32fd2e75f8932": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\npartition_key_step = appsync_alpha.PartitionKeyStep(\"key\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nPartitionKeyStep partitionKeyStep = new PartitionKeyStep(\"key\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nPartitionKeyStep partitionKeyStep = new PartitionKeyStep(\"key\");",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\npartitionKeyStep := appsync_alpha.NewPartitionKeyStep(jsii.String(\"key\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nconst partitionKeyStep = new appsync_alpha.PartitionKeyStep('key');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.PartitionKeyStep"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.PartitionKeyStep"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst partitionKeyStep = new appsync_alpha.PartitionKeyStep('key');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "12be6dcf06519056d3d72824721a787b5142791d4613002e166aafc2ed9d1a25"
    },
    "7b6d73ac105e52b01e89e13fe832294fe6890ef5f16d655a19eafe681a20618c": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.IAM\n        )\n    ),\n    xray_enabled=True\n)\n\ndemo_table = dynamodb.Table(self, \"DemoTable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\ndemo_dS = api.add_dynamo_db_data_source(\"demoDataSource\", demo_table)\n\n# Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemo_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemos\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_list()\n)\n\n# Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemo_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemo\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_put_item(\n        appsync.PrimaryKey.partition(\"id\").auto(),\n        appsync.Values.projecting(\"input\")),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_item()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.IAM\n        }\n    },\n    XrayEnabled = true\n});\n\nTable demoTable = new Table(this, \"DemoTable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nDynamoDbDataSource demoDS = api.AddDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemos\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbScanTable(),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultList()\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemo\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbPutItem(PrimaryKey.Partition(\"id\").Auto(), Values.Projecting(\"input\")),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultItem()\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.IAM)\n                        .build())\n                .build())\n        .xrayEnabled(true)\n        .build();\n\nTable demoTable = Table.Builder.create(this, \"DemoTable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nDynamoDbDataSource demoDS = api.addDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemos\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbScanTable())\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultList())\n        .build());\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemo\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbPutItem(PrimaryKey.partition(\"id\").auto(), Values.projecting(\"input\")))\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultItem())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_IAM,\n\t\t},\n\t},\n\txrayEnabled: jsii.Boolean(true),\n})\n\ndemoTable := dynamodb.NewTable(this, jsii.String(\"DemoTable\"), &tableProps{\n\tpartitionKey: &attribute{\n\t\tname: jsii.String(\"id\"),\n\t\ttype: dynamodb.attributeType_STRING,\n\t},\n})\n\ndemoDS := api.addDynamoDbDataSource(jsii.String(\"demoDataSource\"), demoTable)\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemos\"),\n\trequestMappingTemplate: appsync.mappingTemplate.dynamoDbScanTable(),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultList(),\n})\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemo\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.dynamoDbPutItem(appsync.primaryKey.partition(jsii.String(\"id\")).auto(), appsync.values.projecting(jsii.String(\"input\"))),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultItem(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.PrimaryKey"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AttributeValues",
        "@aws-cdk/aws-appsync-alpha.AuthorizationConfig",
        "@aws-cdk/aws-appsync-alpha.AuthorizationMode",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType#IAM",
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.DynamoDbDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addDynamoDbDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbPutItem",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbResultItem",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbResultList",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbScanTable",
        "@aws-cdk/aws-appsync-alpha.PartitionKeyStep#auto",
        "@aws-cdk/aws-appsync-alpha.PrimaryKey",
        "@aws-cdk/aws-appsync-alpha.PrimaryKey#partition",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#fromAsset",
        "@aws-cdk/aws-appsync-alpha.Values",
        "@aws-cdk/aws-appsync-alpha.Values#projecting",
        "aws-cdk-lib.aws_dynamodb.Attribute",
        "aws-cdk-lib.aws_dynamodb.AttributeType",
        "aws-cdk-lib.aws_dynamodb.AttributeType#STRING",
        "aws-cdk-lib.aws_dynamodb.ITable",
        "aws-cdk-lib.aws_dynamodb.Table",
        "aws-cdk-lib.aws_dynamodb.TableProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 62,
        "104": 2,
        "106": 1,
        "193": 7,
        "194": 25,
        "196": 12,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 17
      },
      "fqnsFingerprint": "563eecc13c99aa91a45a545fe26df40840ff9624e4522ff810b536395a46c4fb"
    },
    "0fb3ba52e364caff1d6e67b6771e6798246bb0436ebc2e2189488c92a903655e": {
      "translations": {
        "python": {
          "source": "# Build a data source for AppSync to access the database.\n# api: appsync.GraphqlApi\n# Create username and password secret for DB Cluster\nsecret = rds.DatabaseSecret(self, \"AuroraSecret\",\n    username=\"clusteradmin\"\n)\n\n# The VPC to place the cluster in\nvpc = ec2.Vpc(self, \"AuroraVpc\")\n\n# Create the serverless cluster, provide all values needed to customise the database.\ncluster = rds.ServerlessCluster(self, \"AuroraCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,\n    credentials={\"username\": \"clusteradmin\"},\n    cluster_identifier=\"db-endpoint-test\",\n    default_database_name=\"demos\"\n)\nrds_dS = api.add_rds_data_source(\"rds\", cluster, secret, \"demos\")\n\n# Set up a resolver for an RDS query.\nrds_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemosRds\",\n    request_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"SELECT * FROM demos\"\n            ]\n          }\n          \"\"\"),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n            $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n          \"\"\")\n)\n\n# Set up a resolver for an RDS mutation.\nrds_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemoRds\",\n    request_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"INSERT INTO demos VALUES (:id, :version)\",\n              \"SELECT * WHERE id = :id\"\n            ],\n            \"variableMap\": {\n              \":id\": $util.toJson($util.autoId()),\n              \":version\": $util.toJson($ctx.args.version)\n            }\n          }\n          \"\"\"),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n            $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n          \"\"\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Build a data source for AppSync to access the database.\nGraphqlApi api;\n// Create username and password secret for DB Cluster\nDatabaseSecret secret = new DatabaseSecret(this, \"AuroraSecret\", new DatabaseSecretProps {\n    Username = \"clusteradmin\"\n});\n\n// The VPC to place the cluster in\nVpc vpc = new Vpc(this, \"AuroraVpc\");\n\n// Create the serverless cluster, provide all values needed to customise the database.\nServerlessCluster cluster = new ServerlessCluster(this, \"AuroraCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,\n    Credentials = new Dictionary<string, string> { { \"username\", \"clusteradmin\" } },\n    ClusterIdentifier = \"db-endpoint-test\",\n    DefaultDatabaseName = \"demos\"\n});\nRdsDataSource rdsDS = api.AddRdsDataSource(\"rds\", cluster, secret, \"demos\");\n\n// Set up a resolver for an RDS query.\nrdsDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemosRds\",\n    RequestMappingTemplate = MappingTemplate.FromString(@\"\n      {\n        \"\"version\"\": \"\"2018-05-29\"\",\n        \"\"statements\"\": [\n          \"\"SELECT * FROM demos\"\"\n        ]\n      }\n      \"),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"\n        $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n      \")\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemoRds\",\n    RequestMappingTemplate = MappingTemplate.FromString(@\"\n      {\n        \"\"version\"\": \"\"2018-05-29\"\",\n        \"\"statements\"\": [\n          \"\"INSERT INTO demos VALUES (:id, :version)\"\",\n          \"\"SELECT * WHERE id = :id\"\"\n        ],\n        \"\"variableMap\"\": {\n          \"\":id\"\": $util.toJson($util.autoId()),\n          \"\":version\"\": $util.toJson($ctx.args.version)\n        }\n      }\n      \"),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"\n        $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n      \")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Build a data source for AppSync to access the database.\nGraphqlApi api;\n// Create username and password secret for DB Cluster\nDatabaseSecret secret = DatabaseSecret.Builder.create(this, \"AuroraSecret\")\n        .username(\"clusteradmin\")\n        .build();\n\n// The VPC to place the cluster in\nVpc vpc = new Vpc(this, \"AuroraVpc\");\n\n// Create the serverless cluster, provide all values needed to customise the database.\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AuroraCluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc)\n        .credentials(Map.of(\"username\", \"clusteradmin\"))\n        .clusterIdentifier(\"db-endpoint-test\")\n        .defaultDatabaseName(\"demos\")\n        .build();\nRdsDataSource rdsDS = api.addRdsDataSource(\"rds\", cluster, secret, \"demos\");\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemosRds\")\n        .requestMappingTemplate(MappingTemplate.fromString(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"SELECT * FROM demos\\\"\\n    ]\\n  }\\n  \"))\n        .responseMappingTemplate(MappingTemplate.fromString(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\\n  \"))\n        .build());\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemoRds\")\n        .requestMappingTemplate(MappingTemplate.fromString(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"INSERT INTO demos VALUES (:id, :version)\\\",\\n      \\\"SELECT * WHERE id = :id\\\"\\n    ],\\n    \\\"variableMap\\\": {\\n      \\\":id\\\": $util.toJson($util.autoId()),\\n      \\\":version\\\": $util.toJson($ctx.args.version)\\n    }\\n  }\\n  \"))\n        .responseMappingTemplate(MappingTemplate.fromString(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\\n  \"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Build a data source for AppSync to access the database.\nvar api graphqlApi\n// Create username and password secret for DB Cluster\nsecret := rds.NewDatabaseSecret(this, jsii.String(\"AuroraSecret\"), &databaseSecretProps{\n\tusername: jsii.String(\"clusteradmin\"),\n})\n\n// The VPC to place the cluster in\nvpc := ec2.NewVpc(this, jsii.String(\"AuroraVpc\"))\n\n// Create the serverless cluster, provide all values needed to customise the database.\ncluster := rds.NewServerlessCluster(this, jsii.String(\"AuroraCluster\"), &serverlessClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA_MYSQL(),\n\tvpc: vpc,\n\tcredentials: map[string]*string{\n\t\t\"username\": jsii.String(\"clusteradmin\"),\n\t},\n\tclusterIdentifier: jsii.String(\"db-endpoint-test\"),\n\tdefaultDatabaseName: jsii.String(\"demos\"),\n})\nrdsDS := api.addRdsDataSource(jsii.String(\"rds\"), cluster, secret, jsii.String(\"demos\"))\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemosRds\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromString(jsii.String(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"SELECT * FROM demos\\\"\\n    ]\\n  }\\n  \")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\\n  \")),\n})\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemoRds\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"INSERT INTO demos VALUES (:id, :version)\\\",\\n      \\\"SELECT * WHERE id = :id\\\"\\n    ],\\n    \\\"variableMap\\\": {\\n      \\\":id\\\": $util.toJson($util.autoId()),\\n      \\\":version\\\": $util.toJson($ctx.args.version)\\n    }\\n  }\\n  \")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\\n  \")),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.RdsDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addRdsDataSource",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#fromString",
        "@aws-cdk/aws-appsync-alpha.RdsDataSource",
        "aws-cdk-lib.aws_ec2.IVpc",
        "aws-cdk-lib.aws_ec2.Vpc",
        "aws-cdk-lib.aws_rds.Credentials",
        "aws-cdk-lib.aws_rds.DatabaseClusterEngine",
        "aws-cdk-lib.aws_rds.DatabaseClusterEngine#AURORA_MYSQL",
        "aws-cdk-lib.aws_rds.DatabaseSecret",
        "aws-cdk-lib.aws_rds.DatabaseSecretProps",
        "aws-cdk-lib.aws_rds.IClusterEngine",
        "aws-cdk-lib.aws_rds.IServerlessCluster",
        "aws-cdk-lib.aws_rds.ServerlessCluster",
        "aws-cdk-lib.aws_rds.ServerlessClusterProps",
        "aws-cdk-lib.aws_secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "14": 4,
        "75": 51,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 16,
        "196": 7,
        "197": 3,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 14,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "89466e1bb62772a15b619a7e5a81b4ec9020998d9f2875f824877b836b2bb906"
    },
    "ac0e53dc324eae3fa81d984881de29624d0f96763f865403e54cd8a0f4ac7b8b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\nfrom aws_cdk import aws_iam as iam\nfrom aws_cdk import aws_rds as rds\nfrom aws_cdk import aws_secretsmanager as secretsmanager\n\n# graphql_api: appsync_alpha.GraphqlApi\n# role: iam.Role\n# secret: secretsmanager.Secret\n# serverless_cluster: rds.ServerlessCluster\n\nrds_data_source_props = appsync_alpha.RdsDataSourceProps(\n    api=graphql_api,\n    secret_store=secret,\n    serverless_cluster=serverless_cluster,\n\n    # the properties below are optional\n    database_name=\"databaseName\",\n    description=\"description\",\n    name=\"name\",\n    service_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.RDS;\nusing Amazon.CDK.AWS.SecretsManager;\n\nGraphqlApi graphqlApi;\nRole role;\nSecret secret;\nServerlessCluster serverlessCluster;\n\nRdsDataSourceProps rdsDataSourceProps = new RdsDataSourceProps {\n    Api = graphqlApi,\n    SecretStore = secret,\n    ServerlessCluster = serverlessCluster,\n\n    // the properties below are optional\n    DatabaseName = \"databaseName\",\n    Description = \"description\",\n    Name = \"name\",\n    ServiceRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.rds.*;\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nGraphqlApi graphqlApi;\nRole role;\nSecret secret;\nServerlessCluster serverlessCluster;\n\nRdsDataSourceProps rdsDataSourceProps = RdsDataSourceProps.builder()\n        .api(graphqlApi)\n        .secretStore(secret)\n        .serverlessCluster(serverlessCluster)\n\n        // the properties below are optional\n        .databaseName(\"databaseName\")\n        .description(\"description\")\n        .name(\"name\")\n        .serviceRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar graphqlApi graphqlApi\nvar role role\nvar secret secret\nvar serverlessCluster serverlessCluster\n\nrdsDataSourceProps := &rdsDataSourceProps{\n\tapi: graphqlApi,\n\tsecretStore: secret,\n\tserverlessCluster: serverlessCluster,\n\n\t// the properties below are optional\n\tdatabaseName: jsii.String(\"databaseName\"),\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\tserviceRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\nimport { aws_rds as rds } from 'aws-cdk-lib';\nimport { aws_secretsmanager as secretsmanager } from 'aws-cdk-lib';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\ndeclare const secret: secretsmanager.Secret;\ndeclare const serverlessCluster: rds.ServerlessCluster;\nconst rdsDataSourceProps: appsync_alpha.RdsDataSourceProps = {\n  api: graphqlApi,\n  secretStore: secret,\n  serverlessCluster: serverlessCluster,\n\n  // the properties below are optional\n  databaseName: 'databaseName',\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.RdsDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "@aws-cdk/aws-appsync-alpha.RdsDataSourceProps",
        "aws-cdk-lib.aws_iam.IRole",
        "aws-cdk-lib.aws_rds.IServerlessCluster",
        "aws-cdk-lib.aws_secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\nimport { aws_rds as rds } from 'aws-cdk-lib';\nimport { aws_secretsmanager as secretsmanager } from 'aws-cdk-lib';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\ndeclare const secret: secretsmanager.Secret;\ndeclare const serverlessCluster: rds.ServerlessCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst rdsDataSourceProps: appsync_alpha.RdsDataSourceProps = {\n  api: graphqlApi,\n  secretStore: secret,\n  serverlessCluster: serverlessCluster,\n\n  // the properties below are optional\n  databaseName: 'databaseName',\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 33,
        "130": 4,
        "153": 5,
        "169": 5,
        "193": 1,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 4,
        "255": 4,
        "256": 1,
        "257": 3,
        "258": 3,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "33d0b38e3cd5c5e0506fd812b16e9aee1e000a63ac5f7ae011c34091f57d74d1"
    },
    "6b7fddf10a41a2f9b0d01423508ee625c73d81526d5b275673e9e24d9a791101": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\ninfo = appsync.ObjectType(\"Info\",\n    definition={\n        \"node\": appsync.ResolvableField(\n            return_type=appsync.GraphqlType.string(),\n            args={\n                \"id\": appsync.GraphqlType.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = new ObjectType(\"Info\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"node\", new ResolvableField(new ResolvableFieldOptions {\n            ReturnType = GraphqlType.String(),\n            Args = new Dictionary<string, GraphqlType> {\n                { \"id\", GraphqlType.String() }\n            },\n            DataSource = api.AddNoneDataSource(\"none\"),\n            RequestMappingTemplate = dummyRequest,\n            ResponseMappingTemplate = dummyResponse\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = ObjectType.Builder.create(\"Info\")\n        .definition(Map.of(\n                \"node\", ResolvableField.Builder.create()\n                        .returnType(GraphqlType.string())\n                        .args(Map.of(\n                                \"id\", GraphqlType.string()))\n                        .dataSource(api.addNoneDataSource(\"none\"))\n                        .requestMappingTemplate(dummyRequest)\n                        .responseMappingTemplate(dummyResponse)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\ninfo := appsync.NewObjectType(jsii.String(\"Info\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"node\": appsync.NewResolvableField(&ResolvableFieldOptions{\n\t\t\t\"returnType\": appsync.GraphqlType.string(),\n\t\t\t\"args\": map[string]GraphqlType{\n\t\t\t\t\"id\": appsync.GraphqlType.string(),\n\t\t\t},\n\t\t\t\"dataSource\": api.addNoneDataSource(jsii.String(\"none\")),\n\t\t\t\"requestMappingTemplate\": dummyRequest,\n\t\t\t\"responseMappingTemplate\": dummyResponse,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.ResolvableField"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions",
        "@aws-cdk/aws-appsync-alpha.ResolvableField",
        "@aws-cdk/aws-appsync-alpha.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "9d0ed6ed08d6634c741d3b9ed64d5beb46adcc25efed35c6a28cf5b4b14e8925"
    },
    "64eb737c1c20f7467300cc6659edf0a57883750108755ff43844728cbf804518": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# film_node: appsync.ObjectType\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\n\nstring = appsync.GraphqlType.string()\nint = appsync.GraphqlType.int()\napi.add_mutation(\"addFilm\", appsync.ResolvableField(\n    return_type=film_node.attribute(),\n    args={\"name\": string, \"film_number\": int},\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=dummy_request,\n    response_mapping_template=dummy_response\n))",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nObjectType filmNode;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\n\nGraphqlType string = GraphqlType.String();\nGraphqlType int = GraphqlType.Int();\napi.AddMutation(\"addFilm\", new ResolvableField(new ResolvableFieldOptions {\n    ReturnType = filmNode.Attribute(),\n    Args = new Dictionary<string, GraphqlType> { { \"name\", string }, { \"film_number\", int } },\n    DataSource = api.AddNoneDataSource(\"none\"),\n    RequestMappingTemplate = dummyRequest,\n    ResponseMappingTemplate = dummyResponse\n}));",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nObjectType filmNode;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\n\nGraphqlType string = GraphqlType.string();\nGraphqlType int = GraphqlType.int();\napi.addMutation(\"addFilm\", ResolvableField.Builder.create()\n        .returnType(filmNode.attribute())\n        .args(Map.of(\"name\", string, \"film_number\", int))\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .requestMappingTemplate(dummyRequest)\n        .responseMappingTemplate(dummyResponse)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar filmNode objectType\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\n\nstring := appsync.graphqlType.string()\nint := appsync.graphqlType.int()\napi.addMutation(jsii.String(\"addFilm\"), appsync.NewResolvableField(&resolvableFieldOptions{\n\treturnType: filmNode.attribute(),\n\targs: map[string]*graphqlType{\n\t\t\"name\": string,\n\t\t\"film_number\": int,\n\t},\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\trequestMappingTemplate: dummyRequest,\n\tresponseMappingTemplate: dummyResponse,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const filmNode: appsync.ObjectType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst string = appsync.GraphqlType.string();\nconst int = appsync.GraphqlType.int();\napi.addMutation('addFilm', new appsync.ResolvableField({\n  returnType: filmNode.attribute(),\n  args: { name: string, film_number: int },\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.ResolvableFieldOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addMutation",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#int",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.InterfaceType#attribute",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.ResolvableField",
        "@aws-cdk/aws-appsync-alpha.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const filmNode: appsync.ObjectType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst string = appsync.GraphqlType.string();\nconst int = appsync.GraphqlType.int();\napi.addMutation('addFilm', new appsync.ResolvableField({\n  returnType: filmNode.attribute(),\n  args: { name: string, film_number: int },\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 39,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 2,
        "194": 8,
        "196": 5,
        "197": 1,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "db5d0a89fc62fad2a90770cc51f938e4482d1ea7dc0ff49017fe313a9a828015"
    },
    "0f4175e32cb46b9a96022ff13c3b033be0b9da5315ab50c1b6bb07950365c587": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# appsync_function: appsync.AppsyncFunction\n\n\npipeline_resolver = appsync.Resolver(self, \"pipeline\",\n    api=api,\n    data_source=api.add_none_data_source(\"none\"),\n    type_name=\"typeName\",\n    field_name=\"fieldName\",\n    request_mapping_template=appsync.MappingTemplate.from_file(\"beforeRequest.vtl\"),\n    pipeline_config=[appsync_function],\n    response_mapping_template=appsync.MappingTemplate.from_file(\"afterResponse.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nAppsyncFunction appsyncFunction;\n\n\nResolver pipelineResolver = new Resolver(this, \"pipeline\", new ResolverProps {\n    Api = api,\n    DataSource = api.AddNoneDataSource(\"none\"),\n    TypeName = \"typeName\",\n    FieldName = \"fieldName\",\n    RequestMappingTemplate = MappingTemplate.FromFile(\"beforeRequest.vtl\"),\n    PipelineConfig = new [] { appsyncFunction },\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"afterResponse.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nAppsyncFunction appsyncFunction;\n\n\nResolver pipelineResolver = Resolver.Builder.create(this, \"pipeline\")\n        .api(api)\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .typeName(\"typeName\")\n        .fieldName(\"fieldName\")\n        .requestMappingTemplate(MappingTemplate.fromFile(\"beforeRequest.vtl\"))\n        .pipelineConfig(List.of(appsyncFunction))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"afterResponse.vtl\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar appsyncFunction appsyncFunction\n\n\npipelineResolver := appsync.NewResolver(this, jsii.String(\"pipeline\"), &resolverProps{\n\tapi: api,\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\ttypeName: jsii.String(\"typeName\"),\n\tfieldName: jsii.String(\"fieldName\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"beforeRequest.vtl\")),\n\tpipelineConfig: []iAppsyncFunction{\n\t\tappsyncFunction,\n\t},\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"afterResponse.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.Resolver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#fromFile",
        "@aws-cdk/aws-appsync-alpha.Resolver",
        "@aws-cdk/aws-appsync-alpha.ResolverProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "63229bbef60d66ac9693bc909265b8d27422346016a72ea385680a5ee629a344"
    },
    "be0a35c47796725caefe5180d6175eeab4c336355300e55520395f1126dcced7": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# appsync_function: appsync.AppsyncFunction\n\n\npipeline_resolver = appsync.Resolver(self, \"pipeline\",\n    api=api,\n    data_source=api.add_none_data_source(\"none\"),\n    type_name=\"typeName\",\n    field_name=\"fieldName\",\n    request_mapping_template=appsync.MappingTemplate.from_file(\"beforeRequest.vtl\"),\n    pipeline_config=[appsync_function],\n    response_mapping_template=appsync.MappingTemplate.from_file(\"afterResponse.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nAppsyncFunction appsyncFunction;\n\n\nResolver pipelineResolver = new Resolver(this, \"pipeline\", new ResolverProps {\n    Api = api,\n    DataSource = api.AddNoneDataSource(\"none\"),\n    TypeName = \"typeName\",\n    FieldName = \"fieldName\",\n    RequestMappingTemplate = MappingTemplate.FromFile(\"beforeRequest.vtl\"),\n    PipelineConfig = new [] { appsyncFunction },\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"afterResponse.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nAppsyncFunction appsyncFunction;\n\n\nResolver pipelineResolver = Resolver.Builder.create(this, \"pipeline\")\n        .api(api)\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .typeName(\"typeName\")\n        .fieldName(\"fieldName\")\n        .requestMappingTemplate(MappingTemplate.fromFile(\"beforeRequest.vtl\"))\n        .pipelineConfig(List.of(appsyncFunction))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"afterResponse.vtl\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar appsyncFunction appsyncFunction\n\n\npipelineResolver := appsync.NewResolver(this, jsii.String(\"pipeline\"), &resolverProps{\n\tapi: api,\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\ttypeName: jsii.String(\"typeName\"),\n\tfieldName: jsii.String(\"fieldName\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"beforeRequest.vtl\")),\n\tpipelineConfig: []iAppsyncFunction{\n\t\tappsyncFunction,\n\t},\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"afterResponse.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.ResolverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#fromFile",
        "@aws-cdk/aws-appsync-alpha.Resolver",
        "@aws-cdk/aws-appsync-alpha.ResolverProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "63229bbef60d66ac9693bc909265b8d27422346016a72ea385680a5ee629a344"
    },
    "5d50ec14164f46ce228a6059daff50216a085ddf08a7d37494fc3389129da761": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"api\",\n    name=\"api\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\"))\n)\n\nhttp_ds = api.add_http_data_source(\"ds\", \"https://states.amazonaws.com\",\n    name=\"httpDsWithStepF\",\n    description=\"from appsync to StepFunctions Workflow\",\n    authorization_config=appsync.AwsIamConfig(\n        signing_region=\"us-east-1\",\n        signing_service_name=\"states\"\n    )\n)\n\nhttp_ds.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"callStepFunction\",\n    request_mapping_template=appsync.MappingTemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.MappingTemplate.from_file(\"response.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"api\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\"))\n});\n\nHttpDataSource httpDs = api.AddHttpDataSource(\"ds\", \"https://states.amazonaws.com\", new HttpDataSourceOptions {\n    Name = \"httpDsWithStepF\",\n    Description = \"from appsync to StepFunctions Workflow\",\n    AuthorizationConfig = new AwsIamConfig {\n        SigningRegion = \"us-east-1\",\n        SigningServiceName = \"states\"\n    }\n});\n\nhttpDs.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"callStepFunction\",\n    RequestMappingTemplate = MappingTemplate.FromFile(\"request.vtl\"),\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"response.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"api\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .build();\n\nHttpDataSource httpDs = api.addHttpDataSource(\"ds\", \"https://states.amazonaws.com\", HttpDataSourceOptions.builder()\n        .name(\"httpDsWithStepF\")\n        .description(\"from appsync to StepFunctions Workflow\")\n        .authorizationConfig(AwsIamConfig.builder()\n                .signingRegion(\"us-east-1\")\n                .signingServiceName(\"states\")\n                .build())\n        .build());\n\nhttpDs.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"callStepFunction\")\n        .requestMappingTemplate(MappingTemplate.fromFile(\"request.vtl\"))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"response.vtl\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"api\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n})\n\nhttpDs := api.addHttpDataSource(jsii.String(\"ds\"), jsii.String(\"https://states.amazonaws.com\"), &httpDataSourceOptions{\n\tname: jsii.String(\"httpDsWithStepF\"),\n\tdescription: jsii.String(\"from appsync to StepFunctions Workflow\"),\n\tauthorizationConfig: &awsIamConfig{\n\t\tsigningRegion: jsii.String(\"us-east-1\"),\n\t\tsigningServiceName: jsii.String(\"states\"),\n\t},\n})\n\nhttpDs.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"callStepFunction\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"request.vtl\")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"response.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.Schema"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AwsIamConfig",
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addHttpDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.HttpDataSource",
        "@aws-cdk/aws-appsync-alpha.HttpDataSourceOptions",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#fromFile",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#fromAsset"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 31,
        "104": 1,
        "193": 4,
        "194": 10,
        "196": 6,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 11
      },
      "fqnsFingerprint": "20efa7a761ac702721b484a19d8244c2182fde058d288c16f10874d98f13a154"
    },
    "40a6a6c9020058d76387473002a16d4aa3a6bd088be701df2aac31ea3c2837fb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\nschema_options = appsync_alpha.SchemaOptions(\n    file_path=\"filePath\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nSchemaOptions schemaOptions = new SchemaOptions {\n    FilePath = \"filePath\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nSchemaOptions schemaOptions = SchemaOptions.builder()\n        .filePath(\"filePath\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\nschemaOptions := &schemaOptions{\n\tfilePath: jsii.String(\"filePath\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nconst schemaOptions: appsync_alpha.SchemaOptions = {\n  filePath: 'filePath',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.SchemaOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.SchemaOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst schemaOptions: appsync_alpha.SchemaOptions = {\n  filePath: 'filePath',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "882d994ca6e8a0266a7c58cd8218b1d1b80041039404bc9d61d3b0d9810bb584"
    },
    "c0b5d0642b50c63a381753d45ca194b8d0258e2dd85c1d78aed824594d54938d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\n\n# assign: appsync_alpha.Assign\n\nsort_key_step = appsync_alpha.SortKeyStep(assign, \"skey\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\n\nAssign assign;\n\nSortKeyStep sortKeyStep = new SortKeyStep(assign, \"skey\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\n\nAssign assign;\n\nSortKeyStep sortKeyStep = new SortKeyStep(assign, \"skey\");",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\n\nvar assign assign\n\nsortKeyStep := appsync_alpha.NewSortKeyStep(assign, jsii.String(\"skey\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const assign: appsync_alpha.Assign;\nconst sortKeyStep = new appsync_alpha.SortKeyStep(assign, 'skey');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.SortKeyStep"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.Assign",
        "@aws-cdk/aws-appsync-alpha.SortKeyStep"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const assign: appsync_alpha.Assign;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sortKeyStep = new appsync_alpha.SortKeyStep(assign, 'skey');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "7888bfa6c892c5aeece5fac670742f87a099369be2413d155a6279ece2a526de"
    },
    "1dd7748d04c3f7c0af021c45d2aa8d1e886280dfca2714f4255481fcfd631c07": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\nstring = appsync.GraphqlType.string()\nhuman = appsync.ObjectType(\"Human\", definition={\"name\": string})\ndroid = appsync.ObjectType(\"Droid\", definition={\"name\": string})\nstarship = appsync.ObjectType(\"Starship\", definition={\"name\": string})\nsearch = appsync.UnionType(\"Search\",\n    definition=[human, droid, starship]\n)\napi.add_type(search)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\nGraphqlType string = GraphqlType.String();\nObjectType human = new ObjectType(\"Human\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nObjectType droid = new ObjectType(\"Droid\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nObjectType starship = new ObjectType(\"Starship\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nUnionType search = new UnionType(\"Search\", new UnionTypeOptions {\n    Definition = new [] { human, droid, starship }\n});\napi.AddType(search);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\nGraphqlType string = GraphqlType.string();\nObjectType human = ObjectType.Builder.create(\"Human\").definition(Map.of(\"name\", string)).build();\nObjectType droid = ObjectType.Builder.create(\"Droid\").definition(Map.of(\"name\", string)).build();\nObjectType starship = ObjectType.Builder.create(\"Starship\").definition(Map.of(\"name\", string)).build();\nUnionType search = UnionType.Builder.create(\"Search\")\n        .definition(List.of(human, droid, starship))\n        .build();\napi.addType(search);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\nstring := appsync.graphqlType.string()\nhuman := appsync.NewObjectType(jsii.String(\"Human\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"name\": string,\n\t},\n})\ndroid := appsync.NewObjectType(jsii.String(\"Droid\"), &objectTypeOptions{\n\tdefinition: map[string]*iField{\n\t\t\"name\": string,\n\t},\n})\nstarship := appsync.NewObjectType(jsii.String(\"Starship\"), &objectTypeOptions{\n\tdefinition: map[string]*iField{\n\t\t\"name\": string,\n\t},\n})\nsearch := appsync.NewUnionType(jsii.String(\"Search\"), &unionTypeOptions{\n\tdefinition: []iIntermediateType{\n\t\thuman,\n\t\tdroid,\n\t\tstarship,\n\t},\n})\napi.addType(search)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\nconst string = appsync.GraphqlType.string();\nconst human = new appsync.ObjectType('Human', { definition: { name: string } });\nconst droid = new appsync.ObjectType('Droid', { definition: { name: string } });\nconst starship = new appsync.ObjectType('Starship', { definition: { name: string } }););\nconst search = new appsync.UnionType('Search', {\n  definition: [ human, droid, starship ],\n});\napi.addType(search);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.UnionType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.IIntermediateType",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions",
        "@aws-cdk/aws-appsync-alpha.UnionType",
        "@aws-cdk/aws-appsync-alpha.UnionTypeOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst string = appsync.GraphqlType.string();\nconst human = new appsync.ObjectType('Human', { definition: { name: string } });\nconst droid = new appsync.ObjectType('Droid', { definition: { name: string } });\nconst starship = new appsync.ObjectType('Starship', { definition: { name: string } });;\nconst search = new appsync.UnionType('Search', {\n  definition: [ human, droid, starship ],\n});\napi.addType(search);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 35,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 7,
        "194": 7,
        "196": 2,
        "197": 4,
        "224": 1,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "0f7ebed99fe9a27e90e43516285fcc1254e5500cf6462d6f1db033ba5a9ecb39"
    },
    "68aaf3254f920d52381669a5495e56cdb9940046476f637f9ad69833fea6cd63": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\nstring = appsync.GraphqlType.string()\nhuman = appsync.ObjectType(\"Human\", definition={\"name\": string})\ndroid = appsync.ObjectType(\"Droid\", definition={\"name\": string})\nstarship = appsync.ObjectType(\"Starship\", definition={\"name\": string})\nsearch = appsync.UnionType(\"Search\",\n    definition=[human, droid, starship]\n)\napi.add_type(search)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\nGraphqlType string = GraphqlType.String();\nObjectType human = new ObjectType(\"Human\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nObjectType droid = new ObjectType(\"Droid\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nObjectType starship = new ObjectType(\"Starship\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nUnionType search = new UnionType(\"Search\", new UnionTypeOptions {\n    Definition = new [] { human, droid, starship }\n});\napi.AddType(search);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\nGraphqlType string = GraphqlType.string();\nObjectType human = ObjectType.Builder.create(\"Human\").definition(Map.of(\"name\", string)).build();\nObjectType droid = ObjectType.Builder.create(\"Droid\").definition(Map.of(\"name\", string)).build();\nObjectType starship = ObjectType.Builder.create(\"Starship\").definition(Map.of(\"name\", string)).build();\nUnionType search = UnionType.Builder.create(\"Search\")\n        .definition(List.of(human, droid, starship))\n        .build();\napi.addType(search);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\nstring := appsync.graphqlType.string()\nhuman := appsync.NewObjectType(jsii.String(\"Human\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"name\": string,\n\t},\n})\ndroid := appsync.NewObjectType(jsii.String(\"Droid\"), &objectTypeOptions{\n\tdefinition: map[string]*iField{\n\t\t\"name\": string,\n\t},\n})\nstarship := appsync.NewObjectType(jsii.String(\"Starship\"), &objectTypeOptions{\n\tdefinition: map[string]*iField{\n\t\t\"name\": string,\n\t},\n})\nsearch := appsync.NewUnionType(jsii.String(\"Search\"), &unionTypeOptions{\n\tdefinition: []iIntermediateType{\n\t\thuman,\n\t\tdroid,\n\t\tstarship,\n\t},\n})\napi.addType(search)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\nconst string = appsync.GraphqlType.string();\nconst human = new appsync.ObjectType('Human', { definition: { name: string } });\nconst droid = new appsync.ObjectType('Droid', { definition: { name: string } });\nconst starship = new appsync.ObjectType('Starship', { definition: { name: string } }););\nconst search = new appsync.UnionType('Search', {\n  definition: [ human, droid, starship ],\n});\napi.addType(search);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.UnionTypeOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.GraphqlApi#addType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType",
        "@aws-cdk/aws-appsync-alpha.GraphqlType#string",
        "@aws-cdk/aws-appsync-alpha.IField",
        "@aws-cdk/aws-appsync-alpha.IIntermediateType",
        "@aws-cdk/aws-appsync-alpha.ObjectType",
        "@aws-cdk/aws-appsync-alpha.ObjectTypeOptions",
        "@aws-cdk/aws-appsync-alpha.UnionType",
        "@aws-cdk/aws-appsync-alpha.UnionTypeOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst string = appsync.GraphqlType.string();\nconst human = new appsync.ObjectType('Human', { definition: { name: string } });\nconst droid = new appsync.ObjectType('Droid', { definition: { name: string } });\nconst starship = new appsync.ObjectType('Starship', { definition: { name: string } });;\nconst search = new appsync.UnionType('Search', {\n  definition: [ human, droid, starship ],\n});\napi.addType(search);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 35,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 7,
        "194": 7,
        "196": 2,
        "197": 4,
        "224": 1,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "0f7ebed99fe9a27e90e43516285fcc1254e5500cf6462d6f1db033ba5a9ecb39"
    },
    "a0309bc0e89566552a70dbd1f7241f27885755c8883ca28f352b3649db4915ee": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync_alpha as appsync_alpha\nfrom aws_cdk import aws_cognito as cognito\n\n# user_pool: cognito.UserPool\n\nuser_pool_config = appsync_alpha.UserPoolConfig(\n    user_pool=user_pool,\n\n    # the properties below are optional\n    app_id_client_regex=\"appIdClientRegex\",\n    default_action=appsync_alpha.UserPoolDefaultAction.ALLOW\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync.Alpha;\nusing Amazon.CDK.AWS.Cognito;\n\nUserPool userPool;\n\nUserPoolConfig userPoolConfig = new UserPoolConfig {\n    UserPool = userPool,\n\n    // the properties below are optional\n    AppIdClientRegex = \"appIdClientRegex\",\n    DefaultAction = UserPoolDefaultAction.ALLOW\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.alpha.*;\nimport software.amazon.awscdk.services.cognito.*;\n\nUserPool userPool;\n\nUserPoolConfig userPoolConfig = UserPoolConfig.builder()\n        .userPool(userPool)\n\n        // the properties below are optional\n        .appIdClientRegex(\"appIdClientRegex\")\n        .defaultAction(UserPoolDefaultAction.ALLOW)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync_alpha \"github.com/aws/aws-cdk-go/awscdkappsyncalpha\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar userPool userPool\n\nuserPoolConfig := &userPoolConfig{\n\tuserPool: userPool,\n\n\t// the properties below are optional\n\tappIdClientRegex: jsii.String(\"appIdClientRegex\"),\n\tdefaultAction: appsync_alpha.userPoolDefaultAction_ALLOW,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_cognito as cognito } from 'aws-cdk-lib';\n\ndeclare const userPool: cognito.UserPool;\nconst userPoolConfig: appsync_alpha.UserPoolConfig = {\n  userPool: userPool,\n\n  // the properties below are optional\n  appIdClientRegex: 'appIdClientRegex',\n  defaultAction: appsync_alpha.UserPoolDefaultAction.ALLOW,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.UserPoolConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.UserPoolConfig",
        "@aws-cdk/aws-appsync-alpha.UserPoolDefaultAction",
        "@aws-cdk/aws-appsync-alpha.UserPoolDefaultAction#ALLOW",
        "aws-cdk-lib.aws_cognito.IUserPool"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_cognito as cognito } from 'aws-cdk-lib';\n\ndeclare const userPool: cognito.UserPool;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst userPoolConfig: appsync_alpha.UserPoolConfig = {\n  userPool: userPool,\n\n  // the properties below are optional\n  appIdClientRegex: 'appIdClientRegex',\n  defaultAction: appsync_alpha.UserPoolDefaultAction.ALLOW,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 16,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d5ef36878532c440fa420ae3af74f103783a6113a1958ed5bcb5ce652e207d48"
    },
    "8854d0d5fc116087863ccadcaebf06888aa77d25684555ab7c91773ce17e3ade": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.IAM\n        )\n    ),\n    xray_enabled=True\n)\n\ndemo_table = dynamodb.Table(self, \"DemoTable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\ndemo_dS = api.add_dynamo_db_data_source(\"demoDataSource\", demo_table)\n\n# Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemo_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemos\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_list()\n)\n\n# Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemo_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemo\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_put_item(\n        appsync.PrimaryKey.partition(\"id\").auto(),\n        appsync.Values.projecting(\"input\")),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_item()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.IAM\n        }\n    },\n    XrayEnabled = true\n});\n\nTable demoTable = new Table(this, \"DemoTable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nDynamoDbDataSource demoDS = api.AddDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemos\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbScanTable(),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultList()\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemo\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbPutItem(PrimaryKey.Partition(\"id\").Auto(), Values.Projecting(\"input\")),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultItem()\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.IAM)\n                        .build())\n                .build())\n        .xrayEnabled(true)\n        .build();\n\nTable demoTable = Table.Builder.create(this, \"DemoTable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nDynamoDbDataSource demoDS = api.addDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemos\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbScanTable())\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultList())\n        .build());\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemo\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbPutItem(PrimaryKey.partition(\"id\").auto(), Values.projecting(\"input\")))\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultItem())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_IAM,\n\t\t},\n\t},\n\txrayEnabled: jsii.Boolean(true),\n})\n\ndemoTable := dynamodb.NewTable(this, jsii.String(\"DemoTable\"), &tableProps{\n\tpartitionKey: &attribute{\n\t\tname: jsii.String(\"id\"),\n\t\ttype: dynamodb.attributeType_STRING,\n\t},\n})\n\ndemoDS := api.addDynamoDbDataSource(jsii.String(\"demoDataSource\"), demoTable)\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemos\"),\n\trequestMappingTemplate: appsync.mappingTemplate.dynamoDbScanTable(),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultList(),\n})\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemo\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.dynamoDbPutItem(appsync.primaryKey.partition(jsii.String(\"id\")).auto(), appsync.values.projecting(jsii.String(\"input\"))),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultItem(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync-alpha.Values"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync-alpha.AttributeValues",
        "@aws-cdk/aws-appsync-alpha.AuthorizationConfig",
        "@aws-cdk/aws-appsync-alpha.AuthorizationMode",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType",
        "@aws-cdk/aws-appsync-alpha.AuthorizationType#IAM",
        "@aws-cdk/aws-appsync-alpha.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
        "@aws-cdk/aws-appsync-alpha.DynamoDbDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApi",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiBase#addDynamoDbDataSource",
        "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbPutItem",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbResultItem",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbResultList",
        "@aws-cdk/aws-appsync-alpha.MappingTemplate#dynamoDbScanTable",
        "@aws-cdk/aws-appsync-alpha.PartitionKeyStep#auto",
        "@aws-cdk/aws-appsync-alpha.PrimaryKey",
        "@aws-cdk/aws-appsync-alpha.PrimaryKey#partition",
        "@aws-cdk/aws-appsync-alpha.Schema",
        "@aws-cdk/aws-appsync-alpha.Schema#fromAsset",
        "@aws-cdk/aws-appsync-alpha.Values",
        "@aws-cdk/aws-appsync-alpha.Values#projecting",
        "aws-cdk-lib.aws_dynamodb.Attribute",
        "aws-cdk-lib.aws_dynamodb.AttributeType",
        "aws-cdk-lib.aws_dynamodb.AttributeType#STRING",
        "aws-cdk-lib.aws_dynamodb.ITable",
        "aws-cdk-lib.aws_dynamodb.Table",
        "aws-cdk-lib.aws_dynamodb.TableProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { RemovalPolicy, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport appsync = require('@aws-cdk/aws-appsync-alpha');\nimport ec2 = require('aws-cdk-lib/aws-ec2');\nimport dynamodb = require('aws-cdk-lib/aws-dynamodb');\nimport iam = require('aws-cdk-lib/aws-iam');\nimport rds = require('aws-cdk-lib/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 62,
        "104": 2,
        "106": 1,
        "193": 7,
        "194": 25,
        "196": 12,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 17
      },
      "fqnsFingerprint": "563eecc13c99aa91a45a545fe26df40840ff9624e4522ff810b536395a46c4fb"
    }
  }
}
