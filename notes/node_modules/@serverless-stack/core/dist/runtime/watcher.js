import { State } from "../state/index.js";
import chokidar from "chokidar";
import { Handler } from "./handler/index.js";
import { EventDelegate } from "../events.js";
import { uniq } from "remeda";
export class Watcher {
    constructor() {
        this.onChange = new EventDelegate();
    }
    reload(root) {
        const funcs = State.Function.read(root);
        const instructions = funcs.map((f) => [f, Handler.instructions(f)]);
        const paths = uniq(instructions.flatMap(([_, i]) => i.watcher.include));
        if (this.chokidar)
            this.chokidar.close();
        const ignored = ["**/node_modules/**", "**/.build/**", "**/.sst/**"];
        this.chokidar = chokidar.watch(paths, {
            persistent: true,
            ignoreInitial: true,
            followSymlinks: false,
            disableGlobbing: false,
            ignored,
            awaitWriteFinish: {
                pollInterval: 100,
                stabilityThreshold: 20,
            },
        });
        this.chokidar.on("change", (file) => {
            this.onChange.trigger({
                files: [file],
            });
        });
    }
}
