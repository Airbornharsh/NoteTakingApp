import { EventDelegate } from "../events.js";
declare type SuccessMessage = {
    type: "success";
    body: any;
};
declare type FailureMessage = {
    type: "failure";
    body: {
        errorMessage: string;
        errorType: string;
        stackTrace: any[];
    };
};
declare type RequestHandler = (message: any) => Promise<SuccessMessage | FailureMessage>;
declare type Message = {
    action: "server.clientRegistered";
    clientConnectionId: string;
} | {
    action: "server.clientDisconnectedDueToNewClient";
} | {
    action: "server.failedToSendResponseDueToStubDisconnected";
} | {
    action: "server.failedToSendResponseDueToUnknown";
} | {
    action: "register";
    body: string;
} | {
    action: "stub.lambdaRequest";
    [key: string]: any;
};
export declare class WS {
    private s3?;
    private socket?;
    private keepAlive?;
    private debugBucketName?;
    private handleRequest?;
    onMessage: EventDelegate<Message>;
    onRequest(cb: RequestHandler): void;
    start(region: string, debugEndpoint: string, debugBucketName: string): void;
    private handleMessage;
    stop(): void;
    private sendKeepAlive;
    private send;
}
export {};
