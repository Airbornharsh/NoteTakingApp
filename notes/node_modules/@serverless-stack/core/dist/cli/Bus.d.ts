import { Response } from "../runtime";
export interface Events {
    "function.requested": {
        localID: string;
        request: {
            event: any;
            context: any;
        };
    };
    "function.responded": {
        localID: string;
        request: {
            event: any;
            context: any;
        };
        response: Response;
    };
}
declare type EventTypes = keyof Events;
declare type EventPayload<Type extends EventTypes> = {
    type: Type;
    properties: Events[Type];
};
declare type Subscription = {
    type: EventTypes;
    cb: (payload: any) => void;
};
export declare type Bus = ReturnType<typeof createBus>;
export declare function createBus(): {
    publish<Type extends keyof Events>(type: Type, properties: Events[Type]): void;
    unsubscribe(sub: Subscription): void;
    subscribe<Type_1 extends keyof Events>(type: Type_1, cb: (payload: EventPayload<Type_1>) => void): Subscription;
};
export {};
