import { Construct } from "constructs";
import * as iam from "aws-cdk-lib/aws-iam";
import * as cognito from "aws-cdk-lib/aws-cognito";
import { SSTConstruct } from "./Construct.js";
import { Function as Fn, FunctionProps, FunctionDefinition } from "./Function.js";
import { Permissions } from "./util/permission.js";
export interface AuthUserPoolTriggers {
    createAuthChallenge?: FunctionDefinition;
    customEmailSender?: FunctionDefinition;
    customMessage?: FunctionDefinition;
    customSmsSender?: FunctionDefinition;
    defineAuthChallenge?: FunctionDefinition;
    postAuthentication?: FunctionDefinition;
    postConfirmation?: FunctionDefinition;
    preAuthentication?: FunctionDefinition;
    preSignUp?: FunctionDefinition;
    preTokenGeneration?: FunctionDefinition;
    userMigration?: FunctionDefinition;
    verifyAuthChallengeResponse?: FunctionDefinition;
}
export interface AuthAuth0Props {
    domain: string;
    clientId: string;
}
export interface AuthAmazonProps {
    appId: string;
}
export interface AuthAppleProps {
    servicesId: string;
}
export interface AuthFacebookProps {
    appId: string;
}
export interface AuthGoogleProps {
    clientId: string;
}
export interface AuthTwitterProps {
    consumerKey: string;
    consumerSecret: string;
}
export interface AuthCdkCfnIdentityPoolProps extends Omit<cognito.CfnIdentityPoolProps, "allowUnauthenticatedIdentities"> {
    allowUnauthenticatedIdentities?: boolean;
}
export interface AuthCognitoIdentityPoolFederationProps {
    auth0?: AuthAuth0Props;
    amazon?: AuthAmazonProps;
    apple?: AuthAppleProps;
    facebook?: AuthFacebookProps;
    google?: AuthGoogleProps;
    twitter?: AuthTwitterProps;
    cdk?: {
        cfnIdentityPool?: AuthCdkCfnIdentityPoolProps;
    };
}
export interface AuthProps {
    defaults?: {
        /**
         * The default function props to be applied to all the triggers in the UserPool. The `environment`, `permissions` and `layers` properties will be merged with per route definitions if they are defined.
         *
         * @example
         *
         * ```js
         * new Auth(stack, "Auth", {
         *   defaults: {
         *     function: {
         *       timeout: 20,
         *       environment: { topicName: topic.topicName },
         *       permissions: [topic],
         *     }
         *   },
         * });
         * ```
         */
        function?: FunctionProps;
    };
    /**
     * Configure the different ways a user can sign in to our application for our User Pool. For example, you might want a user to be able to sign in with their email or username. Or with their phone number.
     *
     * :::caution
     * You cannot change the login property once the User Pool has been created.
     * :::
     *
     * @default `["username"]`
     */
    login?: ("email" | "phone" | "username" | "preferredUsername")[];
    /**
     * Configure triggers for this User Pool
     * @default No triggers
     *
     * @example
     *
     * ```js
     * new Auth(stack, "Auth", {
     *   triggers: {
     *     preAuthentication: "src/preAuthentication.main",
     *     postAuthentication: "src/postAuthentication.main",
     *   },
     * });
     * ```
     */
    triggers?: AuthUserPoolTriggers;
    /**
     * Configure the Cognito Identity Pool and its authentication providers.
     * @default Identity Pool created with the User Pool as the authentication provider
     */
    identityPoolFederation?: boolean | AuthCognitoIdentityPoolFederationProps;
    cdk?: {
        /**
         * This allows you to override the default settings this construct uses internally to create the User Pool.
         */
        userPool?: cognito.UserPoolProps | cognito.IUserPool;
        /**
         * This allows you to override the default settings this construct uses internally to create the User Pool client.
         */
        userPoolClient?: cognito.UserPoolClientOptions | cognito.IUserPoolClient;
    };
}
/**
 * The `Auth` construct is a higher level CDK construct that makes it easy to configure a [Cognito User Pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html) and [Cognito Identity Pool](https://docs.aws.amazon.com/cognito/latest/developerguide/identity-pools.html). Also, allows setting up Auth0, Facebook, Google, Twitter, Apple, and Amazon as authentication providers.
 */
export declare class Auth extends Construct implements SSTConstruct {
    readonly cdk: {
        userPool: cognito.IUserPool;
        userPoolClient: cognito.IUserPoolClient;
        cfnIdentityPool?: cognito.CfnIdentityPool;
        authRole: iam.Role;
        unauthRole: iam.Role;
    };
    private functions;
    private permissionsAttachedForAllTriggers;
    private props;
    constructor(scope: Construct, id: string, props?: AuthProps);
    /**
     * The id of the internally created Cognito User Pool.
     */
    get userPoolId(): string;
    /**
     * The ARN of the internally created Cognito User Pool.
     */
    get userPoolArn(): string;
    /**
     * The id of the internally created Cognito User Pool client.
     */
    get userPoolClientId(): string;
    /**
     * The id of the internally created `IdentityPool` instance.
     */
    get cognitoIdentityPoolId(): string | undefined;
    attachPermissionsForAuthUsers(permissions: Permissions): void;
    attachPermissionsForUnauthUsers(permissions: Permissions): void;
    attachPermissionsForTriggers(permissions: Permissions): void;
    attachPermissionsForTrigger(triggerKey: keyof AuthUserPoolTriggers, permissions: Permissions): void;
    getFunction(triggerKey: keyof AuthUserPoolTriggers): Fn | undefined;
    getConstructMetadata(): {
        type: "Auth";
        data: {
            identityPoolId: string | undefined;
            userPoolId: string;
            triggers: {
                name: string;
                fn: {
                    node: string;
                    stack: string;
                } | undefined;
            }[];
        };
    };
    private createUserPool;
    private createUserPoolClient;
    private createIdentityPool;
    private addTriggers;
    private addTrigger;
    private createAuthRole;
    private createUnauthRole;
    private buildSignInAliases;
}
