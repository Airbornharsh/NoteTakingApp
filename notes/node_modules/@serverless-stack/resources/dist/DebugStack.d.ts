import { Construct } from "constructs";
import * as cdk from "aws-cdk-lib";
import * as dynamodb from "aws-cdk-lib/aws-dynamodb";
/**
 * Stack properties for the DebugStack.
 */
export interface DebugStackProps extends cdk.StackProps {
    /**
     * S3 bucket to store large websocket payloads.
     */
    payloadBucketArn?: string;
    /**
     * Lambda function props for WebSocket request handlers.
     */
    websocketHandlerRoleArn?: string;
    cdk?: {
        /**
         * Override the settings of the internally created DynamoDB table
         */
        table?: Omit<dynamodb.TableProps, "partitionKey" | "sortKey">;
    };
}
/**
 * The `DebugStack` construct is used internally to create the resources needed to power [Live Lambda Development](../live-lambda-development). Note that, the `DebugStack` construct should only be created inside the [`DebugApp`](DebugApp).
 *
 * It extends [`cdk.Stack`](https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.Stack.html). It automatically prefixes the stack names with the stage and app name to ensure that they can be deployed to multiple regions in the same AWS account. It also ensures that the stack uses the same AWS profile and region as the app.
 *
 * @example
 */
export declare class DebugStack extends cdk.Stack {
    readonly stage: string;
    private readonly api;
    private readonly table;
    private readonly bucket;
    constructor(scope: Construct, id: string, props?: DebugStackProps);
    private addApiRoute;
    private static checkForEnvInProps;
}
