/**
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * This module defines the Runtime client which is responsible for all HTTP
 * interactions with the Runtime layer.
 */
"use strict";
import { URL } from "url";
import inspector from "inspector";
import http from "http";
import { INVOKE_HEADER, } from "../Common/index.js";
import * as Errors from "../Errors/index.js";
const ERROR_TYPE_HEADER = "Lambda-Runtime-Function-Error-Type";
function userAgent() {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const version = "sst";
    return `aws-lambda-nodejs/${process.version}-${version}`;
}
/**
 * Objects of this class are responsible for all interactions with the Runtime
 * API.
 */
export default class RuntimeClient {
    constructor(hostnamePort, httpClient) {
        this.http = httpClient || http;
        this.useAlternativeClient =
            process.env["AWS_LAMBDA_NODEJS_USE_ALTERNATIVE_CLIENT_1"] === "true";
        this.userAgent = userAgent();
        const url = new URL("http://" + hostnamePort);
        this.hostname = url.hostname;
        this.port = parseInt(url.port, 10);
        this.path = url.pathname;
        this.agent = new this.http.Agent({
            keepAlive: inspector.url() === undefined,
            maxSockets: 1,
        });
    }
    /**
     * Complete and invocation with the provided response.
     * @param {Object} response
     *   An arbitrary object to convert to JSON and send back as as response.
     * @param {String} id
     *   The invocation ID.
     * @param {function()} callback
     *   The callback to run after the POST response ends
     */
    postInvocationResponse(response, id, callback) {
        this._post(`/2018-06-01/runtime/invocation/${id}/response`, response, {
            [INVOKE_HEADER.AWSRequestId]: id,
        }, callback);
    }
    /**
     * Post an initialization error to the Runtime API.
     * @param {Error} error
     * @param {function()} callback
     *   The callback to run after the POST response ends
     */
    postInitError(error, callback) {
        const response = Errors.toRuntimeResponse(error);
        this._post(`/2018-06-01/runtime/init/error`, response, { [ERROR_TYPE_HEADER]: response.errorType }, callback);
    }
    /**
     * Post an invocation error to the Runtime API
     * @param {Error} error
     * @param {String} id
     *   The invocation ID for the in-progress invocation.
     * @param {function()} callback
     *   The callback to run after the POST response ends
     */
    postInvocationError(error, id, callback) {
        const response = Errors.toRuntimeResponse(error);
        // const xrayString = XRayError.toFormatted(error);
        this._post(`/2018-06-01/runtime/invocation/${id}/error`, response, { [INVOKE_HEADER.AWSRequestId]: id }, callback);
    }
    /**
     * Get the next invocation.
     * @return {PromiseLike.<Object>}
     *   A promise which resolves to an invocation object that contains the body
     *   as json and the header array. e.g. {bodyJson, headers}
     */
    async nextInvocation() {
        const options = {
            hostname: this.hostname,
            port: this.port,
            path: this.path + "/2018-06-01/runtime/invocation/next",
            method: "GET",
            agent: this.agent,
            headers: {
                "User-Agent": this.userAgent,
            },
        };
        return new Promise((resolve, reject) => {
            const request = this.http.request(options, (response) => {
                let data = "";
                response
                    .setEncoding("utf-8")
                    .on("data", (chunk) => {
                    data += chunk;
                })
                    .on("end", () => {
                    resolve({
                        bodyJson: data,
                        headers: response.headers,
                    });
                });
            });
            request
                .on("error", (e) => {
                reject(e);
            })
                .end();
        });
    }
    /**
     * HTTP Post to a path.
     * @param {String} path
     * @param {Object} body
     *   The body is serialized into JSON before posting.
     * @param {Object} headers
     *   The http headers
     * @param {function()} callback
     *   The callback to run after the POST response ends
     */
    _post(path, body, headers, callback) {
        const bodyString = _trySerializeResponse(body);
        const options = {
            hostname: this.hostname,
            port: this.port,
            path: this.path + path,
            method: "POST",
            headers: Object.assign({
                "Content-Type": "application/json",
                "Content-Length": Buffer.from(bodyString).length,
            }, headers || {}),
            agent: this.agent,
        };
        const request = this.http.request(options, (response) => {
            response
                .on("end", () => {
                callback();
            })
                .on("error", (e) => {
                throw e;
            })
                // eslint-disable-next-line @typescript-eslint/no-empty-function
                .on("data", () => { });
        });
        request
            .on("error", (e) => {
            throw e;
        })
            .end(bodyString, "utf-8");
    }
}
/**
 * Attempt to serialize an object as json. Capture the failure if it occurs and
 * throw one that's known to be serializable.
 */
function _trySerializeResponse(body) {
    try {
        return JSON.stringify(body === undefined ? null : body);
    }
    catch (err) {
        throw new Error("Unable to stringify response body");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnVudGltZUNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9SdW50aW1lQ2xpZW50L1J1bnRpbWVDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0dBS0c7QUFFSCxZQUFZLENBQUM7QUFTYixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQzFCLE9BQU8sU0FBUyxNQUFNLFdBQVcsQ0FBQztBQUNsQyxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFFeEIsT0FBTyxFQUdMLGFBQWEsR0FDZCxNQUFNLG9CQUFvQixDQUFDO0FBQzVCLE9BQU8sS0FBSyxNQUFNLE1BQU0sb0JBQW9CLENBQUM7QUFFN0MsTUFBTSxpQkFBaUIsR0FBRyxvQ0FBb0MsQ0FBQztBQTBCL0QsU0FBUyxTQUFTO0lBQ2hCLDhEQUE4RDtJQUM5RCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFFdEIsT0FBTyxxQkFBcUIsT0FBTyxDQUFDLE9BQU8sSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUMzRCxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sT0FBTyxhQUFhO0lBV2hDLFlBQVksWUFBb0IsRUFBRSxVQUF1QjtRQUN2RCxJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsSUFBSSxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLG9CQUFvQjtZQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLDRDQUE0QyxDQUFDLEtBQUssTUFBTSxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxFQUFFLENBQUM7UUFFN0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFF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