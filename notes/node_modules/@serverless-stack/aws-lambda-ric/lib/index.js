/* eslint-disable no-console */
/**
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * This module is the bootstrap entrypoint. It establishes the top-level event
 * listeners and loads the user's code.
 */
"use strict";
import { isHandlerFunction } from "./Common/index.js";
import * as Errors from "./Errors/index.js";
import RuntimeClient from "./RuntimeClient/index.js";
import Runtime from "./Runtime/index.js";
import BeforeExitListener from "./Runtime/BeforeExitListener.js";
// import LogPatch from "./utils/LogPatch";
import * as UserFunction from "./utils/UserFunction.js";
export async function run(appRootOrHandler, handler = "") {
    if (!process.env.AWS_LAMBDA_RUNTIME_API) {
        throw new Error("Missing Runtime API Server configuration.");
    }
    const client = new RuntimeClient(process.env.AWS_LAMBDA_RUNTIME_API);
    const errorCallbacks = {
        uncaughtException: (error) => {
            client.postInitError(error, () => process.exit(129));
        },
        unhandledRejection: (error) => {
            client.postInitError(error, () => process.exit(128));
        },
    };
    process.on("uncaughtException", (error) => {
        errorCallbacks.uncaughtException(error);
        process.exit(129);
    });
    process.on("unhandledRejection", (reason, promise) => {
        const error = new Errors.UnhandledPromiseRejection(reason?.toString(), promise);
        errorCallbacks.unhandledRejection(error);
    });
    BeforeExitListener.reset();
    process.on("beforeExit", BeforeExitListener.invoke);
    const handlerFunc = isHandlerFunction(appRootOrHandler)
        ? appRootOrHandler
        : (await UserFunction.load(appRootOrHandler, handler));
    const runtime = new Runtime(client, handlerFunc, errorCallbacks);
    runtime.scheduleIteration();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBQy9COzs7OztHQUtHO0FBRUgsWUFBWSxDQUFDO0FBRWIsT0FBTyxFQUFtQixpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZFLE9BQU8sS0FBSyxNQUFNLE1BQU0sbUJBQW1CLENBQUM7QUFDNUMsT0FBTyxhQUFhLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxPQUFPLE1BQU0sb0JBQW9CLENBQUM7QUFDekMsT0FBTyxrQkFBa0IsTUFBTSxpQ0FBaUMsQ0FBQztBQUNqRSwyQ0FBMkM7QUFDM0MsT0FBTyxLQUFLLFlBQVksTUFBTSx5QkFBeUIsQ0FBQztBQU94RCxNQUFNLENBQUMsS0FBSyxVQUFVLEdBQUcsQ0FDdkIsZ0JBQTBDLEVBQzFDLFVBQWtCLEVBQUU7SUFFcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUU7UUFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0tBQzlEO0lBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBRXJFLE1BQU0sY0FBYyxHQUFHO1FBQ3JCLGlCQUFpQixFQUFFLENBQUMsS0FBWSxFQUFFLEVBQUU7WUFDbEMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELENBQUM7UUFDRCxrQkFBa0IsRUFBRSxDQUFDLEtBQVksRUFBRSxFQUFFO1lBQ25DLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2RCxDQUFDO0tBQ0YsQ0FBQztJQUVGLE9BQU8sQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUN4QyxjQUFjLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwQixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUU7UUFDbkQsTUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMseUJBQXlCLENBQ2hELE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFDbEIsT0FBTyxDQUNSLENBQUM7UUFDRixjQUFjLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMzQixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVwRCxNQUFNLFdBQVcsR0FBRyxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNyRCxDQUFDLENBQUMsZ0JBQWdCO1FBQ2xCLENBQUMsQ0FBRSxDQUFDLE1BQU0sWUFBWSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsQ0FBcUIsQ0FBQztJQUM5RSxNQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUUsV0FBVyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBRWpFLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQzlCLENBQUMifQ==