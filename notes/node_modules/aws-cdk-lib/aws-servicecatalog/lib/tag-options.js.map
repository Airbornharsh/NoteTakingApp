{
  "version": 3,
  "sources": ["tag-options.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { hashValues } from './private/util';\nimport { InputValidator } from './private/validation';\nimport { CfnTagOption } from './servicecatalog.generated';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * Properties for TagOptions.\n */\nexport interface TagOptionsProps {\n  /**\n   * The values that are allowed to be set for specific tags.\n   * The keys of the map represent the tag keys,\n   * and the values of the map are a list of allowed values for that particular tag key.\n   */\n  readonly allowedValuesForTags: { [tagKey: string]: string[] };\n}\n\n/**\n * Defines a set of TagOptions, which are a list of key-value pairs managed in AWS Service Catalog.\n * It is not an AWS tag, but serves as a template for creating an AWS tag based on the TagOption.\n * See https://docs.aws.amazon.com/servicecatalog/latest/adminguide/tagoptions.html\n *\n * @resource AWS::ServiceCatalog::TagOption\n */\nexport class TagOptions extends cdk.Resource {\n  /**\n   * List of underlying CfnTagOption resources.\n   *\n   * @internal\n   */\n  public _cfnTagOptions: CfnTagOption[];\n\n  constructor(scope: Construct, id: string, props: TagOptionsProps) {\n    super(scope, id);\n\n    this._cfnTagOptions = this.createUnderlyingTagOptions(props.allowedValuesForTags);\n  }\n\n  private createUnderlyingTagOptions(allowedValuesForTags: { [tagKey: string]: string[] }): CfnTagOption[] {\n    if (Object.keys(allowedValuesForTags).length === 0) {\n      throw new Error(`No tag option keys or values were provided for resource ${this.node.path}`);\n    }\n    var tagOptions: CfnTagOption[] = [];\n\n    for (const [tagKey, tagValues] of Object.entries(allowedValuesForTags)) {\n      InputValidator.validateLength(this.node.addr, 'TagOption key', 1, 128, tagKey);\n\n      const uniqueTagValues = new Set(tagValues);\n      if (uniqueTagValues.size === 0) {\n        throw new Error(`No tag option values were provided for tag option key ${tagKey} for resource ${this.node.path}`);\n      }\n      uniqueTagValues.forEach((tagValue: string) => {\n        InputValidator.validateLength(this.node.addr, 'TagOption value', 1, 256, tagValue);\n        const tagOptionIdentifier = hashValues(tagKey, tagValue);\n        const tagOption = new CfnTagOption(this, tagOptionIdentifier, {\n          key: tagKey,\n          value: tagValue,\n          active: true,\n        });\n        tagOptions.push(tagOption);\n      });\n    }\n    return tagOptions;\n  }\n}\n\n"],
  "mappings": "iNAAA,IAAA,QAAA,YAAA,EACA,OAAA,QAAA,gBAAA,EACA,aAAA,QAAA,sBAAA,EACA,2BAAA,QAAA,4BAAA,EAyBA,MAAa,kBAAmB,KAAI,QAAQ,CAQ1C,YAAY,MAAkB,GAAY,MAAsB,CAC9D,MAAM,MAAO,EAAE,4NAEf,KAAK,eAAiB,KAAK,2BAA2B,MAAM,oBAAoB,EAG1E,2BAA2B,qBAAoD,CACrF,GAAI,OAAO,KAAK,oBAAoB,EAAE,SAAW,EAC/C,KAAM,IAAI,OAAM,2DAA2D,KAAK,KAAK,MAAM,EAE7F,GAAI,YAA6B,CAAA,EAEjC,SAAW,CAAC,OAAQ,YAAc,QAAO,QAAQ,oBAAoB,EAAG,CACtE,aAAA,eAAe,eAAe,KAAK,KAAK,KAAM,gBAAiB,EAAG,IAAK,MAAM,EAE7E,KAAM,iBAAkB,GAAI,KAAI,SAAS,EACzC,GAAI,gBAAgB,OAAS,EAC3B,KAAM,IAAI,OAAM,yDAAyD,uBAAuB,KAAK,KAAK,MAAM,EAElH,gBAAgB,QAAQ,AAAC,UAAoB,CAC3C,aAAA,eAAe,eAAe,KAAK,KAAK,KAAM,kBAAmB,EAAG,IAAK,QAAQ,EACjF,KAAM,qBAAsB,OAAA,WAAW,OAAQ,QAAQ,EACjD,UAAY,GAAI,4BAAA,aAAa,KAAM,oBAAqB,CAC5D,IAAK,OACL,MAAO,SACP,OAAQ,GACT,EACD,WAAW,KAAK,SAAS,CAC3B,CAAC,EAEH,MAAO,aAtCX,QAAA,WAAA",
  "names": []
}
