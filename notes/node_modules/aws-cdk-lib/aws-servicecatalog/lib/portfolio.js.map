{
  "version": 3,
  "sources": ["portfolio.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as sns from '../../aws-sns';\nimport * as cdk from '../../core';\nimport { MessageLanguage } from './common';\nimport {\n  CloudFormationRuleConstraintOptions, CommonConstraintOptions,\n  StackSetsConstraintOptions, TagUpdateConstraintOptions,\n} from './constraints';\nimport { AssociationManager } from './private/association-manager';\nimport { hashValues } from './private/util';\nimport { InputValidator } from './private/validation';\nimport { IProduct } from './product';\nimport { CfnPortfolio, CfnPortfolioPrincipalAssociation, CfnPortfolioShare } from './servicecatalog.generated';\nimport { TagOptions } from './tag-options';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * Options for portfolio share.\n */\nexport interface PortfolioShareOptions {\n  /**\n   * Whether to share tagOptions as a part of the portfolio share\n   *\n   * @default - share not specified\n   */\n  readonly shareTagOptions?: boolean;\n\n  /**\n   * The message language of the share.\n   * Controls status and error message language for share.\n   *\n   * @default - English\n   */\n  readonly messageLanguage?: MessageLanguage;\n}\n\n/**\n * A Service Catalog portfolio.\n */\nexport interface IPortfolio extends cdk.IResource {\n  /**\n   * The ARN of the portfolio.\n   * @attribute\n   */\n  readonly portfolioArn: string;\n\n  /**\n   * The ID of the portfolio.\n   * @attribute\n   */\n  readonly portfolioId: string;\n\n  /**\n   * Associate portfolio with an IAM Role.\n   * @param role an IAM role\n   */\n  giveAccessToRole(role: iam.IRole): void;\n\n  /**\n   * Associate portfolio with an IAM User.\n   * @param user an IAM user\n   */\n  giveAccessToUser(user: iam.IUser): void;\n\n  /**\n   * Associate portfolio with an IAM Group.\n   * @param group an IAM Group\n   */\n  giveAccessToGroup(group: iam.IGroup): void;\n\n  /**\n   * Initiate a portfolio share with another account.\n   * @param accountId AWS account to share portfolio with\n   * @param options Options for the initiate share\n   */\n  shareWithAccount(accountId: string, options?: PortfolioShareOptions): void;\n\n  /**\n   * Associate portfolio with the given product.\n   * @param product A service catalog produt.\n   */\n  addProduct(product: IProduct): void;\n\n  /**\n   * Associate Tag Options.\n   * A TagOption is a key-value pair managed in AWS Service Catalog.\n   * It is not an AWS tag, but serves as a template for creating an AWS tag based on the TagOption.\n   */\n  associateTagOptions(tagOptions: TagOptions): void;\n\n  /**\n   * Add a Resource Update Constraint.\n   */\n  constrainTagUpdates(product: IProduct, options?: TagUpdateConstraintOptions): void;\n\n  /**\n   * Add notifications for supplied topics on the provisioned product.\n   * @param product A service catalog product.\n   * @param topic A SNS Topic to receive notifications on events related to the provisioned product.\n   */\n  notifyOnStackEvents(product: IProduct, topic: sns.ITopic, options?: CommonConstraintOptions): void;\n\n  /**\n   * Set provisioning rules for the product.\n   * @param product A service catalog product.\n   * @param options options for the constraint.\n   */\n  constrainCloudFormationParameters(product:IProduct, options: CloudFormationRuleConstraintOptions): void;\n\n  /**\n   * Force users to assume a certain role when launching a product.\n   * This sets the launch role using the role arn which is tied to the account this role exists in.\n   * This is useful if you will be provisioning products from the account where this role exists.\n   * If you intend to share the portfolio across accounts, use a local launch role.\n   *\n   * @param product A service catalog product.\n   * @param launchRole The IAM role a user must assume when provisioning the product.\n   * @param options options for the constraint.\n   */\n  setLaunchRole(product: IProduct, launchRole: iam.IRole, options?: CommonConstraintOptions): void;\n\n  /**\n   * Force users to assume a certain role when launching a product.\n   * The role will be referenced by name in the local account instead of a static role arn.\n   * A role with this name will automatically be created and assumable by Service Catalog in this account.\n   * This is useful when sharing the portfolio with multiple accounts.\n   *\n   * @param product A service catalog product.\n   * @param launchRoleName The name of the IAM role a user must assume when provisioning the product. A role with this name must exist in the account where the portolio is created and the accounts it is shared with.\n   * @param options options for the constraint.\n   */\n  setLocalLaunchRoleName(product: IProduct, launchRoleName: string, options?: CommonConstraintOptions): iam.IRole;\n\n  /**\n   * Force users to assume a certain role when launching a product.\n   * The role name will be referenced by in the local account and must be set explicitly.\n   * This is useful when sharing the portfolio with multiple accounts.\n   *\n   * @param product A service catalog product.\n   * @param launchRole The IAM role a user must assume when provisioning the product. A role with this name must exist in the account where the portolio is created and the accounts it is shared with. The role name must be set explicitly.\n   * @param options options for the constraint.\n   */\n  setLocalLaunchRole(product: IProduct, launchRole: iam.IRole, options?: CommonConstraintOptions): void;\n\n  /**\n   * Configure deployment options using AWS Cloudformation StackSets\n   *\n   * @param product A service catalog product.\n   * @param options Configuration options for the constraint.\n   */\n  deployWithStackSets(product: IProduct, options: StackSetsConstraintOptions): void;\n}\n\nabstract class PortfolioBase extends cdk.Resource implements IPortfolio {\n  public abstract readonly portfolioArn: string;\n  public abstract readonly portfolioId: string;\n  private readonly associatedPrincipals: Set<string> = new Set();\n\n  public giveAccessToRole(role: iam.IRole): void {\n    this.associatePrincipal(role.roleArn, role.node.addr);\n  }\n\n  public giveAccessToUser(user: iam.IUser): void {\n    this.associatePrincipal(user.userArn, user.node.addr);\n  }\n\n  public giveAccessToGroup(group: iam.IGroup): void {\n    this.associatePrincipal(group.groupArn, group.node.addr);\n  }\n\n  public addProduct(product: IProduct): void {\n    AssociationManager.associateProductWithPortfolio(this, product, undefined);\n  }\n\n  public shareWithAccount(accountId: string, options: PortfolioShareOptions = {}): void {\n    const hashId = this.generateUniqueHash(accountId);\n    new CfnPortfolioShare(this, `PortfolioShare${hashId}`, {\n      portfolioId: this.portfolioId,\n      accountId: accountId,\n      shareTagOptions: options.shareTagOptions,\n      acceptLanguage: options.messageLanguage,\n    });\n  }\n\n  public associateTagOptions(tagOptions: TagOptions) {\n    AssociationManager.associateTagOptions(this, this.portfolioId, tagOptions);\n  }\n\n  public constrainTagUpdates(product: IProduct, options: TagUpdateConstraintOptions = {}): void {\n    AssociationManager.constrainTagUpdates(this, product, options);\n  }\n\n  public notifyOnStackEvents(product: IProduct, topic: sns.ITopic, options: CommonConstraintOptions = {}): void {\n    AssociationManager.notifyOnStackEvents(this, product, topic, options);\n  }\n\n  public constrainCloudFormationParameters(product: IProduct, options: CloudFormationRuleConstraintOptions): void {\n    AssociationManager.constrainCloudFormationParameters(this, product, options);\n  }\n\n  public setLaunchRole(product: IProduct, launchRole: iam.IRole, options: CommonConstraintOptions = {}): void {\n    AssociationManager.setLaunchRole(this, product, launchRole, options);\n  }\n\n  public setLocalLaunchRoleName(product: IProduct, launchRoleName: string, options: CommonConstraintOptions = {}): iam.IRole {\n    const launchRole: iam.IRole = new iam.Role(this, `LaunchRole${launchRoleName}`, {\n      roleName: launchRoleName,\n      assumedBy: new iam.ServicePrincipal('servicecatalog.amazonaws.com'),\n    });\n    AssociationManager.setLocalLaunchRoleName(this, product, launchRole.roleName, options);\n    return launchRole;\n  }\n\n  public setLocalLaunchRole(product: IProduct, launchRole: iam.IRole, options: CommonConstraintOptions = {}): void {\n    InputValidator.validateRoleNameSetForLocalLaunchRole(launchRole);\n    AssociationManager.setLocalLaunchRoleName(this, product, launchRole.roleName, options);\n  }\n\n  public deployWithStackSets(product: IProduct, options: StackSetsConstraintOptions) {\n    AssociationManager.deployWithStackSets(this, product, options);\n  }\n\n  /**\n   * Associate a principal with the portfolio.\n   * If the principal is already associated, it will skip.\n   */\n  private associatePrincipal(principalArn: string, principalId: string): void {\n    if (!this.associatedPrincipals.has(principalArn)) {\n      const hashId = this.generateUniqueHash(principalId);\n      new CfnPortfolioPrincipalAssociation(this, `PortolioPrincipalAssociation${hashId}`, {\n        portfolioId: this.portfolioId,\n        principalArn: principalArn,\n        principalType: 'IAM',\n      });\n      this.associatedPrincipals.add(principalArn);\n    }\n  }\n\n  /**\n   * Create a unique id based off the L1 CfnPortfolio or the arn of an imported portfolio.\n   */\n  protected abstract generateUniqueHash(value: string): string;\n}\n\n/**\n * Properties for a Portfolio.\n */\nexport interface PortfolioProps {\n  /**\n   * The name of the portfolio.\n   */\n  readonly displayName: string;\n\n  /**\n   * The provider name.\n   */\n  readonly providerName: string;\n\n  /**\n   * The message language. Controls language for\n   * status logging and errors.\n   *\n   * @default - English\n   */\n  readonly messageLanguage?: MessageLanguage;\n\n  /**\n   * Description for portfolio.\n   *\n   * @default - No description provided\n   */\n  readonly description?: string;\n\n  /**\n   * TagOptions associated directly to a portfolio.\n   *\n   * @default - No tagOptions provided\n   */\n  readonly tagOptions?: TagOptions\n}\n\n/**\n * A Service Catalog portfolio.\n */\nexport class Portfolio extends PortfolioBase {\n  /**\n   * Creates a Portfolio construct that represents an external portfolio.\n   *\n   * @param scope The parent creating construct (usually `this`).\n   * @param id The construct's name.\n   * @param portfolioArn the Amazon Resource Name of the existing portfolio.\n   */\n  public static fromPortfolioArn(scope: Construct, id: string, portfolioArn: string): IPortfolio {\n    const arn = cdk.Stack.of(scope).splitArn(portfolioArn, cdk.ArnFormat.SLASH_RESOURCE_NAME);\n    const portfolioId = arn.resourceName;\n\n    if (!portfolioId) {\n      throw new Error('Missing required Portfolio ID from Portfolio ARN: ' + portfolioArn);\n    }\n\n    class Import extends PortfolioBase {\n      public readonly portfolioArn = portfolioArn;\n      public readonly portfolioId = portfolioId!;\n\n      protected generateUniqueHash(value: string): string {\n        return hashValues(this.portfolioArn, value);\n      }\n    }\n\n    return new Import(scope, id, {\n      environmentFromArn: portfolioArn,\n    });\n  }\n\n  public readonly portfolioArn: string;\n  public readonly portfolioId: string;\n  private readonly portfolio: CfnPortfolio;\n\n  constructor(scope: Construct, id: string, props: PortfolioProps) {\n    super(scope, id);\n\n    this.validatePortfolioProps(props);\n\n    this.portfolio = new CfnPortfolio(this, 'Resource', {\n      displayName: props.displayName,\n      providerName: props.providerName,\n      description: props.description,\n      acceptLanguage: props.messageLanguage,\n    });\n    this.portfolioId = this.portfolio.ref;\n    this.portfolioArn = cdk.Stack.of(this).formatArn({\n      service: 'servicecatalog',\n      resource: 'portfolio',\n      resourceName: this.portfolioId,\n    });\n    if (props.tagOptions !== undefined) {\n      this.associateTagOptions(props.tagOptions);\n    }\n  }\n\n  protected generateUniqueHash(value: string): string {\n    return hashValues(cdk.Names.nodeUniqueId(this.portfolio.node), value);\n  }\n\n  private validatePortfolioProps(props: PortfolioProps) {\n    InputValidator.validateLength(this.node.path, 'portfolio display name', 1, 100, props.displayName);\n    InputValidator.validateLength(this.node.path, 'portfolio provider name', 1, 50, props.providerName);\n    InputValidator.validateLength(this.node.path, 'portfolio description', 0, 2000, props.description);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
