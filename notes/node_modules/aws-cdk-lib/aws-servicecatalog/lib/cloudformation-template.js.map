{
  "version": 3,
  "sources": ["cloudformation-template.ts"],
  "sourcesContent": ["import * as s3_assets from '../../aws-s3-assets';\nimport { hashValues } from './private/util';\nimport { ProductStack } from './product-stack';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * Represents the Product Provisioning Artifact Template.\n */\nexport abstract class CloudFormationTemplate {\n  /**\n   * Template from URL\n   * @param url The url that points to the provisioning artifacts template\n   */\n  public static fromUrl(url: string): CloudFormationTemplate {\n    return new CloudFormationUrlTemplate(url);\n  }\n\n  /**\n   * Loads the provisioning artifacts template from a local disk path.\n   *\n   * @param path A file containing the provisioning artifacts\n   */\n  public static fromAsset(path: string, options?: s3_assets.AssetOptions): CloudFormationTemplate {\n    return new CloudFormationAssetTemplate(path, options);\n  }\n\n  /**\n   * Creates a product with the resources defined in the given product stack.\n   */\n  public static fromProductStack(productStack: ProductStack): CloudFormationTemplate {\n    return new CloudFormationProductStackTemplate(productStack);\n  }\n\n  /**\n   * Called when the product is initialized to allow this object to bind\n   * to the stack, add resources and have fun.\n   *\n   * @param scope The binding scope. Don't be smart about trying to down-cast or\n   * assume it's initialized. You may just use it as a construct scope.\n   */\n  public abstract bind(scope: Construct): CloudFormationTemplateConfig;\n}\n\n/**\n * Result of binding `Template` into a `Product`.\n */\nexport interface CloudFormationTemplateConfig {\n  /**\n    * The http url of the template in S3.\n    */\n  readonly httpUrl: string;\n}\n\n/**\n * Template code from a Url.\n */\nclass CloudFormationUrlTemplate extends CloudFormationTemplate {\n  constructor(private readonly url: string) {\n    super();\n  }\n\n  public bind(_scope: Construct): CloudFormationTemplateConfig {\n    return {\n      httpUrl: this.url,\n    };\n  }\n}\n\n/**\n * Template from a local file.\n */\nclass CloudFormationAssetTemplate extends CloudFormationTemplate {\n  private asset?: s3_assets.Asset;\n\n  /**\n   * @param path The path to the asset file.\n   */\n  constructor(public readonly path: string, private readonly options: s3_assets.AssetOptions = { }) {\n    super();\n  }\n\n  public bind(scope: Construct): CloudFormationTemplateConfig {\n    // If the same AssetCode is used multiple times, retain only the first instantiation.\n    if (!this.asset) {\n      this.asset = new s3_assets.Asset(scope, `Template${hashValues(this.path)}`, {\n        path: this.path,\n        ...this.options,\n      });\n    }\n\n    return {\n      httpUrl: this.asset.httpUrl,\n    };\n  }\n}\n\n/**\n * Template from a CDK defined product stack.\n */\nclass CloudFormationProductStackTemplate extends CloudFormationTemplate {\n  /**\n   * @param stack A service catalog product stack.\n  */\n  constructor(public readonly productStack: ProductStack) {\n    super();\n  }\n\n  public bind(_scope: Construct): CloudFormationTemplateConfig {\n    return {\n      httpUrl: this.productStack._getTemplateUrl(),\n    };\n  }\n}\n"],
  "mappings": "6NAAA,UAAA,QAAA,qBAAA,EACA,OAAA,QAAA,gBAAA,EAUA,MAAsB,sBAAsB,OAK5B,SAAQ,IAAW,CAC/B,MAAO,IAAI,2BAA0B,GAAG,QAQ5B,WAAU,KAAc,QAAgC,mNACpE,MAAO,IAAI,6BAA4B,KAAM,OAAO,QAMxC,kBAAiB,aAA0B,oOACvD,MAAO,IAAI,oCAAmC,YAAY,GAtB9D,QAAA,uBAAA,uJAgDA,MAAM,iCAAkC,uBAAsB,CAC5D,YAA6B,IAAW,CACtC,MAAK,EADsB,KAAA,IAAA,IAItB,KAAK,OAAiB,CAC3B,MAAO,CACL,QAAS,KAAK,MAQpB,MAAM,mCAAoC,uBAAsB,CAM9D,YAA4B,KAA+B,QAAkC,CAAA,EAAG,CAC9F,MAAK,EADqB,KAAA,KAAA,KAA+B,KAAA,QAAA,QAIpD,KAAK,MAAgB,CAE1B,MAAK,MAAK,OACR,MAAK,MAAQ,GAAI,WAAU,MAAM,MAAO,WAAW,OAAA,WAAW,KAAK,IAAI,IAAK,CAC1E,KAAM,KAAK,QACR,KAAK,QACT,GAGI,CACL,QAAS,KAAK,MAAM,UAQ1B,MAAM,0CAA2C,uBAAsB,CAIrE,YAA4B,aAA0B,CACpD,MAAK,EADqB,KAAA,aAAA,aAIrB,KAAK,OAAiB,CAC3B,MAAO,CACL,QAAS,KAAK,aAAa,gBAAe",
  "names": []
}
