{
  "version": 3,
  "sources": ["validation.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport * as cdk from '../../../core';\n\n/**\n * Class to validate that inputs match requirements.\n */\nexport class InputValidator {\n  /**\n   * Validates length is between allowed min and max lengths.\n   */\n  public static validateLength(resourceName: string, inputName: string, minLength: number, maxLength: number, inputString?: string): void {\n    if (!cdk.Token.isUnresolved(inputString) && inputString !== undefined && (inputString.length < minLength || inputString.length > maxLength)) {\n      throw new Error(`Invalid ${inputName} for resource ${resourceName}, must have length between ${minLength} and ${maxLength}, got: '${this.truncateString(inputString, 100)}'`);\n    }\n  }\n\n  /**\n   * Validates string matches the allowed regex pattern.\n   */\n  public static validateRegex(resourceName: string, inputName: string, regexp: RegExp, inputString?: string): void {\n    if (!cdk.Token.isUnresolved(inputString) && inputString !== undefined && !regexp.test(inputString)) {\n      throw new Error(`Invalid ${inputName} for resource ${resourceName}, must match regex pattern ${regexp}, got: '${this.truncateString(inputString, 100)}'`);\n    }\n  }\n\n  /**\n   * Validates string matches the valid URL regex pattern.\n   */\n  public static validateUrl(resourceName: string, inputName: string, inputString?: string): void {\n    this.validateRegex(resourceName, inputName, /^https?:\\/\\/.*/, inputString);\n  }\n\n  /**\n  * Validates string matches the valid email regex pattern.\n  */\n  public static validateEmail(resourceName: string, inputName: string, inputString?: string): void {\n    this.validateRegex(resourceName, inputName, /^[\\w\\d.%+\\-]+@[a-z\\d.\\-]+\\.[a-z]{2,4}$/i, inputString);\n  }\n\n  /**\n  * Validates that a role being used as a local launch role has the role name set\n  */\n  public static validateRoleNameSetForLocalLaunchRole(role: iam.IRole): void {\n    if (role.node.defaultChild) {\n      if (cdk.Token.isUnresolved((role.node.defaultChild as iam.CfnRole).roleName)) {\n        throw new Error(`Role ${role.node.id} used for Local Launch Role must have roleName explicitly set`);\n      }\n    }\n  }\n\n  private static truncateString(string: string, maxLength: number): string {\n    if (string.length > maxLength) {\n      return string.substring(0, maxLength) + '[truncated]';\n    }\n    return string;\n  }\n}"],
  "mappings": "kGACA,KAAA,KAAA,QAAA,eAAA,EAKA,MAAa,cAAc,OAIX,gBAAe,aAAsB,UAAmB,UAAmB,UAAmB,YAAoB,CAC9H,GAAI,CAAC,IAAI,MAAM,aAAa,WAAW,GAAK,cAAgB,QAAc,aAAY,OAAS,WAAa,YAAY,OAAS,WAC/H,KAAM,IAAI,OAAM,WAAW,0BAA0B,0CAA0C,iBAAiB,oBAAoB,KAAK,eAAe,YAAa,GAAG,IAAI,QAOlK,eAAc,aAAsB,UAAmB,OAAgB,YAAoB,CACvG,GAAI,CAAC,IAAI,MAAM,aAAa,WAAW,GAAK,cAAgB,QAAa,CAAC,OAAO,KAAK,WAAW,EAC/F,KAAM,IAAI,OAAM,WAAW,0BAA0B,0CAA0C,iBAAiB,KAAK,eAAe,YAAa,GAAG,IAAI,QAO9I,aAAY,aAAsB,UAAmB,YAAoB,CACrF,KAAK,cAAc,aAAc,UAAW,iBAAkB,WAAW,QAM7D,eAAc,aAAsB,UAAmB,YAAoB,CACvF,KAAK,cAAc,aAAc,UAAW,0CAA2C,WAAW,QAMtF,uCAAsC,KAAe,CACjE,GAAI,KAAK,KAAK,cACR,IAAI,MAAM,aAAc,KAAK,KAAK,aAA6B,QAAQ,EACzE,KAAM,IAAI,OAAM,QAAQ,KAAK,KAAK,iEAAiE,QAK1F,gBAAe,OAAgB,UAAiB,CAC7D,MAAI,QAAO,OAAS,UACX,OAAO,UAAU,EAAG,SAAS,EAAI,cAEnC,QAhDX,QAAA,eAAA",
  "names": []
}
