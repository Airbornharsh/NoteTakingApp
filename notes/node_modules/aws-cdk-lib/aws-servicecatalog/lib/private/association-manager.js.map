{
  "version": 3,
  "sources": ["association-manager.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport * as sns from '../../../aws-sns';\nimport * as cdk from '../../../core';\nimport {\n  CloudFormationRuleConstraintOptions, CommonConstraintOptions, StackSetsConstraintOptions,\n  TagUpdateConstraintOptions, TemplateRule, TemplateRuleAssertion,\n} from '../constraints';\nimport { IPortfolio } from '../portfolio';\nimport { IProduct } from '../product';\nimport {\n  CfnLaunchNotificationConstraint, CfnLaunchRoleConstraint, CfnLaunchTemplateConstraint, CfnPortfolioProductAssociation,\n  CfnResourceUpdateConstraint, CfnStackSetConstraint, CfnTagOptionAssociation,\n} from '../servicecatalog.generated';\nimport { TagOptions } from '../tag-options';\nimport { hashValues } from './util';\nimport { InputValidator } from './validation';\n\nexport class AssociationManager {\n  public static associateProductWithPortfolio(\n    portfolio: IPortfolio, product: IProduct, options: CommonConstraintOptions | undefined,\n  ): { associationKey: string, cfnPortfolioProductAssociation: CfnPortfolioProductAssociation } {\n    InputValidator.validateLength(this.prettyPrintAssociation(portfolio, product), 'description', 0, 2000, options?.description);\n    const associationKey = hashValues(portfolio.node.addr, product.node.addr, product.stack.node.addr);\n    const constructId = `PortfolioProductAssociation${associationKey}`;\n    const existingAssociation = portfolio.node.tryFindChild(constructId);\n    const cfnAssociation = existingAssociation\n      ? existingAssociation as CfnPortfolioProductAssociation\n      : new CfnPortfolioProductAssociation(portfolio as unknown as cdk.Resource, constructId, {\n        portfolioId: portfolio.portfolioId,\n        productId: product.productId,\n      });\n\n    return {\n      associationKey: associationKey,\n      cfnPortfolioProductAssociation: cfnAssociation,\n    };\n  }\n\n  public static constrainTagUpdates(portfolio: IPortfolio, product: IProduct, options: TagUpdateConstraintOptions): void {\n    const association = this.associateProductWithPortfolio(portfolio, product, options);\n    const constructId = `ResourceUpdateConstraint${association.associationKey}`;\n\n    if (!portfolio.node.tryFindChild(constructId)) {\n      const constraint = new CfnResourceUpdateConstraint(portfolio as unknown as cdk.Resource, constructId, {\n        acceptLanguage: options.messageLanguage,\n        description: options.description,\n        portfolioId: portfolio.portfolioId,\n        productId: product.productId,\n        tagUpdateOnProvisionedProduct: options.allow === false ? 'NOT_ALLOWED' : 'ALLOWED',\n      });\n\n      // Add dependsOn to force proper order in deployment.\n      constraint.addDependsOn(association.cfnPortfolioProductAssociation);\n    } else {\n      throw new Error(`Cannot have multiple tag update constraints for association ${this.prettyPrintAssociation(portfolio, product)}`);\n    }\n  }\n\n  public static notifyOnStackEvents(portfolio: IPortfolio, product: IProduct, topic: sns.ITopic, options: CommonConstraintOptions): void {\n    const association = this.associateProductWithPortfolio(portfolio, product, options);\n    const constructId = `LaunchNotificationConstraint${hashValues(topic.node.addr, topic.stack.node.addr, association.associationKey)}`;\n\n    if (!portfolio.node.tryFindChild(constructId)) {\n      const constraint = new CfnLaunchNotificationConstraint(portfolio as unknown as cdk.Resource, constructId, {\n        acceptLanguage: options.messageLanguage,\n        description: options.description,\n        portfolioId: portfolio.portfolioId,\n        productId: product.productId,\n        notificationArns: [topic.topicArn],\n      });\n\n      // Add dependsOn to force proper order in deployment.\n      constraint.addDependsOn(association.cfnPortfolioProductAssociation);\n    } else {\n      throw new Error(`Topic ${topic.node.path} is already subscribed to association ${this.prettyPrintAssociation(portfolio, product)}`);\n    }\n  }\n\n  public static constrainCloudFormationParameters(\n    portfolio: IPortfolio, product: IProduct,\n    options: CloudFormationRuleConstraintOptions,\n  ): void {\n    const association = this.associateProductWithPortfolio(portfolio, product, options);\n    const constructId = `LaunchTemplateConstraint${hashValues(association.associationKey, options.rule.ruleName)}`;\n\n    if (!portfolio.node.tryFindChild(constructId)) {\n      const constraint = new CfnLaunchTemplateConstraint(portfolio as unknown as cdk.Resource, constructId, {\n        acceptLanguage: options.messageLanguage,\n        description: options.description,\n        portfolioId: portfolio.portfolioId,\n        productId: product.productId,\n        rules: this.formatTemplateRule(portfolio.stack, options.rule),\n      });\n\n      // Add dependsOn to force proper order in deployment.\n      constraint.addDependsOn(association.cfnPortfolioProductAssociation);\n    } else {\n      throw new Error(`Provisioning rule ${options.rule.ruleName} already configured on association ${this.prettyPrintAssociation(portfolio, product)}`);\n    }\n  }\n\n  public static setLaunchRole(portfolio: IPortfolio, product: IProduct, launchRole: iam.IRole, options: CommonConstraintOptions): void {\n    this.setLaunchRoleConstraint(portfolio, product, options, {\n      roleArn: launchRole.roleArn,\n    });\n  }\n\n  public static setLocalLaunchRoleName(portfolio: IPortfolio, product: IProduct, launchRoleName: string, options: CommonConstraintOptions): void {\n    this.setLaunchRoleConstraint(portfolio, product, options, {\n      localRoleName: launchRoleName,\n    });\n  }\n\n  public static deployWithStackSets(portfolio: IPortfolio, product: IProduct, options: StackSetsConstraintOptions) {\n    const association = this.associateProductWithPortfolio(portfolio, product, options);\n    // Check if a launch role has already been set.\n    if (portfolio.node.tryFindChild(this.launchRoleConstraintLogicalId(association.associationKey))) {\n      throw new Error(`Cannot configure StackSet deployment when a launch role is already defined for association ${this.prettyPrintAssociation(portfolio, product)}`);\n    }\n\n    const constructId = this.stackSetConstraintLogicalId(association.associationKey);\n    if (!portfolio.node.tryFindChild(constructId)) {\n      const constraint = new CfnStackSetConstraint(portfolio as unknown as cdk.Resource, constructId, {\n        acceptLanguage: options.messageLanguage,\n        description: options.description ?? '',\n        portfolioId: portfolio.portfolioId,\n        productId: product.productId,\n        accountList: options.accounts,\n        regionList: options.regions,\n        adminRole: options.adminRole.roleArn,\n        executionRole: options.executionRoleName,\n        stackInstanceControl: options.allowStackSetInstanceOperations ? 'ALLOWED' : 'NOT_ALLOWED',\n      });\n\n      // Add dependsOn to force proper order in deployment.\n      constraint.addDependsOn(association.cfnPortfolioProductAssociation);\n    } else {\n      throw new Error(`Cannot configure multiple StackSet deployment constraints for association ${this.prettyPrintAssociation(portfolio, product)}`);\n    }\n  }\n\n  public static associateTagOptions(resource: cdk.IResource, resourceId: string, tagOptions: TagOptions): void {\n    for (const cfnTagOption of tagOptions._cfnTagOptions) {\n      const tagAssocationConstructId = `TagOptionAssociation${hashValues(cfnTagOption.key, cfnTagOption.value, resource.node.addr)}`;\n      if (!resource.node.tryFindChild(tagAssocationConstructId)) {\n        new CfnTagOptionAssociation(resource as cdk.Resource, tagAssocationConstructId, {\n          resourceId: resourceId,\n          tagOptionId: cfnTagOption.ref,\n        });\n      }\n    }\n  }\n\n  private static setLaunchRoleConstraint(\n    portfolio: IPortfolio, product: IProduct, options: CommonConstraintOptions,\n    roleOptions: LaunchRoleConstraintRoleOptions,\n  ): void {\n    const association = this.associateProductWithPortfolio(portfolio, product, options);\n    // Check if a stackset deployment constraint has already been configured.\n    if (portfolio.node.tryFindChild(this.stackSetConstraintLogicalId(association.associationKey))) {\n      throw new Error(`Cannot set launch role when a StackSet rule is already defined for association ${this.prettyPrintAssociation(portfolio, product)}`);\n    }\n\n    const constructId = this.launchRoleConstraintLogicalId(association.associationKey);\n    if (!portfolio.node.tryFindChild(constructId)) {\n      const constraint = new CfnLaunchRoleConstraint(portfolio as unknown as cdk.Resource, constructId, {\n        acceptLanguage: options.messageLanguage,\n        description: options.description,\n        portfolioId: portfolio.portfolioId,\n        productId: product.productId,\n        roleArn: roleOptions.roleArn,\n        localRoleName: roleOptions.localRoleName,\n      });\n\n      // Add dependsOn to force proper order in deployment.\n      constraint.addDependsOn(association.cfnPortfolioProductAssociation);\n    } else {\n      throw new Error(`Cannot set multiple launch roles for association ${this.prettyPrintAssociation(portfolio, product)}`);\n    }\n  }\n\n  private static stackSetConstraintLogicalId(associationKey: string): string {\n    return `StackSetConstraint${associationKey}`;\n  }\n\n  private static launchRoleConstraintLogicalId(associationKey:string): string {\n    return `LaunchRoleConstraint${associationKey}`;\n  }\n\n  private static prettyPrintAssociation(portfolio: IPortfolio, product: IProduct): string {\n    return `- Portfolio: ${portfolio.node.path} | Product: ${product.node.path}`;\n  }\n\n  private static formatTemplateRule(stack: cdk.Stack, rule: TemplateRule): string {\n    return JSON.stringify({\n      [rule.ruleName]: {\n        Assertions: this.formatAssertions(stack, rule.assertions),\n        RuleCondition: rule.condition ? stack.resolve(rule.condition) : undefined,\n      },\n    });\n  }\n\n  private static formatAssertions(\n    stack: cdk.Stack, assertions : TemplateRuleAssertion[],\n  ): { Assert: string, AssertDescription: string | undefined }[] {\n    return assertions.reduce((formattedAssertions, assertion) => {\n      formattedAssertions.push( {\n        Assert: stack.resolve(assertion.assert),\n        AssertDescription: assertion.description,\n      });\n      return formattedAssertions;\n    }, new Array<{ Assert: string, AssertDescription: string | undefined }>());\n  };\n}\n\ninterface LaunchRoleArnOption {\n  readonly roleArn: string,\n  readonly localRoleName?: never,\n}\n\ninterface LaunchRoleNameOption {\n  readonly localRoleName: string,\n  readonly roleArn?: never,\n}\n\ntype LaunchRoleConstraintRoleOptions = LaunchRoleArnOption | LaunchRoleNameOption;\n"],
  "mappings": "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",
  "names": []
}
