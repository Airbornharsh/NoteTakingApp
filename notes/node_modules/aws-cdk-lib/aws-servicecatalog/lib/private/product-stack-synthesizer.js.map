{
  "version": 3,
  "sources": ["product-stack-synthesizer.ts"],
  "sourcesContent": ["import * as cdk from '../../../core';\n\n/**\n * Deployment environment for an AWS Service Catalog product stack.\n *\n * Interoperates with the StackSynthesizer of the parent stack.\n */\nexport class ProductStackSynthesizer extends cdk.StackSynthesizer {\n  private stack?: cdk.Stack;\n\n  public bind(stack: cdk.Stack): void {\n    if (this.stack !== undefined) {\n      throw new Error('A Stack Synthesizer can only be bound once, create a new instance to use with a different Stack');\n    }\n    this.stack = stack;\n  }\n\n  public addFileAsset(_asset: cdk.FileAssetSource): cdk.FileAssetLocation {\n    throw new Error('Service Catalog Product Stacks cannot use Assets');\n  }\n\n  public addDockerImageAsset(_asset: cdk.DockerImageAssetSource): cdk.DockerImageAssetLocation {\n    throw new Error('Service Catalog Product Stacks cannot use Assets');\n  }\n\n  public synthesize(session: cdk.ISynthesisSession): void {\n    if (!this.stack) {\n      throw new Error('You must call bindStack() first');\n    }\n    // Synthesize the template, but don't emit as a cloud assembly artifact.\n    // It will be registered as an S3 asset of its parent instead.\n    this.synthesizeStackTemplate(this.stack, session);\n  }\n}\n"],
  "mappings": "2GAAA,KAAA,KAAA,QAAA,eAAA,EAOA,MAAa,+BAAgC,KAAI,gBAAgB,CAGxD,KAAK,MAAgB,CAC1B,GAAI,KAAK,QAAU,OACjB,KAAM,IAAI,OAAM,iGAAiG,EAEnH,KAAK,MAAQ,MAGR,aAAa,OAA2B,CAC7C,KAAM,IAAI,OAAM,kDAAkD,EAG7D,oBAAoB,OAAkC,CAC3D,KAAM,IAAI,OAAM,kDAAkD,EAG7D,WAAW,QAA8B,CAC9C,GAAI,CAAC,KAAK,MACR,KAAM,IAAI,OAAM,iCAAiC,EAInD,KAAK,wBAAwB,KAAK,MAAO,OAAO,GAxBpD,QAAA,wBAAA",
  "names": []
}
